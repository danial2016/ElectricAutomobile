
CytronMD10C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004964  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084964  00084964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20070000  0008496c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001ac  20070af0  0008545c  00020af0  2**2
                  ALLOC
  4 .stack        00002004  20070c9c  00085608  00020af0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020af0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b19  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a4b2  00000000  00000000  00020b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003dff  00000000  00000000  0003b024  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004b66  00000000  00000000  0003ee23  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b70  00000000  00000000  00043989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a60  00000000  00000000  000444f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b087  00000000  00000000  00044f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013197  00000000  00000000  0005ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00064adf  00000000  00000000  00073177  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002688  00000000  00000000  000d7c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	a0 2c 07 20 f1 0c 08 00 ed 0c 08 00 81 03 08 00     .,. ............
   80010:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 00 00 00 00     ................
	...
   8002c:	ed 0c 08 00 ed 0c 08 00 00 00 00 00 ed 0c 08 00     ................
   8003c:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ................
   8004c:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ................
   8005c:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 00 00 00 00     ................
   8006c:	3d 0b 08 00 51 0b 08 00 65 0b 08 00 79 0b 08 00     =...Q...e...y...
	...
   80084:	5d 05 08 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ]...............
   80094:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ................
   800a4:	00 00 00 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ................
   800b4:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ................
   800c4:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ................
   800d4:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ................
   800e4:	ed 0c 08 00 ed 0c 08 00 ed 0c 08 00 ed 0c 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070af0 	.word	0x20070af0
   80110:	00000000 	.word	0x00000000
   80114:	0008496c 	.word	0x0008496c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008496c 	.word	0x0008496c
   80154:	20070af4 	.word	0x20070af4
   80158:	0008496c 	.word	0x0008496c
   8015c:	00000000 	.word	0x00000000

00080160 <init_motors>:

static void setup_direction_pin(void);
static void maintain_speed(int speed);

void init_motors(void)
{
   80160:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80162:	200b      	movs	r0, #11
   80164:	4c0c      	ldr	r4, [pc, #48]	; (80198 <init_motors+0x38>)
   80166:	47a0      	blx	r4
   80168:	200c      	movs	r0, #12
   8016a:	47a0      	blx	r4
   8016c:	200d      	movs	r0, #13
   8016e:	47a0      	blx	r4
   80170:	200e      	movs	r0, #14
   80172:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80174:	4b09      	ldr	r3, [pc, #36]	; (8019c <init_motors+0x3c>)
   80176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8017a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8017c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80184:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80186:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	setup_direction_pin();
	pulse_init();
   8018a:	4b05      	ldr	r3, [pc, #20]	; (801a0 <init_motors+0x40>)
   8018c:	4798      	blx	r3
	pulse_start(0);
   8018e:	2000      	movs	r0, #0
   80190:	2100      	movs	r1, #0
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <init_motors+0x44>)
   80194:	4798      	blx	r3
   80196:	bd10      	pop	{r4, pc}
   80198:	00080c75 	.word	0x00080c75
   8019c:	400e1200 	.word	0x400e1200
   801a0:	000803a1 	.word	0x000803a1
   801a4:	0008049d 	.word	0x0008049d

000801a8 <drive_forward>:
}

void drive_forward(int speed)
{
   801a8:	b508      	push	{r3, lr}
	ioport_set_pin_dir(DIR_pin_MotorB, IOPORT_DIR_OUTPUT);
}

static void maintain_speed(int speed)
{
	pulse_set_duty_cycle(speed);
   801aa:	4b02      	ldr	r3, [pc, #8]	; (801b4 <drive_forward+0xc>)
   801ac:	4798      	blx	r3
   801ae:	4b02      	ldr	r3, [pc, #8]	; (801b8 <drive_forward+0x10>)
   801b0:	4798      	blx	r3
   801b2:	bd08      	pop	{r3, pc}
   801b4:	000813d1 	.word	0x000813d1
   801b8:	00080425 	.word	0x00080425

000801bc <set_direction>:
	if(dir == FORWARD)
   801bc:	2801      	cmp	r0, #1
   801be:	d008      	beq.n	801d2 <set_direction+0x16>
	if(dir == REVERSE)
   801c0:	b930      	cbnz	r0, 801d0 <set_direction+0x14>
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   801c2:	4b08      	ldr	r3, [pc, #32]	; (801e4 <set_direction+0x28>)
   801c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   801c8:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   801ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   801ce:	631a      	str	r2, [r3, #48]	; 0x30
   801d0:	4770      	bx	lr
   801d2:	4b04      	ldr	r3, [pc, #16]	; (801e4 <set_direction+0x28>)
   801d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   801d8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   801da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   801de:	635a      	str	r2, [r3, #52]	; 0x34
   801e0:	4770      	bx	lr
   801e2:	bf00      	nop
   801e4:	400e1200 	.word	0x400e1200

000801e8 <accelerate>:
{
   801e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < speed; i++)
   801ec:	1e05      	subs	r5, r0, #0
   801ee:	dd0d      	ble.n	8020c <accelerate+0x24>
   801f0:	2400      	movs	r4, #0
		pulse_set_duty_cycle(i);
   801f2:	4e07      	ldr	r6, [pc, #28]	; (80210 <accelerate+0x28>)
   801f4:	4f07      	ldr	r7, [pc, #28]	; (80214 <accelerate+0x2c>)
		delay_ms(50);
   801f6:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8021c <accelerate+0x34>
		pulse_set_duty_cycle(i);
   801fa:	4620      	mov	r0, r4
   801fc:	47b0      	blx	r6
   801fe:	47b8      	blx	r7
		delay_ms(50);
   80200:	4640      	mov	r0, r8
   80202:	4b05      	ldr	r3, [pc, #20]	; (80218 <accelerate+0x30>)
   80204:	4798      	blx	r3
	for (int i = 0; i < speed; i++)
   80206:	3401      	adds	r4, #1
   80208:	42a5      	cmp	r5, r4
   8020a:	d1f6      	bne.n	801fa <accelerate+0x12>
   8020c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80210:	000813d1 	.word	0x000813d1
   80214:	00080425 	.word	0x00080425
   80218:	20070001 	.word	0x20070001
   8021c:	000493e0 	.word	0x000493e0

00080220 <pulseCounter_handler_CHA_MOTOR_LEFT>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80220:	4b04      	ldr	r3, [pc, #16]	; (80234 <pulseCounter_handler_CHA_MOTOR_LEFT+0x14>)
   80222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
uint32_t *const p_IER = (uint32_t*) 0xE000E100;
uint32_t *const p_HARD = (uint32_t*) 0xE000ED2C;

void pulseCounter_handler_CHA_MOTOR_LEFT(const uint32_t id, const uint32_t index)
{
	if (ioport_get_pin_level(CHA_PIN_MOTOR_LEFT))
   80224:	f013 0f01 	tst.w	r3, #1
   80228:	d003      	beq.n	80232 <pulseCounter_handler_CHA_MOTOR_LEFT+0x12>
	{
		chA_motor_left++;
   8022a:	4a03      	ldr	r2, [pc, #12]	; (80238 <pulseCounter_handler_CHA_MOTOR_LEFT+0x18>)
   8022c:	6813      	ldr	r3, [r2, #0]
   8022e:	3301      	adds	r3, #1
   80230:	6013      	str	r3, [r2, #0]
   80232:	4770      	bx	lr
   80234:	800e1000 	.word	0x800e1000
   80238:	20070b0c 	.word	0x20070b0c

0008023c <pulseCounter_handler_CHB_MOTOR_LEFT>:
   8023c:	4b04      	ldr	r3, [pc, #16]	; (80250 <pulseCounter_handler_CHB_MOTOR_LEFT+0x14>)
   8023e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
}

void pulseCounter_handler_CHB_MOTOR_LEFT(const uint32_t id, const uint32_t index)
{
	if (ioport_get_pin_level(CHB_PIN_MOTOR_LEFT))
   80240:	f013 0f01 	tst.w	r3, #1
   80244:	d003      	beq.n	8024e <pulseCounter_handler_CHB_MOTOR_LEFT+0x12>
	{
		chB_motor_left++;
   80246:	4a03      	ldr	r2, [pc, #12]	; (80254 <pulseCounter_handler_CHB_MOTOR_LEFT+0x18>)
   80248:	6813      	ldr	r3, [r2, #0]
   8024a:	3301      	adds	r3, #1
   8024c:	6013      	str	r3, [r2, #0]
   8024e:	4770      	bx	lr
   80250:	40120e00 	.word	0x40120e00
   80254:	20070b14 	.word	0x20070b14

00080258 <pulseCounter_handler_CHA_MOTOR_RIGHT>:
   80258:	4b04      	ldr	r3, [pc, #16]	; (8026c <pulseCounter_handler_CHA_MOTOR_RIGHT+0x14>)
   8025a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
}

void pulseCounter_handler_CHA_MOTOR_RIGHT(const uint32_t id, const uint32_t index)
{
	if (ioport_get_pin_level(CHA_PIN_MOTOR_RIGHT))
   8025c:	f013 0f01 	tst.w	r3, #1
   80260:	d003      	beq.n	8026a <pulseCounter_handler_CHA_MOTOR_RIGHT+0x12>
	{
		chA_motor_right++;
   80262:	4a03      	ldr	r2, [pc, #12]	; (80270 <pulseCounter_handler_CHA_MOTOR_RIGHT+0x18>)
   80264:	6813      	ldr	r3, [r2, #0]
   80266:	3301      	adds	r3, #1
   80268:	6013      	str	r3, [r2, #0]
   8026a:	4770      	bx	lr
   8026c:	40160e00 	.word	0x40160e00
   80270:	20070b10 	.word	0x20070b10

00080274 <pulseCounter_handler_CHB_MOTOR_RIGHT>:
   80274:	4b04      	ldr	r3, [pc, #16]	; (80288 <pulseCounter_handler_CHB_MOTOR_RIGHT+0x14>)
   80276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
}

void pulseCounter_handler_CHB_MOTOR_RIGHT(const uint32_t id, const uint32_t index)
{
	if (ioport_get_pin_level(CHB_PIN_MOTOR_RIGHT))
   80278:	f013 0f02 	tst.w	r3, #2
   8027c:	d003      	beq.n	80286 <pulseCounter_handler_CHB_MOTOR_RIGHT+0x12>
	{
		chB_motor_right++;
   8027e:	4a03      	ldr	r2, [pc, #12]	; (8028c <pulseCounter_handler_CHB_MOTOR_RIGHT+0x18>)
   80280:	6813      	ldr	r3, [r2, #0]
   80282:	3301      	adds	r3, #1
   80284:	6013      	str	r3, [r2, #0]
   80286:	4770      	bx	lr
   80288:	400e1400 	.word	0x400e1400
   8028c:	20070b18 	.word	0x20070b18

00080290 <pulseCounter_configInterrupt>:
	}
}

void pulseCounter_configInterrupt(void){
   80290:	b5f0      	push	{r4, r5, r6, r7, lr}
   80292:	b083      	sub	sp, #12
	pmc_set_writeprotect(false);
   80294:	2000      	movs	r0, #0
   80296:	4b2b      	ldr	r3, [pc, #172]	; (80344 <pulseCounter_configInterrupt+0xb4>)
   80298:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   8029a:	200c      	movs	r0, #12
   8029c:	4c2a      	ldr	r4, [pc, #168]	; (80348 <pulseCounter_configInterrupt+0xb8>)
   8029e:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOA);
   802a0:	200b      	movs	r0, #11
   802a2:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
   802a4:	200e      	movs	r0, #14
   802a6:	47a0      	blx	r4
	pio_set_input(PIOB, PIO_PB26, PIO_PULLUP);
   802a8:	4f28      	ldr	r7, [pc, #160]	; (8034c <pulseCounter_configInterrupt+0xbc>)
   802aa:	2201      	movs	r2, #1
   802ac:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   802b0:	4638      	mov	r0, r7
   802b2:	4d27      	ldr	r5, [pc, #156]	; (80350 <pulseCounter_configInterrupt+0xc0>)
   802b4:	47a8      	blx	r5
	pio_set_input(PIOA, PIO_PA14, PIO_PULLUP);
   802b6:	4c27      	ldr	r4, [pc, #156]	; (80354 <pulseCounter_configInterrupt+0xc4>)
   802b8:	2201      	movs	r2, #1
   802ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   802be:	4620      	mov	r0, r4
   802c0:	47a8      	blx	r5
	pio_set_input(PIOA, PIO_PA15, PIO_PULLUP);
   802c2:	2201      	movs	r2, #1
   802c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   802c8:	4620      	mov	r0, r4
   802ca:	47a8      	blx	r5
	pio_set_input(PIOD, PIO_PD0, PIO_PULLUP);
   802cc:	4e22      	ldr	r6, [pc, #136]	; (80358 <pulseCounter_configInterrupt+0xc8>)
   802ce:	2201      	movs	r2, #1
   802d0:	4611      	mov	r1, r2
   802d2:	4630      	mov	r0, r6
   802d4:	47a8      	blx	r5
	pio_handler_set(PIOB, ID_PIOB, PIO_PB26, PIO_IT_EDGE, pulseCounter_handler_CHA_MOTOR_LEFT);
   802d6:	4b21      	ldr	r3, [pc, #132]	; (8035c <pulseCounter_configInterrupt+0xcc>)
   802d8:	9300      	str	r3, [sp, #0]
   802da:	2340      	movs	r3, #64	; 0x40
   802dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   802e0:	210c      	movs	r1, #12
   802e2:	4638      	mov	r0, r7
   802e4:	4d1e      	ldr	r5, [pc, #120]	; (80360 <pulseCounter_configInterrupt+0xd0>)
   802e6:	47a8      	blx	r5
	pio_handler_set(PIOA, ID_PIOA, PIO_PA14, PIO_IT_EDGE, pulseCounter_handler_CHB_MOTOR_LEFT);
   802e8:	4b1e      	ldr	r3, [pc, #120]	; (80364 <pulseCounter_configInterrupt+0xd4>)
   802ea:	9300      	str	r3, [sp, #0]
   802ec:	2340      	movs	r3, #64	; 0x40
   802ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   802f2:	210b      	movs	r1, #11
   802f4:	4620      	mov	r0, r4
   802f6:	47a8      	blx	r5
	pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_EDGE, pulseCounter_handler_CHA_MOTOR_RIGHT);
   802f8:	4b1b      	ldr	r3, [pc, #108]	; (80368 <pulseCounter_configInterrupt+0xd8>)
   802fa:	9300      	str	r3, [sp, #0]
   802fc:	2340      	movs	r3, #64	; 0x40
   802fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80302:	210b      	movs	r1, #11
   80304:	4620      	mov	r0, r4
   80306:	47a8      	blx	r5
	pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_EDGE, pulseCounter_handler_CHB_MOTOR_RIGHT);
   80308:	4b18      	ldr	r3, [pc, #96]	; (8036c <pulseCounter_configInterrupt+0xdc>)
   8030a:	9300      	str	r3, [sp, #0]
   8030c:	2340      	movs	r3, #64	; 0x40
   8030e:	2201      	movs	r2, #1
   80310:	210e      	movs	r1, #14
   80312:	4630      	mov	r0, r6
   80314:	47a8      	blx	r5
	pio_enable_interrupt(PIOB, PIO_PB26);
   80316:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8031a:	4638      	mov	r0, r7
   8031c:	4d14      	ldr	r5, [pc, #80]	; (80370 <pulseCounter_configInterrupt+0xe0>)
   8031e:	47a8      	blx	r5
	pio_enable_interrupt(PIOA, PIO_PA14);
   80320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80324:	4620      	mov	r0, r4
   80326:	47a8      	blx	r5
	pio_enable_interrupt(PIOA, PIO_PA15);
   80328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8032c:	4620      	mov	r0, r4
   8032e:	47a8      	blx	r5
	pio_enable_interrupt(PIOD, PIO_PD0);
   80330:	2101      	movs	r1, #1
   80332:	4630      	mov	r0, r6
   80334:	47a8      	blx	r5
	printf("HEJ");
   80336:	480f      	ldr	r0, [pc, #60]	; (80374 <pulseCounter_configInterrupt+0xe4>)
   80338:	4c0f      	ldr	r4, [pc, #60]	; (80378 <pulseCounter_configInterrupt+0xe8>)
   8033a:	47a0      	blx	r4
	//*p_IER |= 1 << (uint32_t)(PIOB_IRQn);
	//NVIC->ISER[0] = (1 << ((uint32_t)(PIOB_IRQn) & 0x1F));
	//NVIC_EnableIRQ(PIOB_IRQn);
	//NVIC_EnableIRQ(PIOA_IRQn);
	//NVIC_EnableIRQ(PIOD_IRQn);
	printf("HEJ igen");
   8033c:	480f      	ldr	r0, [pc, #60]	; (8037c <pulseCounter_configInterrupt+0xec>)
   8033e:	47a0      	blx	r4
}
   80340:	b003      	add	sp, #12
   80342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80344:	00080cc9 	.word	0x00080cc9
   80348:	00080c75 	.word	0x00080c75
   8034c:	400e1000 	.word	0x400e1000
   80350:	0008087f 	.word	0x0008087f
   80354:	400e0e00 	.word	0x400e0e00
   80358:	400e1400 	.word	0x400e1400
   8035c:	00080221 	.word	0x00080221
   80360:	00080acd 	.word	0x00080acd
   80364:	0008023d 	.word	0x0008023d
   80368:	00080259 	.word	0x00080259
   8036c:	00080275 	.word	0x00080275
   80370:	00080905 	.word	0x00080905
   80374:	00084794 	.word	0x00084794
   80378:	00081951 	.word	0x00081951
   8037c:	00084798 	.word	0x00084798

00080380 <HardFault_Handler>:

void HardFault_Handler  ( void )
{
   80380:	b508      	push	{r3, lr}
	uint32_t what = 0;
	what = *p_HARD & (1 << 30);
   80382:	4b04      	ldr	r3, [pc, #16]	; (80394 <HardFault_Handler+0x14>)
   80384:	6819      	ldr	r1, [r3, #0]
	printf("HArd fault: %lu\n", what);
   80386:	f001 4180 	and.w	r1, r1, #1073741824	; 0x40000000
   8038a:	4803      	ldr	r0, [pc, #12]	; (80398 <HardFault_Handler+0x18>)
   8038c:	4b03      	ldr	r3, [pc, #12]	; (8039c <HardFault_Handler+0x1c>)
   8038e:	4798      	blx	r3
   80390:	bd08      	pop	{r3, pc}
   80392:	bf00      	nop
   80394:	e000ed2c 	.word	0xe000ed2c
   80398:	00084780 	.word	0x00084780
   8039c:	00081951 	.word	0x00081951

000803a0 <pulse_init>:
 #include <asf.h>
 #include "pulse.h"
 #include "driving.h"
 
 void pulse_init(void)
 {
   803a0:	b570      	push	{r4, r5, r6, lr}
   803a2:	200b      	movs	r0, #11
   803a4:	4c19      	ldr	r4, [pc, #100]	; (8040c <pulse_init+0x6c>)
   803a6:	47a0      	blx	r4
   803a8:	200c      	movs	r0, #12
   803aa:	47a0      	blx	r4
   803ac:	200d      	movs	r0, #13
   803ae:	47a0      	blx	r4
   803b0:	200e      	movs	r0, #14
   803b2:	47a0      	blx	r4
		base->PIO_PUER = mask;
   803b4:	4b16      	ldr	r3, [pc, #88]	; (80410 <pulse_init+0x70>)
   803b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   803ba:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_MDDR = mask;
   803bc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
   803be:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_SCIFSR = mask;
   803c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
   803c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
   803c6:	4311      	orrs	r1, r2
   803c8:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   803ca:	605a      	str	r2, [r3, #4]
		base->PIO_PUER = mask;
   803cc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   803d0:	2204      	movs	r2, #4
   803d2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_MDDR = mask;
   803d4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
   803d6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_SCIFSR = mask;
   803d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR &= ~mask;
   803dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
   803de:	f021 0104 	bic.w	r1, r1, #4
   803e2:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   803e4:	605a      	str	r2, [r3, #4]
	  */
	 ioport_set_pin_mode(PWM_pin_MotorA, IOPORT_MODE_MUX_B | IOPORT_MODE_PULLUP); // PB_25 (Digital pin 2) is PWM pin of Motor A
	 ioport_disable_pin(PWM_pin_MotorA);
	 ioport_set_pin_mode(PWM_pin_MotorB, IOPORT_MODE_MUX_A | IOPORT_MODE_PULLUP); // PA_2 (Analog IN 7) is PWM pin of Motor B
	 ioport_disable_pin(PWM_pin_MotorB);
	 pmc_set_writeprotect(false);
   803e6:	2000      	movs	r0, #0
   803e8:	4b0a      	ldr	r3, [pc, #40]	; (80414 <pulse_init+0x74>)
   803ea:	4798      	blx	r3
	  * second link contains a nice table over the PMC id:s of every Timer Counter channel.
	  *    (1) https://github.com/ivanseidel/DueTimer/blob/master/TimerCounter.md
	  *    (2) http://ko7m.blogspot.com/2015/01/arduino-due-timers-part-1.html
	  */
	 // TIOA0 = PB_25 = Digital pin 2 on Arduino Due board, TC0 channel 0 (peripheral function B)
	 pmc_enable_periph_clk(ID_TC0); // PMC ID of TC0 ch0 = ID_TC0
   803ec:	201b      	movs	r0, #27
   803ee:	47a0      	blx	r4
	 // TIOA1 = PA_2 = Analog In 2 on Arduino Due board, TC0 channel 1 (peripheral function A)
	 pmc_enable_periph_clk(ID_TC1); // PMC ID of TC0 ch1 = ID_TC1
   803f0:	201c      	movs	r0, #28
   803f2:	47a0      	blx	r4
	  *     1/(RC * presc/MCK) = MCK/(RC * presc)
	  * 
	  * In our case the PWM frequency = MCK/(RC * presc) = 84 MHz/(656 * 128) = 1 kHz
	  * 
	  */
	 tc_init(TC0, 0, TC_CMR_TCCLKS_TIMER_CLOCK4 
   803f4:	4e08      	ldr	r6, [pc, #32]	; (80418 <pulse_init+0x78>)
   803f6:	4d09      	ldr	r5, [pc, #36]	; (8041c <pulse_init+0x7c>)
   803f8:	4632      	mov	r2, r6
   803fa:	2100      	movs	r1, #0
   803fc:	4628      	mov	r0, r5
   803fe:	4c08      	ldr	r4, [pc, #32]	; (80420 <pulse_init+0x80>)
   80400:	47a0      	blx	r4
								| TC_CMR_WAVSEL_UP_RC 
								| TC_CMR_WAVE 
								| TC_CMR_ACPA_SET 
								| TC_CMR_ACPC_CLEAR); 
	tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK4 
   80402:	4632      	mov	r2, r6
   80404:	2101      	movs	r1, #1
   80406:	4628      	mov	r0, r5
   80408:	47a0      	blx	r4
   8040a:	bd70      	pop	{r4, r5, r6, pc}
   8040c:	00080c75 	.word	0x00080c75
   80410:	400e1000 	.word	0x400e1000
   80414:	00080cc9 	.word	0x00080cc9
   80418:	0009c003 	.word	0x0009c003
   8041c:	40080000 	.word	0x40080000
   80420:	000806d5 	.word	0x000806d5

00080424 <pulse_set_duty_cycle>:
	pulse_set_duty_cycle(duty_cycle);
	tc_start(TC0, 1);
 }
 
 void pulse_set_duty_cycle(double duty_cycle)
 {
   80424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 double rc = 0, ra = 0;
	 rc = 656;
	 ra = rc * (1 - duty_cycle/100);
   80426:	2200      	movs	r2, #0
   80428:	4b12      	ldr	r3, [pc, #72]	; (80474 <pulse_set_duty_cycle+0x50>)
   8042a:	4c13      	ldr	r4, [pc, #76]	; (80478 <pulse_set_duty_cycle+0x54>)
   8042c:	47a0      	blx	r4
   8042e:	4602      	mov	r2, r0
   80430:	460b      	mov	r3, r1
   80432:	2000      	movs	r0, #0
   80434:	4911      	ldr	r1, [pc, #68]	; (8047c <pulse_set_duty_cycle+0x58>)
   80436:	4c12      	ldr	r4, [pc, #72]	; (80480 <pulse_set_duty_cycle+0x5c>)
   80438:	47a0      	blx	r4
   8043a:	2200      	movs	r2, #0
   8043c:	4b11      	ldr	r3, [pc, #68]	; (80484 <pulse_set_duty_cycle+0x60>)
   8043e:	4c12      	ldr	r4, [pc, #72]	; (80488 <pulse_set_duty_cycle+0x64>)
   80440:	47a0      	blx	r4
	 
	 /*
	  * RA Compare is used to control the TIOA/TIOB output. The value of RA will regulate the
	  * duty cycle. The signal will go high on RA compare and get cleared on RC compare.
	  */	
	tc_write_ra(TC0, 0, (uint32_t) ra);
   80442:	4b12      	ldr	r3, [pc, #72]	; (8048c <pulse_set_duty_cycle+0x68>)
   80444:	4798      	blx	r3
   80446:	4607      	mov	r7, r0
   80448:	4c11      	ldr	r4, [pc, #68]	; (80490 <pulse_set_duty_cycle+0x6c>)
   8044a:	4602      	mov	r2, r0
   8044c:	2100      	movs	r1, #0
   8044e:	4620      	mov	r0, r4
   80450:	4e10      	ldr	r6, [pc, #64]	; (80494 <pulse_set_duty_cycle+0x70>)
   80452:	47b0      	blx	r6
	tc_write_rc(TC0, 0, (uint32_t) rc);
   80454:	f44f 7224 	mov.w	r2, #656	; 0x290
   80458:	2100      	movs	r1, #0
   8045a:	4620      	mov	r0, r4
   8045c:	4d0e      	ldr	r5, [pc, #56]	; (80498 <pulse_set_duty_cycle+0x74>)
   8045e:	47a8      	blx	r5
	
	// Same for Motor B
	tc_write_ra(TC0, 1, (uint32_t) ra);
   80460:	463a      	mov	r2, r7
   80462:	2101      	movs	r1, #1
   80464:	4620      	mov	r0, r4
   80466:	47b0      	blx	r6
	tc_write_rc(TC0, 1, (uint32_t) rc);
   80468:	f44f 7224 	mov.w	r2, #656	; 0x290
   8046c:	2101      	movs	r1, #1
   8046e:	4620      	mov	r0, r4
   80470:	47a8      	blx	r5
   80472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80474:	40590000 	.word	0x40590000
   80478:	000816f1 	.word	0x000816f1
   8047c:	3ff00000 	.word	0x3ff00000
   80480:	00081135 	.word	0x00081135
   80484:	40848000 	.word	0x40848000
   80488:	0008149d 	.word	0x0008149d
   8048c:	000818c1 	.word	0x000818c1
   80490:	40080000 	.word	0x40080000
   80494:	000806f5 	.word	0x000806f5
   80498:	000806fd 	.word	0x000806fd

0008049c <pulse_start>:
 {	
   8049c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   804a0:	4680      	mov	r8, r0
   804a2:	4689      	mov	r9, r1
	pulse_set_duty_cycle(duty_cycle);
   804a4:	4e07      	ldr	r6, [pc, #28]	; (804c4 <pulse_start+0x28>)
   804a6:	47b0      	blx	r6
	tc_start(TC0, 0);
   804a8:	4d07      	ldr	r5, [pc, #28]	; (804c8 <pulse_start+0x2c>)
   804aa:	2100      	movs	r1, #0
   804ac:	4628      	mov	r0, r5
   804ae:	4c07      	ldr	r4, [pc, #28]	; (804cc <pulse_start+0x30>)
   804b0:	47a0      	blx	r4
	pulse_set_duty_cycle(duty_cycle);
   804b2:	4640      	mov	r0, r8
   804b4:	4649      	mov	r1, r9
   804b6:	47b0      	blx	r6
	tc_start(TC0, 1);
   804b8:	2101      	movs	r1, #1
   804ba:	4628      	mov	r0, r5
   804bc:	47a0      	blx	r4
   804be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   804c2:	bf00      	nop
   804c4:	00080425 	.word	0x00080425
   804c8:	40080000 	.word	0x40080000
   804cc:	000806ed 	.word	0x000806ed

000804d0 <test_case_1>:

#include "test_cases.h"
#include "driving.h"

void test_case_1(int target_speed)
{
   804d0:	b510      	push	{r4, lr}
   804d2:	4604      	mov	r4, r0
	set_direction(FORWARD);
   804d4:	2001      	movs	r0, #1
   804d6:	4b04      	ldr	r3, [pc, #16]	; (804e8 <test_case_1+0x18>)
   804d8:	4798      	blx	r3
	accelerate(target_speed);
   804da:	4620      	mov	r0, r4
   804dc:	4b03      	ldr	r3, [pc, #12]	; (804ec <test_case_1+0x1c>)
   804de:	4798      	blx	r3
	drive_forward(target_speed);
   804e0:	4620      	mov	r0, r4
   804e2:	4b03      	ldr	r3, [pc, #12]	; (804f0 <test_case_1+0x20>)
   804e4:	4798      	blx	r3
   804e6:	bd10      	pop	{r4, pc}
   804e8:	000801bd 	.word	0x000801bd
   804ec:	000801e9 	.word	0x000801e9
   804f0:	000801a9 	.word	0x000801a9

000804f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   804f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   804f8:	b980      	cbnz	r0, 8051c <_read+0x28>
   804fa:	460c      	mov	r4, r1
   804fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   804fe:	2a00      	cmp	r2, #0
   80500:	dd0f      	ble.n	80522 <_read+0x2e>
   80502:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80504:	4e08      	ldr	r6, [pc, #32]	; (80528 <_read+0x34>)
   80506:	4d09      	ldr	r5, [pc, #36]	; (8052c <_read+0x38>)
   80508:	6830      	ldr	r0, [r6, #0]
   8050a:	4621      	mov	r1, r4
   8050c:	682b      	ldr	r3, [r5, #0]
   8050e:	4798      	blx	r3
		ptr++;
   80510:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   80512:	42bc      	cmp	r4, r7
   80514:	d1f8      	bne.n	80508 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80516:	4640      	mov	r0, r8
   80518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8051c:	f04f 38ff 	mov.w	r8, #4294967295
   80520:	e7f9      	b.n	80516 <_read+0x22>
	for (; len > 0; --len) {
   80522:	4680      	mov	r8, r0
   80524:	e7f7      	b.n	80516 <_read+0x22>
   80526:	bf00      	nop
   80528:	20070c70 	.word	0x20070c70
   8052c:	20070c68 	.word	0x20070c68

00080530 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80530:	6943      	ldr	r3, [r0, #20]
   80532:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80536:	bf1d      	ittte	ne
   80538:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8053c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8053e:	2000      	movne	r0, #0
		return 1;
   80540:	2001      	moveq	r0, #1
}
   80542:	4770      	bx	lr

00080544 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80544:	6943      	ldr	r3, [r0, #20]
   80546:	f013 0f01 	tst.w	r3, #1
   8054a:	d005      	beq.n	80558 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8054c:	6983      	ldr	r3, [r0, #24]
   8054e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80552:	600b      	str	r3, [r1, #0]

	return 0;
   80554:	2000      	movs	r0, #0
   80556:	4770      	bx	lr
		return 1;
   80558:	2001      	movs	r0, #1
}
   8055a:	4770      	bx	lr

0008055c <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   8055c:	b500      	push	{lr}
   8055e:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   80560:	2201      	movs	r2, #1
   80562:	f10d 0107 	add.w	r1, sp, #7
   80566:	4810      	ldr	r0, [pc, #64]	; (805a8 <USART0_Handler+0x4c>)
   80568:	4b10      	ldr	r3, [pc, #64]	; (805ac <USART0_Handler+0x50>)
   8056a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8056c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8056e:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80572:	2200      	movs	r2, #0
   80574:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <USART0_Handler+0x54>)
   80576:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80578:	4b0e      	ldr	r3, [pc, #56]	; (805b4 <USART0_Handler+0x58>)
   8057a:	781b      	ldrb	r3, [r3, #0]
   8057c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80580:	4a0d      	ldr	r2, [pc, #52]	; (805b8 <USART0_Handler+0x5c>)
   80582:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80584:	2b9b      	cmp	r3, #155	; 0x9b
   80586:	d00b      	beq.n	805a0 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   80588:	3301      	adds	r3, #1
   8058a:	4a0a      	ldr	r2, [pc, #40]	; (805b4 <USART0_Handler+0x58>)
   8058c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8058e:	2201      	movs	r2, #1
   80590:	4b07      	ldr	r3, [pc, #28]	; (805b0 <USART0_Handler+0x54>)
   80592:	701a      	strb	r2, [r3, #0]
   80594:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80598:	b662      	cpsie	i
}
   8059a:	b003      	add	sp, #12
   8059c:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   805a0:	2200      	movs	r2, #0
   805a2:	4b04      	ldr	r3, [pc, #16]	; (805b4 <USART0_Handler+0x58>)
   805a4:	701a      	strb	r2, [r3, #0]
   805a6:	e7f2      	b.n	8058e <USART0_Handler+0x32>
   805a8:	40098000 	.word	0x40098000
   805ac:	0008060d 	.word	0x0008060d
   805b0:	20070138 	.word	0x20070138
   805b4:	20070bb8 	.word	0x20070bb8
   805b8:	20070b1c 	.word	0x20070b1c

000805bc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   805bc:	3801      	subs	r0, #1
   805be:	2802      	cmp	r0, #2
   805c0:	d815      	bhi.n	805ee <_write+0x32>
{
   805c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805c6:	460e      	mov	r6, r1
   805c8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   805ca:	b19a      	cbz	r2, 805f4 <_write+0x38>
   805cc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   805ce:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80608 <_write+0x4c>
   805d2:	4f0c      	ldr	r7, [pc, #48]	; (80604 <_write+0x48>)
   805d4:	f8d8 0000 	ldr.w	r0, [r8]
   805d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   805dc:	683b      	ldr	r3, [r7, #0]
   805de:	4798      	blx	r3
   805e0:	2800      	cmp	r0, #0
   805e2:	db0a      	blt.n	805fa <_write+0x3e>
   805e4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   805e6:	3c01      	subs	r4, #1
   805e8:	d1f4      	bne.n	805d4 <_write+0x18>
   805ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   805ee:	f04f 30ff 	mov.w	r0, #4294967295
   805f2:	4770      	bx	lr
	for (; len != 0; --len) {
   805f4:	4610      	mov	r0, r2
   805f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   805fa:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   805fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80602:	bf00      	nop
   80604:	20070c6c 	.word	0x20070c6c
   80608:	20070c70 	.word	0x20070c70

0008060c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   8060c:	2a00      	cmp	r2, #0
   8060e:	d051      	beq.n	806b4 <usart_serial_read_packet+0xa8>
{
   80610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80614:	b083      	sub	sp, #12
   80616:	4605      	mov	r5, r0
   80618:	460c      	mov	r4, r1
   8061a:	4692      	mov	sl, r2
   8061c:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8061e:	4f26      	ldr	r7, [pc, #152]	; (806b8 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   80620:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 806cc <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80624:	4e25      	ldr	r6, [pc, #148]	; (806bc <usart_serial_read_packet+0xb0>)
   80626:	e01d      	b.n	80664 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   80628:	4621      	mov	r1, r4
   8062a:	4638      	mov	r0, r7
   8062c:	47c8      	blx	r9
   8062e:	2800      	cmp	r0, #0
   80630:	d1fa      	bne.n	80628 <usart_serial_read_packet+0x1c>
   80632:	e021      	b.n	80678 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80634:	469b      	mov	fp, r3
   80636:	f8df 8098 	ldr.w	r8, [pc, #152]	; 806d0 <usart_serial_read_packet+0xc4>
   8063a:	a901      	add	r1, sp, #4
   8063c:	4658      	mov	r0, fp
   8063e:	47c0      	blx	r8
   80640:	2800      	cmp	r0, #0
   80642:	d1fa      	bne.n	8063a <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   80644:	9b01      	ldr	r3, [sp, #4]
   80646:	7023      	strb	r3, [r4, #0]
   80648:	e019      	b.n	8067e <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   8064a:	469b      	mov	fp, r3
   8064c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 806d0 <usart_serial_read_packet+0xc4>
   80650:	a901      	add	r1, sp, #4
   80652:	4658      	mov	r0, fp
   80654:	47c0      	blx	r8
   80656:	2800      	cmp	r0, #0
   80658:	d1fa      	bne.n	80650 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   8065a:	9b01      	ldr	r3, [sp, #4]
   8065c:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   8065e:	3401      	adds	r4, #1
	while (len) {
   80660:	4554      	cmp	r4, sl
   80662:	d023      	beq.n	806ac <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   80664:	2300      	movs	r3, #0
   80666:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80668:	42bd      	cmp	r5, r7
   8066a:	d0dd      	beq.n	80628 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   8066c:	4b14      	ldr	r3, [pc, #80]	; (806c0 <usart_serial_read_packet+0xb4>)
   8066e:	429d      	cmp	r5, r3
   80670:	d0e0      	beq.n	80634 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   80672:	4b14      	ldr	r3, [pc, #80]	; (806c4 <usart_serial_read_packet+0xb8>)
   80674:	429d      	cmp	r5, r3
   80676:	d0e8      	beq.n	8064a <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   80678:	4b13      	ldr	r3, [pc, #76]	; (806c8 <usart_serial_read_packet+0xbc>)
   8067a:	429d      	cmp	r5, r3
   8067c:	d00b      	beq.n	80696 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   8067e:	42b5      	cmp	r5, r6
   80680:	d1ed      	bne.n	8065e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80682:	f8df 804c 	ldr.w	r8, [pc, #76]	; 806d0 <usart_serial_read_packet+0xc4>
   80686:	a901      	add	r1, sp, #4
   80688:	4630      	mov	r0, r6
   8068a:	47c0      	blx	r8
   8068c:	2800      	cmp	r0, #0
   8068e:	d1fa      	bne.n	80686 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80690:	9b01      	ldr	r3, [sp, #4]
   80692:	7023      	strb	r3, [r4, #0]
   80694:	e7e3      	b.n	8065e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80696:	469b      	mov	fp, r3
   80698:	f8df 8034 	ldr.w	r8, [pc, #52]	; 806d0 <usart_serial_read_packet+0xc4>
   8069c:	a901      	add	r1, sp, #4
   8069e:	4658      	mov	r0, fp
   806a0:	47c0      	blx	r8
   806a2:	2800      	cmp	r0, #0
   806a4:	d1fa      	bne.n	8069c <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   806a6:	9b01      	ldr	r3, [sp, #4]
   806a8:	7023      	strb	r3, [r4, #0]
   806aa:	e7d8      	b.n	8065e <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   806ac:	2000      	movs	r0, #0
   806ae:	b003      	add	sp, #12
   806b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   806b4:	2000      	movs	r0, #0
   806b6:	4770      	bx	lr
   806b8:	400e0800 	.word	0x400e0800
   806bc:	400a4000 	.word	0x400a4000
   806c0:	40098000 	.word	0x40098000
   806c4:	4009c000 	.word	0x4009c000
   806c8:	400a0000 	.word	0x400a0000
   806cc:	0008074b 	.word	0x0008074b
   806d0:	00080545 	.word	0x00080545

000806d4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   806d4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806d6:	0189      	lsls	r1, r1, #6
   806d8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   806da:	2402      	movs	r4, #2
   806dc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   806de:	f04f 31ff 	mov.w	r1, #4294967295
   806e2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   806e4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   806e6:	605a      	str	r2, [r3, #4]
}
   806e8:	bc10      	pop	{r4}
   806ea:	4770      	bx	lr

000806ec <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   806ec:	0189      	lsls	r1, r1, #6
   806ee:	2305      	movs	r3, #5
   806f0:	5043      	str	r3, [r0, r1]
   806f2:	4770      	bx	lr

000806f4 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   806f4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806f8:	614a      	str	r2, [r1, #20]
   806fa:	4770      	bx	lr

000806fc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   806fc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80700:	61ca      	str	r2, [r1, #28]
   80702:	4770      	bx	lr

00080704 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80704:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80706:	23ac      	movs	r3, #172	; 0xac
   80708:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8070a:	680b      	ldr	r3, [r1, #0]
   8070c:	684a      	ldr	r2, [r1, #4]
   8070e:	fbb3 f3f2 	udiv	r3, r3, r2
   80712:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80714:	1e5c      	subs	r4, r3, #1
   80716:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8071a:	4294      	cmp	r4, r2
   8071c:	d80b      	bhi.n	80736 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8071e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80720:	688b      	ldr	r3, [r1, #8]
   80722:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80724:	f240 2302 	movw	r3, #514	; 0x202
   80728:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8072c:	2350      	movs	r3, #80	; 0x50
   8072e:	6003      	str	r3, [r0, #0]

	return 0;
   80730:	2000      	movs	r0, #0
}
   80732:	bc10      	pop	{r4}
   80734:	4770      	bx	lr
		return 1;
   80736:	2001      	movs	r0, #1
   80738:	e7fb      	b.n	80732 <uart_init+0x2e>

0008073a <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8073a:	6943      	ldr	r3, [r0, #20]
   8073c:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80740:	bf1a      	itte	ne
   80742:	61c1      	strne	r1, [r0, #28]
	return 0;
   80744:	2000      	movne	r0, #0
		return 1;
   80746:	2001      	moveq	r0, #1
}
   80748:	4770      	bx	lr

0008074a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8074a:	6943      	ldr	r3, [r0, #20]
   8074c:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80750:	bf1d      	ittte	ne
   80752:	6983      	ldrne	r3, [r0, #24]
   80754:	700b      	strbne	r3, [r1, #0]
	return 0;
   80756:	2000      	movne	r0, #0
		return 1;
   80758:	2001      	moveq	r0, #1
}
   8075a:	4770      	bx	lr

0008075c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8075c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8075e:	480e      	ldr	r0, [pc, #56]	; (80798 <sysclk_init+0x3c>)
   80760:	4b0e      	ldr	r3, [pc, #56]	; (8079c <sysclk_init+0x40>)
   80762:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80764:	213e      	movs	r1, #62	; 0x3e
   80766:	2000      	movs	r0, #0
   80768:	4b0d      	ldr	r3, [pc, #52]	; (807a0 <sysclk_init+0x44>)
   8076a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8076c:	4c0d      	ldr	r4, [pc, #52]	; (807a4 <sysclk_init+0x48>)
   8076e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80770:	2800      	cmp	r0, #0
   80772:	d0fc      	beq.n	8076e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80774:	4b0c      	ldr	r3, [pc, #48]	; (807a8 <sysclk_init+0x4c>)
   80776:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80778:	4a0c      	ldr	r2, [pc, #48]	; (807ac <sysclk_init+0x50>)
   8077a:	4b0d      	ldr	r3, [pc, #52]	; (807b0 <sysclk_init+0x54>)
   8077c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8077e:	4c0d      	ldr	r4, [pc, #52]	; (807b4 <sysclk_init+0x58>)
   80780:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80782:	2800      	cmp	r0, #0
   80784:	d0fc      	beq.n	80780 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80786:	2010      	movs	r0, #16
   80788:	4b0b      	ldr	r3, [pc, #44]	; (807b8 <sysclk_init+0x5c>)
   8078a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8078c:	4b0b      	ldr	r3, [pc, #44]	; (807bc <sysclk_init+0x60>)
   8078e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80790:	4801      	ldr	r0, [pc, #4]	; (80798 <sysclk_init+0x3c>)
   80792:	4b02      	ldr	r3, [pc, #8]	; (8079c <sysclk_init+0x40>)
   80794:	4798      	blx	r3
   80796:	bd10      	pop	{r4, pc}
   80798:	0501bd00 	.word	0x0501bd00
   8079c:	200700b1 	.word	0x200700b1
   807a0:	00080bf1 	.word	0x00080bf1
   807a4:	00080c45 	.word	0x00080c45
   807a8:	00080c55 	.word	0x00080c55
   807ac:	200d3f01 	.word	0x200d3f01
   807b0:	400e0600 	.word	0x400e0600
   807b4:	00080c65 	.word	0x00080c65
   807b8:	00080b8d 	.word	0x00080b8d
   807bc:	00080d89 	.word	0x00080d89

000807c0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   807c0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   807c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   807c6:	4b16      	ldr	r3, [pc, #88]	; (80820 <board_init+0x60>)
   807c8:	605a      	str	r2, [r3, #4]
   807ca:	200b      	movs	r0, #11
   807cc:	4c15      	ldr	r4, [pc, #84]	; (80824 <board_init+0x64>)
   807ce:	47a0      	blx	r4
   807d0:	200c      	movs	r0, #12
   807d2:	47a0      	blx	r4
   807d4:	200d      	movs	r0, #13
   807d6:	47a0      	blx	r4
   807d8:	200e      	movs	r0, #14
   807da:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   807dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807e0:	203b      	movs	r0, #59	; 0x3b
   807e2:	4c11      	ldr	r4, [pc, #68]	; (80828 <board_init+0x68>)
   807e4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   807e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807ea:	2055      	movs	r0, #85	; 0x55
   807ec:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   807ee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807f2:	2056      	movs	r0, #86	; 0x56
   807f4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   807f6:	490d      	ldr	r1, [pc, #52]	; (8082c <board_init+0x6c>)
   807f8:	2068      	movs	r0, #104	; 0x68
   807fa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   807fc:	490c      	ldr	r1, [pc, #48]	; (80830 <board_init+0x70>)
   807fe:	205c      	movs	r0, #92	; 0x5c
   80800:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80802:	4a0c      	ldr	r2, [pc, #48]	; (80834 <board_init+0x74>)
   80804:	f44f 7140 	mov.w	r1, #768	; 0x300
   80808:	480b      	ldr	r0, [pc, #44]	; (80838 <board_init+0x78>)
   8080a:	4b0c      	ldr	r3, [pc, #48]	; (8083c <board_init+0x7c>)
   8080c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8080e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80812:	202b      	movs	r0, #43	; 0x2b
   80814:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80816:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8081a:	202a      	movs	r0, #42	; 0x2a
   8081c:	47a0      	blx	r4
   8081e:	bd10      	pop	{r4, pc}
   80820:	400e1a50 	.word	0x400e1a50
   80824:	00080c75 	.word	0x00080c75
   80828:	00080911 	.word	0x00080911
   8082c:	28000079 	.word	0x28000079
   80830:	28000001 	.word	0x28000001
   80834:	08000001 	.word	0x08000001
   80838:	400e0e00 	.word	0x400e0e00
   8083c:	000809e1 	.word	0x000809e1

00080840 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80840:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80842:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80846:	d016      	beq.n	80876 <pio_set_peripheral+0x36>
   80848:	d80b      	bhi.n	80862 <pio_set_peripheral+0x22>
   8084a:	b149      	cbz	r1, 80860 <pio_set_peripheral+0x20>
   8084c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80850:	d105      	bne.n	8085e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80852:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80854:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80856:	400b      	ands	r3, r1
   80858:	ea23 0302 	bic.w	r3, r3, r2
   8085c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8085e:	6042      	str	r2, [r0, #4]
   80860:	4770      	bx	lr
	switch (ul_type) {
   80862:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80866:	d0fb      	beq.n	80860 <pio_set_peripheral+0x20>
   80868:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8086c:	d0f8      	beq.n	80860 <pio_set_peripheral+0x20>
   8086e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80872:	d1f4      	bne.n	8085e <pio_set_peripheral+0x1e>
   80874:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80876:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80878:	4313      	orrs	r3, r2
   8087a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8087c:	e7ef      	b.n	8085e <pio_set_peripheral+0x1e>

0008087e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8087e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80880:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80884:	bf14      	ite	ne
   80886:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80888:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8088a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8088e:	bf14      	ite	ne
   80890:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80892:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80894:	f012 0f02 	tst.w	r2, #2
   80898:	d107      	bne.n	808aa <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8089a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8089e:	bf18      	it	ne
   808a0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   808a4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   808a6:	6001      	str	r1, [r0, #0]
   808a8:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   808aa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   808ae:	e7f9      	b.n	808a4 <pio_set_input+0x26>

000808b0 <pio_set_output>:
{
   808b0:	b410      	push	{r4}
   808b2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   808b4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   808b6:	b944      	cbnz	r4, 808ca <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   808b8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   808ba:	b143      	cbz	r3, 808ce <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   808bc:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   808be:	b942      	cbnz	r2, 808d2 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   808c0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   808c2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   808c4:	6001      	str	r1, [r0, #0]
}
   808c6:	bc10      	pop	{r4}
   808c8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   808ca:	6641      	str	r1, [r0, #100]	; 0x64
   808cc:	e7f5      	b.n	808ba <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   808ce:	6541      	str	r1, [r0, #84]	; 0x54
   808d0:	e7f5      	b.n	808be <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   808d2:	6301      	str	r1, [r0, #48]	; 0x30
   808d4:	e7f5      	b.n	808c2 <pio_set_output+0x12>

000808d6 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   808d6:	f012 0f10 	tst.w	r2, #16
   808da:	d010      	beq.n	808fe <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   808dc:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   808e0:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   808e4:	bf14      	ite	ne
   808e6:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   808ea:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   808ee:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   808f2:	bf14      	ite	ne
   808f4:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   808f8:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   808fc:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   808fe:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80902:	4770      	bx	lr

00080904 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80904:	6401      	str	r1, [r0, #64]	; 0x40
   80906:	4770      	bx	lr

00080908 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80908:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8090a:	4770      	bx	lr

0008090c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8090c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8090e:	4770      	bx	lr

00080910 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80910:	b570      	push	{r4, r5, r6, lr}
   80912:	b082      	sub	sp, #8
   80914:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80916:	0943      	lsrs	r3, r0, #5
   80918:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8091c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80920:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80922:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80926:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8092a:	d031      	beq.n	80990 <pio_configure_pin+0x80>
   8092c:	d816      	bhi.n	8095c <pio_configure_pin+0x4c>
   8092e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80932:	d01b      	beq.n	8096c <pio_configure_pin+0x5c>
   80934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80938:	d116      	bne.n	80968 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8093a:	f000 001f 	and.w	r0, r0, #31
   8093e:	2601      	movs	r6, #1
   80940:	4086      	lsls	r6, r0
   80942:	4632      	mov	r2, r6
   80944:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80948:	4620      	mov	r0, r4
   8094a:	4b22      	ldr	r3, [pc, #136]	; (809d4 <pio_configure_pin+0xc4>)
   8094c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8094e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80952:	bf14      	ite	ne
   80954:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80956:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80958:	2001      	movs	r0, #1
   8095a:	e017      	b.n	8098c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8095c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80960:	d021      	beq.n	809a6 <pio_configure_pin+0x96>
   80962:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80966:	d01e      	beq.n	809a6 <pio_configure_pin+0x96>
		return 0;
   80968:	2000      	movs	r0, #0
   8096a:	e00f      	b.n	8098c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8096c:	f000 001f 	and.w	r0, r0, #31
   80970:	2601      	movs	r6, #1
   80972:	4086      	lsls	r6, r0
   80974:	4632      	mov	r2, r6
   80976:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8097a:	4620      	mov	r0, r4
   8097c:	4b15      	ldr	r3, [pc, #84]	; (809d4 <pio_configure_pin+0xc4>)
   8097e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80980:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80984:	bf14      	ite	ne
   80986:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80988:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8098a:	2001      	movs	r0, #1
}
   8098c:	b002      	add	sp, #8
   8098e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80990:	f000 011f 	and.w	r1, r0, #31
   80994:	2601      	movs	r6, #1
   80996:	462a      	mov	r2, r5
   80998:	fa06 f101 	lsl.w	r1, r6, r1
   8099c:	4620      	mov	r0, r4
   8099e:	4b0e      	ldr	r3, [pc, #56]	; (809d8 <pio_configure_pin+0xc8>)
   809a0:	4798      	blx	r3
	return 1;
   809a2:	4630      	mov	r0, r6
		break;
   809a4:	e7f2      	b.n	8098c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809a6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809aa:	f000 011f 	and.w	r1, r0, #31
   809ae:	2601      	movs	r6, #1
   809b0:	ea05 0306 	and.w	r3, r5, r6
   809b4:	9300      	str	r3, [sp, #0]
   809b6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809ba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809be:	bf14      	ite	ne
   809c0:	2200      	movne	r2, #0
   809c2:	2201      	moveq	r2, #1
   809c4:	fa06 f101 	lsl.w	r1, r6, r1
   809c8:	4620      	mov	r0, r4
   809ca:	4c04      	ldr	r4, [pc, #16]	; (809dc <pio_configure_pin+0xcc>)
   809cc:	47a0      	blx	r4
	return 1;
   809ce:	4630      	mov	r0, r6
		break;
   809d0:	e7dc      	b.n	8098c <pio_configure_pin+0x7c>
   809d2:	bf00      	nop
   809d4:	00080841 	.word	0x00080841
   809d8:	0008087f 	.word	0x0008087f
   809dc:	000808b1 	.word	0x000808b1

000809e0 <pio_configure_pin_group>:
{
   809e0:	b570      	push	{r4, r5, r6, lr}
   809e2:	b082      	sub	sp, #8
   809e4:	4605      	mov	r5, r0
   809e6:	460e      	mov	r6, r1
   809e8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   809ea:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   809ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   809f2:	d027      	beq.n	80a44 <pio_configure_pin_group+0x64>
   809f4:	d811      	bhi.n	80a1a <pio_configure_pin_group+0x3a>
   809f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   809fa:	d016      	beq.n	80a2a <pio_configure_pin_group+0x4a>
   809fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80a00:	d111      	bne.n	80a26 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a02:	460a      	mov	r2, r1
   80a04:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a08:	4b19      	ldr	r3, [pc, #100]	; (80a70 <pio_configure_pin_group+0x90>)
   80a0a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a0c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80a10:	bf14      	ite	ne
   80a12:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a14:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80a16:	2001      	movs	r0, #1
   80a18:	e012      	b.n	80a40 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80a1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80a1e:	d015      	beq.n	80a4c <pio_configure_pin_group+0x6c>
   80a20:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80a24:	d012      	beq.n	80a4c <pio_configure_pin_group+0x6c>
		return 0;
   80a26:	2000      	movs	r0, #0
   80a28:	e00a      	b.n	80a40 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a2a:	460a      	mov	r2, r1
   80a2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a30:	4b0f      	ldr	r3, [pc, #60]	; (80a70 <pio_configure_pin_group+0x90>)
   80a32:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a34:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80a38:	bf14      	ite	ne
   80a3a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a3c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80a3e:	2001      	movs	r0, #1
}
   80a40:	b002      	add	sp, #8
   80a42:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a44:	4b0b      	ldr	r3, [pc, #44]	; (80a74 <pio_configure_pin_group+0x94>)
   80a46:	4798      	blx	r3
	return 1;
   80a48:	2001      	movs	r0, #1
		break;
   80a4a:	e7f9      	b.n	80a40 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a4c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80a50:	f004 0301 	and.w	r3, r4, #1
   80a54:	9300      	str	r3, [sp, #0]
   80a56:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80a5a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a5e:	bf14      	ite	ne
   80a60:	2200      	movne	r2, #0
   80a62:	2201      	moveq	r2, #1
   80a64:	4631      	mov	r1, r6
   80a66:	4628      	mov	r0, r5
   80a68:	4c03      	ldr	r4, [pc, #12]	; (80a78 <pio_configure_pin_group+0x98>)
   80a6a:	47a0      	blx	r4
	return 1;
   80a6c:	2001      	movs	r0, #1
		break;
   80a6e:	e7e7      	b.n	80a40 <pio_configure_pin_group+0x60>
   80a70:	00080841 	.word	0x00080841
   80a74:	0008087f 	.word	0x0008087f
   80a78:	000808b1 	.word	0x000808b1

00080a7c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a80:	4604      	mov	r4, r0
   80a82:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80a84:	4b0e      	ldr	r3, [pc, #56]	; (80ac0 <pio_handler_process+0x44>)
   80a86:	4798      	blx	r3
   80a88:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80a8a:	4620      	mov	r0, r4
   80a8c:	4b0d      	ldr	r3, [pc, #52]	; (80ac4 <pio_handler_process+0x48>)
   80a8e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80a90:	4005      	ands	r5, r0
   80a92:	d013      	beq.n	80abc <pio_handler_process+0x40>
   80a94:	4c0c      	ldr	r4, [pc, #48]	; (80ac8 <pio_handler_process+0x4c>)
   80a96:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80a9a:	e003      	b.n	80aa4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80a9c:	42b4      	cmp	r4, r6
   80a9e:	d00d      	beq.n	80abc <pio_handler_process+0x40>
   80aa0:	3410      	adds	r4, #16
		while (status != 0) {
   80aa2:	b15d      	cbz	r5, 80abc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80aa4:	6820      	ldr	r0, [r4, #0]
   80aa6:	4540      	cmp	r0, r8
   80aa8:	d1f8      	bne.n	80a9c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80aaa:	6861      	ldr	r1, [r4, #4]
   80aac:	4229      	tst	r1, r5
   80aae:	d0f5      	beq.n	80a9c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80ab0:	68e3      	ldr	r3, [r4, #12]
   80ab2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80ab4:	6863      	ldr	r3, [r4, #4]
   80ab6:	ea25 0503 	bic.w	r5, r5, r3
   80aba:	e7ef      	b.n	80a9c <pio_handler_process+0x20>
   80abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ac0:	00080909 	.word	0x00080909
   80ac4:	0008090d 	.word	0x0008090d
   80ac8:	20070bbc 	.word	0x20070bbc

00080acc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80ace:	4c18      	ldr	r4, [pc, #96]	; (80b30 <pio_handler_set+0x64>)
   80ad0:	6826      	ldr	r6, [r4, #0]
   80ad2:	2e06      	cmp	r6, #6
   80ad4:	d829      	bhi.n	80b2a <pio_handler_set+0x5e>
   80ad6:	f04f 0c00 	mov.w	ip, #0
   80ada:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80adc:	4f15      	ldr	r7, [pc, #84]	; (80b34 <pio_handler_set+0x68>)
   80ade:	e004      	b.n	80aea <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   80ae0:	3401      	adds	r4, #1
   80ae2:	b2e4      	uxtb	r4, r4
   80ae4:	46a4      	mov	ip, r4
   80ae6:	42a6      	cmp	r6, r4
   80ae8:	d309      	bcc.n	80afe <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80aea:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80aec:	0125      	lsls	r5, r4, #4
   80aee:	597d      	ldr	r5, [r7, r5]
   80af0:	428d      	cmp	r5, r1
   80af2:	d1f5      	bne.n	80ae0 <pio_handler_set+0x14>
   80af4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80af8:	686d      	ldr	r5, [r5, #4]
   80afa:	4295      	cmp	r5, r2
   80afc:	d1f0      	bne.n	80ae0 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   80afe:	4d0d      	ldr	r5, [pc, #52]	; (80b34 <pio_handler_set+0x68>)
   80b00:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80b04:	eb05 040e 	add.w	r4, r5, lr
   80b08:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   80b0c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   80b0e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   80b10:	9906      	ldr	r1, [sp, #24]
   80b12:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   80b14:	3601      	adds	r6, #1
   80b16:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   80b18:	bf04      	itt	eq
   80b1a:	4905      	ldreq	r1, [pc, #20]	; (80b30 <pio_handler_set+0x64>)
   80b1c:	600e      	streq	r6, [r1, #0]
   80b1e:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80b20:	461a      	mov	r2, r3
   80b22:	4b05      	ldr	r3, [pc, #20]	; (80b38 <pio_handler_set+0x6c>)
   80b24:	4798      	blx	r3

	return 0;
   80b26:	2000      	movs	r0, #0
   80b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   80b2a:	2001      	movs	r0, #1
}
   80b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b2e:	bf00      	nop
   80b30:	20070c2c 	.word	0x20070c2c
   80b34:	20070bbc 	.word	0x20070bbc
   80b38:	000808d7 	.word	0x000808d7

00080b3c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80b3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80b3e:	210b      	movs	r1, #11
   80b40:	4801      	ldr	r0, [pc, #4]	; (80b48 <PIOA_Handler+0xc>)
   80b42:	4b02      	ldr	r3, [pc, #8]	; (80b4c <PIOA_Handler+0x10>)
   80b44:	4798      	blx	r3
   80b46:	bd08      	pop	{r3, pc}
   80b48:	400e0e00 	.word	0x400e0e00
   80b4c:	00080a7d 	.word	0x00080a7d

00080b50 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80b50:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80b52:	210c      	movs	r1, #12
   80b54:	4801      	ldr	r0, [pc, #4]	; (80b5c <PIOB_Handler+0xc>)
   80b56:	4b02      	ldr	r3, [pc, #8]	; (80b60 <PIOB_Handler+0x10>)
   80b58:	4798      	blx	r3
   80b5a:	bd08      	pop	{r3, pc}
   80b5c:	400e1000 	.word	0x400e1000
   80b60:	00080a7d 	.word	0x00080a7d

00080b64 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b64:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b66:	210d      	movs	r1, #13
   80b68:	4801      	ldr	r0, [pc, #4]	; (80b70 <PIOC_Handler+0xc>)
   80b6a:	4b02      	ldr	r3, [pc, #8]	; (80b74 <PIOC_Handler+0x10>)
   80b6c:	4798      	blx	r3
   80b6e:	bd08      	pop	{r3, pc}
   80b70:	400e1200 	.word	0x400e1200
   80b74:	00080a7d 	.word	0x00080a7d

00080b78 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b78:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b7a:	210e      	movs	r1, #14
   80b7c:	4801      	ldr	r0, [pc, #4]	; (80b84 <PIOD_Handler+0xc>)
   80b7e:	4b02      	ldr	r3, [pc, #8]	; (80b88 <PIOD_Handler+0x10>)
   80b80:	4798      	blx	r3
   80b82:	bd08      	pop	{r3, pc}
   80b84:	400e1400 	.word	0x400e1400
   80b88:	00080a7d 	.word	0x00080a7d

00080b8c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b8c:	4a17      	ldr	r2, [pc, #92]	; (80bec <pmc_switch_mck_to_pllack+0x60>)
   80b8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80b94:	4318      	orrs	r0, r3
   80b96:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b98:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b9a:	f013 0f08 	tst.w	r3, #8
   80b9e:	d10a      	bne.n	80bb6 <pmc_switch_mck_to_pllack+0x2a>
   80ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80ba4:	4911      	ldr	r1, [pc, #68]	; (80bec <pmc_switch_mck_to_pllack+0x60>)
   80ba6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ba8:	f012 0f08 	tst.w	r2, #8
   80bac:	d103      	bne.n	80bb6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80bae:	3b01      	subs	r3, #1
   80bb0:	d1f9      	bne.n	80ba6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80bb2:	2001      	movs	r0, #1
   80bb4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80bb6:	4a0d      	ldr	r2, [pc, #52]	; (80bec <pmc_switch_mck_to_pllack+0x60>)
   80bb8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80bba:	f023 0303 	bic.w	r3, r3, #3
   80bbe:	f043 0302 	orr.w	r3, r3, #2
   80bc2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80bc4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80bc6:	f013 0f08 	tst.w	r3, #8
   80bca:	d10a      	bne.n	80be2 <pmc_switch_mck_to_pllack+0x56>
   80bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80bd0:	4906      	ldr	r1, [pc, #24]	; (80bec <pmc_switch_mck_to_pllack+0x60>)
   80bd2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80bd4:	f012 0f08 	tst.w	r2, #8
   80bd8:	d105      	bne.n	80be6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80bda:	3b01      	subs	r3, #1
   80bdc:	d1f9      	bne.n	80bd2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80bde:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80be0:	4770      	bx	lr
	return 0;
   80be2:	2000      	movs	r0, #0
   80be4:	4770      	bx	lr
   80be6:	2000      	movs	r0, #0
   80be8:	4770      	bx	lr
   80bea:	bf00      	nop
   80bec:	400e0600 	.word	0x400e0600

00080bf0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80bf0:	b9c8      	cbnz	r0, 80c26 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bf2:	4a11      	ldr	r2, [pc, #68]	; (80c38 <pmc_switch_mainck_to_xtal+0x48>)
   80bf4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80bf6:	0209      	lsls	r1, r1, #8
   80bf8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80bfa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80bfe:	f023 0303 	bic.w	r3, r3, #3
   80c02:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80c06:	f043 0301 	orr.w	r3, r3, #1
   80c0a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c0c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80c0e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c10:	f013 0f01 	tst.w	r3, #1
   80c14:	d0fb      	beq.n	80c0e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80c16:	4a08      	ldr	r2, [pc, #32]	; (80c38 <pmc_switch_mainck_to_xtal+0x48>)
   80c18:	6a13      	ldr	r3, [r2, #32]
   80c1a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80c22:	6213      	str	r3, [r2, #32]
   80c24:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80c26:	4904      	ldr	r1, [pc, #16]	; (80c38 <pmc_switch_mainck_to_xtal+0x48>)
   80c28:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80c2a:	4a04      	ldr	r2, [pc, #16]	; (80c3c <pmc_switch_mainck_to_xtal+0x4c>)
   80c2c:	401a      	ands	r2, r3
   80c2e:	4b04      	ldr	r3, [pc, #16]	; (80c40 <pmc_switch_mainck_to_xtal+0x50>)
   80c30:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80c32:	620b      	str	r3, [r1, #32]
   80c34:	4770      	bx	lr
   80c36:	bf00      	nop
   80c38:	400e0600 	.word	0x400e0600
   80c3c:	fec8fffc 	.word	0xfec8fffc
   80c40:	01370002 	.word	0x01370002

00080c44 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c44:	4b02      	ldr	r3, [pc, #8]	; (80c50 <pmc_osc_is_ready_mainck+0xc>)
   80c46:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c48:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80c4c:	4770      	bx	lr
   80c4e:	bf00      	nop
   80c50:	400e0600 	.word	0x400e0600

00080c54 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c58:	4b01      	ldr	r3, [pc, #4]	; (80c60 <pmc_disable_pllack+0xc>)
   80c5a:	629a      	str	r2, [r3, #40]	; 0x28
   80c5c:	4770      	bx	lr
   80c5e:	bf00      	nop
   80c60:	400e0600 	.word	0x400e0600

00080c64 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c64:	4b02      	ldr	r3, [pc, #8]	; (80c70 <pmc_is_locked_pllack+0xc>)
   80c66:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c68:	f000 0002 	and.w	r0, r0, #2
   80c6c:	4770      	bx	lr
   80c6e:	bf00      	nop
   80c70:	400e0600 	.word	0x400e0600

00080c74 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c74:	282c      	cmp	r0, #44	; 0x2c
   80c76:	d81e      	bhi.n	80cb6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80c78:	281f      	cmp	r0, #31
   80c7a:	d80c      	bhi.n	80c96 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c7c:	4b11      	ldr	r3, [pc, #68]	; (80cc4 <pmc_enable_periph_clk+0x50>)
   80c7e:	699a      	ldr	r2, [r3, #24]
   80c80:	2301      	movs	r3, #1
   80c82:	4083      	lsls	r3, r0
   80c84:	4393      	bics	r3, r2
   80c86:	d018      	beq.n	80cba <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c88:	2301      	movs	r3, #1
   80c8a:	fa03 f000 	lsl.w	r0, r3, r0
   80c8e:	4b0d      	ldr	r3, [pc, #52]	; (80cc4 <pmc_enable_periph_clk+0x50>)
   80c90:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c92:	2000      	movs	r0, #0
   80c94:	4770      	bx	lr
		ul_id -= 32;
   80c96:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c98:	4b0a      	ldr	r3, [pc, #40]	; (80cc4 <pmc_enable_periph_clk+0x50>)
   80c9a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80c9e:	2301      	movs	r3, #1
   80ca0:	4083      	lsls	r3, r0
   80ca2:	4393      	bics	r3, r2
   80ca4:	d00b      	beq.n	80cbe <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80ca6:	2301      	movs	r3, #1
   80ca8:	fa03 f000 	lsl.w	r0, r3, r0
   80cac:	4b05      	ldr	r3, [pc, #20]	; (80cc4 <pmc_enable_periph_clk+0x50>)
   80cae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80cb2:	2000      	movs	r0, #0
   80cb4:	4770      	bx	lr
		return 1;
   80cb6:	2001      	movs	r0, #1
   80cb8:	4770      	bx	lr
	return 0;
   80cba:	2000      	movs	r0, #0
   80cbc:	4770      	bx	lr
   80cbe:	2000      	movs	r0, #0
}
   80cc0:	4770      	bx	lr
   80cc2:	bf00      	nop
   80cc4:	400e0600 	.word	0x400e0600

00080cc8 <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   80cc8:	b920      	cbnz	r0, 80cd4 <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   80cca:	4a05      	ldr	r2, [pc, #20]	; (80ce0 <pmc_set_writeprotect+0x18>)
   80ccc:	4b05      	ldr	r3, [pc, #20]	; (80ce4 <pmc_set_writeprotect+0x1c>)
   80cce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80cd2:	4770      	bx	lr
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   80cd4:	4a04      	ldr	r2, [pc, #16]	; (80ce8 <pmc_set_writeprotect+0x20>)
   80cd6:	4b03      	ldr	r3, [pc, #12]	; (80ce4 <pmc_set_writeprotect+0x1c>)
   80cd8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80cdc:	4770      	bx	lr
   80cde:	bf00      	nop
   80ce0:	504d4300 	.word	0x504d4300
   80ce4:	400e0600 	.word	0x400e0600
   80ce8:	504d4301 	.word	0x504d4301

00080cec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80cec:	e7fe      	b.n	80cec <Dummy_Handler>
	...

00080cf0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80cf0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80cf2:	4b1c      	ldr	r3, [pc, #112]	; (80d64 <Reset_Handler+0x74>)
   80cf4:	4a1c      	ldr	r2, [pc, #112]	; (80d68 <Reset_Handler+0x78>)
   80cf6:	429a      	cmp	r2, r3
   80cf8:	d010      	beq.n	80d1c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80cfa:	4b1c      	ldr	r3, [pc, #112]	; (80d6c <Reset_Handler+0x7c>)
   80cfc:	4a19      	ldr	r2, [pc, #100]	; (80d64 <Reset_Handler+0x74>)
   80cfe:	429a      	cmp	r2, r3
   80d00:	d20c      	bcs.n	80d1c <Reset_Handler+0x2c>
   80d02:	3b01      	subs	r3, #1
   80d04:	1a9b      	subs	r3, r3, r2
   80d06:	f023 0303 	bic.w	r3, r3, #3
   80d0a:	3304      	adds	r3, #4
   80d0c:	4413      	add	r3, r2
   80d0e:	4916      	ldr	r1, [pc, #88]	; (80d68 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80d10:	f851 0b04 	ldr.w	r0, [r1], #4
   80d14:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80d18:	429a      	cmp	r2, r3
   80d1a:	d1f9      	bne.n	80d10 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d1c:	4b14      	ldr	r3, [pc, #80]	; (80d70 <Reset_Handler+0x80>)
   80d1e:	4a15      	ldr	r2, [pc, #84]	; (80d74 <Reset_Handler+0x84>)
   80d20:	429a      	cmp	r2, r3
   80d22:	d20a      	bcs.n	80d3a <Reset_Handler+0x4a>
   80d24:	3b01      	subs	r3, #1
   80d26:	1a9b      	subs	r3, r3, r2
   80d28:	f023 0303 	bic.w	r3, r3, #3
   80d2c:	3304      	adds	r3, #4
   80d2e:	4413      	add	r3, r2
		*pDest++ = 0;
   80d30:	2100      	movs	r1, #0
   80d32:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80d36:	4293      	cmp	r3, r2
   80d38:	d1fb      	bne.n	80d32 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d3a:	4b0f      	ldr	r3, [pc, #60]	; (80d78 <Reset_Handler+0x88>)
   80d3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80d40:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80d44:	490d      	ldr	r1, [pc, #52]	; (80d7c <Reset_Handler+0x8c>)
   80d46:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80d48:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80d50:	d203      	bcs.n	80d5a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80d52:	688b      	ldr	r3, [r1, #8]
   80d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80d58:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80d5a:	4b09      	ldr	r3, [pc, #36]	; (80d80 <Reset_Handler+0x90>)
   80d5c:	4798      	blx	r3

	/* Branch to main function */
	main();
   80d5e:	4b09      	ldr	r3, [pc, #36]	; (80d84 <Reset_Handler+0x94>)
   80d60:	4798      	blx	r3
   80d62:	e7fe      	b.n	80d62 <Reset_Handler+0x72>
   80d64:	20070000 	.word	0x20070000
   80d68:	0008496c 	.word	0x0008496c
   80d6c:	20070af0 	.word	0x20070af0
   80d70:	20070c9c 	.word	0x20070c9c
   80d74:	20070af0 	.word	0x20070af0
   80d78:	00080000 	.word	0x00080000
   80d7c:	e000ed00 	.word	0xe000ed00
   80d80:	00081901 	.word	0x00081901
   80d84:	00081039 	.word	0x00081039

00080d88 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80d88:	4b3d      	ldr	r3, [pc, #244]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d8c:	f003 0303 	and.w	r3, r3, #3
   80d90:	2b03      	cmp	r3, #3
   80d92:	d80e      	bhi.n	80db2 <SystemCoreClockUpdate+0x2a>
   80d94:	e8df f003 	tbb	[pc, r3]
   80d98:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d9c:	4b39      	ldr	r3, [pc, #228]	; (80e84 <SystemCoreClockUpdate+0xfc>)
   80d9e:	695b      	ldr	r3, [r3, #20]
   80da0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80da4:	bf14      	ite	ne
   80da6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80daa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80dae:	4b36      	ldr	r3, [pc, #216]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80db0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80db2:	4b33      	ldr	r3, [pc, #204]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80dba:	2b70      	cmp	r3, #112	; 0x70
   80dbc:	d057      	beq.n	80e6e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80dbe:	4b30      	ldr	r3, [pc, #192]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80dc2:	4931      	ldr	r1, [pc, #196]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80dc4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80dc8:	680b      	ldr	r3, [r1, #0]
   80dca:	40d3      	lsrs	r3, r2
   80dcc:	600b      	str	r3, [r1, #0]
   80dce:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80dd0:	4b2b      	ldr	r3, [pc, #172]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80dd2:	6a1b      	ldr	r3, [r3, #32]
   80dd4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80dd8:	d003      	beq.n	80de2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80dda:	4a2c      	ldr	r2, [pc, #176]	; (80e8c <SystemCoreClockUpdate+0x104>)
   80ddc:	4b2a      	ldr	r3, [pc, #168]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80dde:	601a      	str	r2, [r3, #0]
   80de0:	e7e7      	b.n	80db2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80de2:	4a2b      	ldr	r2, [pc, #172]	; (80e90 <SystemCoreClockUpdate+0x108>)
   80de4:	4b28      	ldr	r3, [pc, #160]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80de6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80de8:	4b25      	ldr	r3, [pc, #148]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80dea:	6a1b      	ldr	r3, [r3, #32]
   80dec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80df0:	2b10      	cmp	r3, #16
   80df2:	d005      	beq.n	80e00 <SystemCoreClockUpdate+0x78>
   80df4:	2b20      	cmp	r3, #32
   80df6:	d1dc      	bne.n	80db2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80df8:	4a24      	ldr	r2, [pc, #144]	; (80e8c <SystemCoreClockUpdate+0x104>)
   80dfa:	4b23      	ldr	r3, [pc, #140]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80dfc:	601a      	str	r2, [r3, #0]
				break;
   80dfe:	e7d8      	b.n	80db2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80e00:	4a24      	ldr	r2, [pc, #144]	; (80e94 <SystemCoreClockUpdate+0x10c>)
   80e02:	4b21      	ldr	r3, [pc, #132]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80e04:	601a      	str	r2, [r3, #0]
				break;
   80e06:	e7d4      	b.n	80db2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e08:	4b1d      	ldr	r3, [pc, #116]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80e0a:	6a1b      	ldr	r3, [r3, #32]
   80e0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80e10:	d00c      	beq.n	80e2c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e12:	4a1e      	ldr	r2, [pc, #120]	; (80e8c <SystemCoreClockUpdate+0x104>)
   80e14:	4b1c      	ldr	r3, [pc, #112]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80e16:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80e18:	4b19      	ldr	r3, [pc, #100]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e1c:	f003 0303 	and.w	r3, r3, #3
   80e20:	2b02      	cmp	r3, #2
   80e22:	d016      	beq.n	80e52 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e24:	4a1c      	ldr	r2, [pc, #112]	; (80e98 <SystemCoreClockUpdate+0x110>)
   80e26:	4b18      	ldr	r3, [pc, #96]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80e28:	601a      	str	r2, [r3, #0]
   80e2a:	e7c2      	b.n	80db2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e2c:	4a18      	ldr	r2, [pc, #96]	; (80e90 <SystemCoreClockUpdate+0x108>)
   80e2e:	4b16      	ldr	r3, [pc, #88]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80e30:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e32:	4b13      	ldr	r3, [pc, #76]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80e34:	6a1b      	ldr	r3, [r3, #32]
   80e36:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e3a:	2b10      	cmp	r3, #16
   80e3c:	d005      	beq.n	80e4a <SystemCoreClockUpdate+0xc2>
   80e3e:	2b20      	cmp	r3, #32
   80e40:	d1ea      	bne.n	80e18 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80e42:	4a12      	ldr	r2, [pc, #72]	; (80e8c <SystemCoreClockUpdate+0x104>)
   80e44:	4b10      	ldr	r3, [pc, #64]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80e46:	601a      	str	r2, [r3, #0]
				break;
   80e48:	e7e6      	b.n	80e18 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80e4a:	4a12      	ldr	r2, [pc, #72]	; (80e94 <SystemCoreClockUpdate+0x10c>)
   80e4c:	4b0e      	ldr	r3, [pc, #56]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80e4e:	601a      	str	r2, [r3, #0]
				break;
   80e50:	e7e2      	b.n	80e18 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e52:	4a0b      	ldr	r2, [pc, #44]	; (80e80 <SystemCoreClockUpdate+0xf8>)
   80e54:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e56:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80e58:	480b      	ldr	r0, [pc, #44]	; (80e88 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80e5a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80e64:	b2d2      	uxtb	r2, r2
   80e66:	fbb3 f3f2 	udiv	r3, r3, r2
   80e6a:	6003      	str	r3, [r0, #0]
   80e6c:	e7a1      	b.n	80db2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80e6e:	4a06      	ldr	r2, [pc, #24]	; (80e88 <SystemCoreClockUpdate+0x100>)
   80e70:	6813      	ldr	r3, [r2, #0]
   80e72:	490a      	ldr	r1, [pc, #40]	; (80e9c <SystemCoreClockUpdate+0x114>)
   80e74:	fba1 1303 	umull	r1, r3, r1, r3
   80e78:	085b      	lsrs	r3, r3, #1
   80e7a:	6013      	str	r3, [r2, #0]
   80e7c:	4770      	bx	lr
   80e7e:	bf00      	nop
   80e80:	400e0600 	.word	0x400e0600
   80e84:	400e1a10 	.word	0x400e1a10
   80e88:	2007013c 	.word	0x2007013c
   80e8c:	00b71b00 	.word	0x00b71b00
   80e90:	003d0900 	.word	0x003d0900
   80e94:	007a1200 	.word	0x007a1200
   80e98:	0e4e1c00 	.word	0x0e4e1c00
   80e9c:	aaaaaaab 	.word	0xaaaaaaab

00080ea0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ea0:	4b0a      	ldr	r3, [pc, #40]	; (80ecc <_sbrk+0x2c>)
   80ea2:	681b      	ldr	r3, [r3, #0]
   80ea4:	b153      	cbz	r3, 80ebc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80ea6:	4b09      	ldr	r3, [pc, #36]	; (80ecc <_sbrk+0x2c>)
   80ea8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80eaa:	181a      	adds	r2, r3, r0
   80eac:	4908      	ldr	r1, [pc, #32]	; (80ed0 <_sbrk+0x30>)
   80eae:	4291      	cmp	r1, r2
   80eb0:	db08      	blt.n	80ec4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80eb2:	4610      	mov	r0, r2
   80eb4:	4a05      	ldr	r2, [pc, #20]	; (80ecc <_sbrk+0x2c>)
   80eb6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80eb8:	4618      	mov	r0, r3
   80eba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80ebc:	4a05      	ldr	r2, [pc, #20]	; (80ed4 <_sbrk+0x34>)
   80ebe:	4b03      	ldr	r3, [pc, #12]	; (80ecc <_sbrk+0x2c>)
   80ec0:	601a      	str	r2, [r3, #0]
   80ec2:	e7f0      	b.n	80ea6 <_sbrk+0x6>
		return (caddr_t) -1;	
   80ec4:	f04f 30ff 	mov.w	r0, #4294967295
}
   80ec8:	4770      	bx	lr
   80eca:	bf00      	nop
   80ecc:	20070c30 	.word	0x20070c30
   80ed0:	20087ffc 	.word	0x20087ffc
   80ed4:	20072ca0 	.word	0x20072ca0

00080ed8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80ed8:	f04f 30ff 	mov.w	r0, #4294967295
   80edc:	4770      	bx	lr

00080ede <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80ee2:	604b      	str	r3, [r1, #4]

	return 0;
}
   80ee4:	2000      	movs	r0, #0
   80ee6:	4770      	bx	lr

00080ee8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80ee8:	2001      	movs	r0, #1
   80eea:	4770      	bx	lr

00080eec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80eec:	2000      	movs	r0, #0
   80eee:	4770      	bx	lr

00080ef0 <usart_serial_getchar>:
{
   80ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ef2:	b083      	sub	sp, #12
   80ef4:	4604      	mov	r4, r0
   80ef6:	460d      	mov	r5, r1
	uint32_t val = 0;
   80ef8:	2300      	movs	r3, #0
   80efa:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80efc:	4b20      	ldr	r3, [pc, #128]	; (80f80 <usart_serial_getchar+0x90>)
   80efe:	4298      	cmp	r0, r3
   80f00:	d00d      	beq.n	80f1e <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   80f02:	4b20      	ldr	r3, [pc, #128]	; (80f84 <usart_serial_getchar+0x94>)
   80f04:	4298      	cmp	r0, r3
   80f06:	d012      	beq.n	80f2e <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   80f08:	4b1f      	ldr	r3, [pc, #124]	; (80f88 <usart_serial_getchar+0x98>)
   80f0a:	4298      	cmp	r0, r3
   80f0c:	d019      	beq.n	80f42 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   80f0e:	4b1f      	ldr	r3, [pc, #124]	; (80f8c <usart_serial_getchar+0x9c>)
   80f10:	429c      	cmp	r4, r3
   80f12:	d020      	beq.n	80f56 <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   80f14:	4b1e      	ldr	r3, [pc, #120]	; (80f90 <usart_serial_getchar+0xa0>)
   80f16:	429c      	cmp	r4, r3
   80f18:	d027      	beq.n	80f6a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80f1a:	b003      	add	sp, #12
   80f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80f1e:	461f      	mov	r7, r3
   80f20:	4e1c      	ldr	r6, [pc, #112]	; (80f94 <usart_serial_getchar+0xa4>)
   80f22:	4629      	mov	r1, r5
   80f24:	4638      	mov	r0, r7
   80f26:	47b0      	blx	r6
   80f28:	2800      	cmp	r0, #0
   80f2a:	d1fa      	bne.n	80f22 <usart_serial_getchar+0x32>
   80f2c:	e7ef      	b.n	80f0e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80f2e:	461f      	mov	r7, r3
   80f30:	4e19      	ldr	r6, [pc, #100]	; (80f98 <usart_serial_getchar+0xa8>)
   80f32:	a901      	add	r1, sp, #4
   80f34:	4638      	mov	r0, r7
   80f36:	47b0      	blx	r6
   80f38:	2800      	cmp	r0, #0
   80f3a:	d1fa      	bne.n	80f32 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80f3c:	9b01      	ldr	r3, [sp, #4]
   80f3e:	702b      	strb	r3, [r5, #0]
   80f40:	e7e8      	b.n	80f14 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80f42:	461e      	mov	r6, r3
   80f44:	4c14      	ldr	r4, [pc, #80]	; (80f98 <usart_serial_getchar+0xa8>)
   80f46:	a901      	add	r1, sp, #4
   80f48:	4630      	mov	r0, r6
   80f4a:	47a0      	blx	r4
   80f4c:	2800      	cmp	r0, #0
   80f4e:	d1fa      	bne.n	80f46 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80f50:	9b01      	ldr	r3, [sp, #4]
   80f52:	702b      	strb	r3, [r5, #0]
   80f54:	e7e1      	b.n	80f1a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80f56:	461e      	mov	r6, r3
   80f58:	4c0f      	ldr	r4, [pc, #60]	; (80f98 <usart_serial_getchar+0xa8>)
   80f5a:	a901      	add	r1, sp, #4
   80f5c:	4630      	mov	r0, r6
   80f5e:	47a0      	blx	r4
   80f60:	2800      	cmp	r0, #0
   80f62:	d1fa      	bne.n	80f5a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80f64:	9b01      	ldr	r3, [sp, #4]
   80f66:	702b      	strb	r3, [r5, #0]
   80f68:	e7d7      	b.n	80f1a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80f6a:	461e      	mov	r6, r3
   80f6c:	4c0a      	ldr	r4, [pc, #40]	; (80f98 <usart_serial_getchar+0xa8>)
   80f6e:	a901      	add	r1, sp, #4
   80f70:	4630      	mov	r0, r6
   80f72:	47a0      	blx	r4
   80f74:	2800      	cmp	r0, #0
   80f76:	d1fa      	bne.n	80f6e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80f78:	9b01      	ldr	r3, [sp, #4]
   80f7a:	702b      	strb	r3, [r5, #0]
}
   80f7c:	e7cd      	b.n	80f1a <usart_serial_getchar+0x2a>
   80f7e:	bf00      	nop
   80f80:	400e0800 	.word	0x400e0800
   80f84:	40098000 	.word	0x40098000
   80f88:	4009c000 	.word	0x4009c000
   80f8c:	400a0000 	.word	0x400a0000
   80f90:	400a4000 	.word	0x400a4000
   80f94:	0008074b 	.word	0x0008074b
   80f98:	00080545 	.word	0x00080545

00080f9c <usart_serial_putchar>:
{
   80f9c:	b570      	push	{r4, r5, r6, lr}
   80f9e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80fa0:	4b1e      	ldr	r3, [pc, #120]	; (8101c <usart_serial_putchar+0x80>)
   80fa2:	4298      	cmp	r0, r3
   80fa4:	d00d      	beq.n	80fc2 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80fa6:	4b1e      	ldr	r3, [pc, #120]	; (81020 <usart_serial_putchar+0x84>)
   80fa8:	4298      	cmp	r0, r3
   80faa:	d013      	beq.n	80fd4 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80fac:	4b1d      	ldr	r3, [pc, #116]	; (81024 <usart_serial_putchar+0x88>)
   80fae:	4298      	cmp	r0, r3
   80fb0:	d019      	beq.n	80fe6 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80fb2:	4b1d      	ldr	r3, [pc, #116]	; (81028 <usart_serial_putchar+0x8c>)
   80fb4:	4298      	cmp	r0, r3
   80fb6:	d01f      	beq.n	80ff8 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80fb8:	4b1c      	ldr	r3, [pc, #112]	; (8102c <usart_serial_putchar+0x90>)
   80fba:	4298      	cmp	r0, r3
   80fbc:	d025      	beq.n	8100a <usart_serial_putchar+0x6e>
	return 0;
   80fbe:	2000      	movs	r0, #0
}
   80fc0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80fc2:	461e      	mov	r6, r3
   80fc4:	4d1a      	ldr	r5, [pc, #104]	; (81030 <usart_serial_putchar+0x94>)
   80fc6:	4621      	mov	r1, r4
   80fc8:	4630      	mov	r0, r6
   80fca:	47a8      	blx	r5
   80fcc:	2800      	cmp	r0, #0
   80fce:	d1fa      	bne.n	80fc6 <usart_serial_putchar+0x2a>
		return 1;
   80fd0:	2001      	movs	r0, #1
   80fd2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80fd4:	461e      	mov	r6, r3
   80fd6:	4d17      	ldr	r5, [pc, #92]	; (81034 <usart_serial_putchar+0x98>)
   80fd8:	4621      	mov	r1, r4
   80fda:	4630      	mov	r0, r6
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	d1fa      	bne.n	80fd8 <usart_serial_putchar+0x3c>
		return 1;
   80fe2:	2001      	movs	r0, #1
   80fe4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80fe6:	461e      	mov	r6, r3
   80fe8:	4d12      	ldr	r5, [pc, #72]	; (81034 <usart_serial_putchar+0x98>)
   80fea:	4621      	mov	r1, r4
   80fec:	4630      	mov	r0, r6
   80fee:	47a8      	blx	r5
   80ff0:	2800      	cmp	r0, #0
   80ff2:	d1fa      	bne.n	80fea <usart_serial_putchar+0x4e>
		return 1;
   80ff4:	2001      	movs	r0, #1
   80ff6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80ff8:	461e      	mov	r6, r3
   80ffa:	4d0e      	ldr	r5, [pc, #56]	; (81034 <usart_serial_putchar+0x98>)
   80ffc:	4621      	mov	r1, r4
   80ffe:	4630      	mov	r0, r6
   81000:	47a8      	blx	r5
   81002:	2800      	cmp	r0, #0
   81004:	d1fa      	bne.n	80ffc <usart_serial_putchar+0x60>
		return 1;
   81006:	2001      	movs	r0, #1
   81008:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8100a:	461e      	mov	r6, r3
   8100c:	4d09      	ldr	r5, [pc, #36]	; (81034 <usart_serial_putchar+0x98>)
   8100e:	4621      	mov	r1, r4
   81010:	4630      	mov	r0, r6
   81012:	47a8      	blx	r5
   81014:	2800      	cmp	r0, #0
   81016:	d1fa      	bne.n	8100e <usart_serial_putchar+0x72>
		return 1;
   81018:	2001      	movs	r0, #1
   8101a:	bd70      	pop	{r4, r5, r6, pc}
   8101c:	400e0800 	.word	0x400e0800
   81020:	40098000 	.word	0x40098000
   81024:	4009c000 	.word	0x4009c000
   81028:	400a0000 	.word	0x400a0000
   8102c:	400a4000 	.word	0x400a4000
   81030:	0008073b 	.word	0x0008073b
   81034:	00080531 	.word	0x00080531

00081038 <main>:
	printf("Console ready\n");
	printf("=============\n");
}

int main (void)
{
   81038:	b570      	push	{r4, r5, r6, lr}
   8103a:	b084      	sub	sp, #16
	sysclk_init();
   8103c:	4b23      	ldr	r3, [pc, #140]	; (810cc <main+0x94>)
   8103e:	4798      	blx	r3
	board_init();
   81040:	4b23      	ldr	r3, [pc, #140]	; (810d0 <main+0x98>)
   81042:	4798      	blx	r3
   81044:	2008      	movs	r0, #8
   81046:	4d23      	ldr	r5, [pc, #140]	; (810d4 <main+0x9c>)
   81048:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8104a:	4c23      	ldr	r4, [pc, #140]	; (810d8 <main+0xa0>)
   8104c:	4b23      	ldr	r3, [pc, #140]	; (810dc <main+0xa4>)
   8104e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81050:	4a23      	ldr	r2, [pc, #140]	; (810e0 <main+0xa8>)
   81052:	4b24      	ldr	r3, [pc, #144]	; (810e4 <main+0xac>)
   81054:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81056:	4a24      	ldr	r2, [pc, #144]	; (810e8 <main+0xb0>)
   81058:	4b24      	ldr	r3, [pc, #144]	; (810ec <main+0xb4>)
   8105a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8105c:	4b24      	ldr	r3, [pc, #144]	; (810f0 <main+0xb8>)
   8105e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81060:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81064:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81066:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8106a:	9303      	str	r3, [sp, #12]
   8106c:	2008      	movs	r0, #8
   8106e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   81070:	a901      	add	r1, sp, #4
   81072:	4620      	mov	r0, r4
   81074:	4b1f      	ldr	r3, [pc, #124]	; (810f4 <main+0xbc>)
   81076:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81078:	4d1f      	ldr	r5, [pc, #124]	; (810f8 <main+0xc0>)
   8107a:	682b      	ldr	r3, [r5, #0]
   8107c:	2100      	movs	r1, #0
   8107e:	6898      	ldr	r0, [r3, #8]
   81080:	4c1e      	ldr	r4, [pc, #120]	; (810fc <main+0xc4>)
   81082:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81084:	682b      	ldr	r3, [r5, #0]
   81086:	2100      	movs	r1, #0
   81088:	6858      	ldr	r0, [r3, #4]
   8108a:	47a0      	blx	r4
	printf("Console ready\n");
   8108c:	481c      	ldr	r0, [pc, #112]	; (81100 <main+0xc8>)
   8108e:	4c1d      	ldr	r4, [pc, #116]	; (81104 <main+0xcc>)
   81090:	47a0      	blx	r4
	printf("=============\n");
   81092:	481d      	ldr	r0, [pc, #116]	; (81108 <main+0xd0>)
   81094:	47a0      	blx	r4
	configureConsole();
	init_motors();
   81096:	4b1d      	ldr	r3, [pc, #116]	; (8110c <main+0xd4>)
   81098:	4798      	blx	r3
	cpu_irq_enable();
   8109a:	2201      	movs	r2, #1
   8109c:	4b1c      	ldr	r3, [pc, #112]	; (81110 <main+0xd8>)
   8109e:	701a      	strb	r2, [r3, #0]
   810a0:	f3bf 8f5f 	dmb	sy
   810a4:	b662      	cpsie	i
	pulseCounter_configInterrupt();
   810a6:	4b1b      	ldr	r3, [pc, #108]	; (81114 <main+0xdc>)
   810a8:	4798      	blx	r3
	int target_speed = 50;
	
	// Choose test case from test suite for any kind of robot testing
	test_case_1(target_speed);
   810aa:	2032      	movs	r0, #50	; 0x32
   810ac:	4b1a      	ldr	r3, [pc, #104]	; (81118 <main+0xe0>)
   810ae:	4798      	blx	r3
	while (1)
	{
		printf("CHA Motor left: %lu", chA_motor_left);
   810b0:	4c1a      	ldr	r4, [pc, #104]	; (8111c <main+0xe4>)
   810b2:	4e1b      	ldr	r6, [pc, #108]	; (81120 <main+0xe8>)
		delay_ms(5000);
   810b4:	4d1b      	ldr	r5, [pc, #108]	; (81124 <main+0xec>)
		printf("CHA Motor left: %lu", chA_motor_left);
   810b6:	6821      	ldr	r1, [r4, #0]
   810b8:	4630      	mov	r0, r6
   810ba:	4b12      	ldr	r3, [pc, #72]	; (81104 <main+0xcc>)
   810bc:	4798      	blx	r3
		delay_ms(5000);
   810be:	4628      	mov	r0, r5
   810c0:	4b19      	ldr	r3, [pc, #100]	; (81128 <main+0xf0>)
   810c2:	4798      	blx	r3
		chA_motor_left = 0;
   810c4:	2300      	movs	r3, #0
   810c6:	6023      	str	r3, [r4, #0]
   810c8:	e7f5      	b.n	810b6 <main+0x7e>
   810ca:	bf00      	nop
   810cc:	0008075d 	.word	0x0008075d
   810d0:	000807c1 	.word	0x000807c1
   810d4:	00080c75 	.word	0x00080c75
   810d8:	400e0800 	.word	0x400e0800
   810dc:	20070c70 	.word	0x20070c70
   810e0:	00080f9d 	.word	0x00080f9d
   810e4:	20070c6c 	.word	0x20070c6c
   810e8:	00080ef1 	.word	0x00080ef1
   810ec:	20070c68 	.word	0x20070c68
   810f0:	0501bd00 	.word	0x0501bd00
   810f4:	00080705 	.word	0x00080705
   810f8:	20070140 	.word	0x20070140
   810fc:	00081a15 	.word	0x00081a15
   81100:	000847a4 	.word	0x000847a4
   81104:	00081951 	.word	0x00081951
   81108:	000847b4 	.word	0x000847b4
   8110c:	00080161 	.word	0x00080161
   81110:	20070138 	.word	0x20070138
   81114:	00080291 	.word	0x00080291
   81118:	000804d1 	.word	0x000804d1
   8111c:	20070b0c 	.word	0x20070b0c
   81120:	000847c4 	.word	0x000847c4
   81124:	01c9c380 	.word	0x01c9c380
   81128:	20070001 	.word	0x20070001

0008112c <__aeabi_drsub>:
   8112c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81130:	e002      	b.n	81138 <__adddf3>
   81132:	bf00      	nop

00081134 <__aeabi_dsub>:
   81134:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081138 <__adddf3>:
   81138:	b530      	push	{r4, r5, lr}
   8113a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8113e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81142:	ea94 0f05 	teq	r4, r5
   81146:	bf08      	it	eq
   81148:	ea90 0f02 	teqeq	r0, r2
   8114c:	bf1f      	itttt	ne
   8114e:	ea54 0c00 	orrsne.w	ip, r4, r0
   81152:	ea55 0c02 	orrsne.w	ip, r5, r2
   81156:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8115a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8115e:	f000 80e2 	beq.w	81326 <__adddf3+0x1ee>
   81162:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81166:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8116a:	bfb8      	it	lt
   8116c:	426d      	neglt	r5, r5
   8116e:	dd0c      	ble.n	8118a <__adddf3+0x52>
   81170:	442c      	add	r4, r5
   81172:	ea80 0202 	eor.w	r2, r0, r2
   81176:	ea81 0303 	eor.w	r3, r1, r3
   8117a:	ea82 0000 	eor.w	r0, r2, r0
   8117e:	ea83 0101 	eor.w	r1, r3, r1
   81182:	ea80 0202 	eor.w	r2, r0, r2
   81186:	ea81 0303 	eor.w	r3, r1, r3
   8118a:	2d36      	cmp	r5, #54	; 0x36
   8118c:	bf88      	it	hi
   8118e:	bd30      	pophi	{r4, r5, pc}
   81190:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81194:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81198:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8119c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   811a0:	d002      	beq.n	811a8 <__adddf3+0x70>
   811a2:	4240      	negs	r0, r0
   811a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   811a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   811ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   811b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   811b4:	d002      	beq.n	811bc <__adddf3+0x84>
   811b6:	4252      	negs	r2, r2
   811b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   811bc:	ea94 0f05 	teq	r4, r5
   811c0:	f000 80a7 	beq.w	81312 <__adddf3+0x1da>
   811c4:	f1a4 0401 	sub.w	r4, r4, #1
   811c8:	f1d5 0e20 	rsbs	lr, r5, #32
   811cc:	db0d      	blt.n	811ea <__adddf3+0xb2>
   811ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   811d2:	fa22 f205 	lsr.w	r2, r2, r5
   811d6:	1880      	adds	r0, r0, r2
   811d8:	f141 0100 	adc.w	r1, r1, #0
   811dc:	fa03 f20e 	lsl.w	r2, r3, lr
   811e0:	1880      	adds	r0, r0, r2
   811e2:	fa43 f305 	asr.w	r3, r3, r5
   811e6:	4159      	adcs	r1, r3
   811e8:	e00e      	b.n	81208 <__adddf3+0xd0>
   811ea:	f1a5 0520 	sub.w	r5, r5, #32
   811ee:	f10e 0e20 	add.w	lr, lr, #32
   811f2:	2a01      	cmp	r2, #1
   811f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   811f8:	bf28      	it	cs
   811fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   811fe:	fa43 f305 	asr.w	r3, r3, r5
   81202:	18c0      	adds	r0, r0, r3
   81204:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81208:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8120c:	d507      	bpl.n	8121e <__adddf3+0xe6>
   8120e:	f04f 0e00 	mov.w	lr, #0
   81212:	f1dc 0c00 	rsbs	ip, ip, #0
   81216:	eb7e 0000 	sbcs.w	r0, lr, r0
   8121a:	eb6e 0101 	sbc.w	r1, lr, r1
   8121e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81222:	d31b      	bcc.n	8125c <__adddf3+0x124>
   81224:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81228:	d30c      	bcc.n	81244 <__adddf3+0x10c>
   8122a:	0849      	lsrs	r1, r1, #1
   8122c:	ea5f 0030 	movs.w	r0, r0, rrx
   81230:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81234:	f104 0401 	add.w	r4, r4, #1
   81238:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8123c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81240:	f080 809a 	bcs.w	81378 <__adddf3+0x240>
   81244:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81248:	bf08      	it	eq
   8124a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8124e:	f150 0000 	adcs.w	r0, r0, #0
   81252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81256:	ea41 0105 	orr.w	r1, r1, r5
   8125a:	bd30      	pop	{r4, r5, pc}
   8125c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81260:	4140      	adcs	r0, r0
   81262:	eb41 0101 	adc.w	r1, r1, r1
   81266:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8126a:	f1a4 0401 	sub.w	r4, r4, #1
   8126e:	d1e9      	bne.n	81244 <__adddf3+0x10c>
   81270:	f091 0f00 	teq	r1, #0
   81274:	bf04      	itt	eq
   81276:	4601      	moveq	r1, r0
   81278:	2000      	moveq	r0, #0
   8127a:	fab1 f381 	clz	r3, r1
   8127e:	bf08      	it	eq
   81280:	3320      	addeq	r3, #32
   81282:	f1a3 030b 	sub.w	r3, r3, #11
   81286:	f1b3 0220 	subs.w	r2, r3, #32
   8128a:	da0c      	bge.n	812a6 <__adddf3+0x16e>
   8128c:	320c      	adds	r2, #12
   8128e:	dd08      	ble.n	812a2 <__adddf3+0x16a>
   81290:	f102 0c14 	add.w	ip, r2, #20
   81294:	f1c2 020c 	rsb	r2, r2, #12
   81298:	fa01 f00c 	lsl.w	r0, r1, ip
   8129c:	fa21 f102 	lsr.w	r1, r1, r2
   812a0:	e00c      	b.n	812bc <__adddf3+0x184>
   812a2:	f102 0214 	add.w	r2, r2, #20
   812a6:	bfd8      	it	le
   812a8:	f1c2 0c20 	rsble	ip, r2, #32
   812ac:	fa01 f102 	lsl.w	r1, r1, r2
   812b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   812b4:	bfdc      	itt	le
   812b6:	ea41 010c 	orrle.w	r1, r1, ip
   812ba:	4090      	lslle	r0, r2
   812bc:	1ae4      	subs	r4, r4, r3
   812be:	bfa2      	ittt	ge
   812c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   812c4:	4329      	orrge	r1, r5
   812c6:	bd30      	popge	{r4, r5, pc}
   812c8:	ea6f 0404 	mvn.w	r4, r4
   812cc:	3c1f      	subs	r4, #31
   812ce:	da1c      	bge.n	8130a <__adddf3+0x1d2>
   812d0:	340c      	adds	r4, #12
   812d2:	dc0e      	bgt.n	812f2 <__adddf3+0x1ba>
   812d4:	f104 0414 	add.w	r4, r4, #20
   812d8:	f1c4 0220 	rsb	r2, r4, #32
   812dc:	fa20 f004 	lsr.w	r0, r0, r4
   812e0:	fa01 f302 	lsl.w	r3, r1, r2
   812e4:	ea40 0003 	orr.w	r0, r0, r3
   812e8:	fa21 f304 	lsr.w	r3, r1, r4
   812ec:	ea45 0103 	orr.w	r1, r5, r3
   812f0:	bd30      	pop	{r4, r5, pc}
   812f2:	f1c4 040c 	rsb	r4, r4, #12
   812f6:	f1c4 0220 	rsb	r2, r4, #32
   812fa:	fa20 f002 	lsr.w	r0, r0, r2
   812fe:	fa01 f304 	lsl.w	r3, r1, r4
   81302:	ea40 0003 	orr.w	r0, r0, r3
   81306:	4629      	mov	r1, r5
   81308:	bd30      	pop	{r4, r5, pc}
   8130a:	fa21 f004 	lsr.w	r0, r1, r4
   8130e:	4629      	mov	r1, r5
   81310:	bd30      	pop	{r4, r5, pc}
   81312:	f094 0f00 	teq	r4, #0
   81316:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8131a:	bf06      	itte	eq
   8131c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81320:	3401      	addeq	r4, #1
   81322:	3d01      	subne	r5, #1
   81324:	e74e      	b.n	811c4 <__adddf3+0x8c>
   81326:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8132a:	bf18      	it	ne
   8132c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81330:	d029      	beq.n	81386 <__adddf3+0x24e>
   81332:	ea94 0f05 	teq	r4, r5
   81336:	bf08      	it	eq
   81338:	ea90 0f02 	teqeq	r0, r2
   8133c:	d005      	beq.n	8134a <__adddf3+0x212>
   8133e:	ea54 0c00 	orrs.w	ip, r4, r0
   81342:	bf04      	itt	eq
   81344:	4619      	moveq	r1, r3
   81346:	4610      	moveq	r0, r2
   81348:	bd30      	pop	{r4, r5, pc}
   8134a:	ea91 0f03 	teq	r1, r3
   8134e:	bf1e      	ittt	ne
   81350:	2100      	movne	r1, #0
   81352:	2000      	movne	r0, #0
   81354:	bd30      	popne	{r4, r5, pc}
   81356:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8135a:	d105      	bne.n	81368 <__adddf3+0x230>
   8135c:	0040      	lsls	r0, r0, #1
   8135e:	4149      	adcs	r1, r1
   81360:	bf28      	it	cs
   81362:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81366:	bd30      	pop	{r4, r5, pc}
   81368:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8136c:	bf3c      	itt	cc
   8136e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81372:	bd30      	popcc	{r4, r5, pc}
   81374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81378:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8137c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81380:	f04f 0000 	mov.w	r0, #0
   81384:	bd30      	pop	{r4, r5, pc}
   81386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8138a:	bf1a      	itte	ne
   8138c:	4619      	movne	r1, r3
   8138e:	4610      	movne	r0, r2
   81390:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81394:	bf1c      	itt	ne
   81396:	460b      	movne	r3, r1
   81398:	4602      	movne	r2, r0
   8139a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8139e:	bf06      	itte	eq
   813a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   813a4:	ea91 0f03 	teqeq	r1, r3
   813a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   813ac:	bd30      	pop	{r4, r5, pc}
   813ae:	bf00      	nop

000813b0 <__aeabi_ui2d>:
   813b0:	f090 0f00 	teq	r0, #0
   813b4:	bf04      	itt	eq
   813b6:	2100      	moveq	r1, #0
   813b8:	4770      	bxeq	lr
   813ba:	b530      	push	{r4, r5, lr}
   813bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   813c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   813c4:	f04f 0500 	mov.w	r5, #0
   813c8:	f04f 0100 	mov.w	r1, #0
   813cc:	e750      	b.n	81270 <__adddf3+0x138>
   813ce:	bf00      	nop

000813d0 <__aeabi_i2d>:
   813d0:	f090 0f00 	teq	r0, #0
   813d4:	bf04      	itt	eq
   813d6:	2100      	moveq	r1, #0
   813d8:	4770      	bxeq	lr
   813da:	b530      	push	{r4, r5, lr}
   813dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   813e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   813e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   813e8:	bf48      	it	mi
   813ea:	4240      	negmi	r0, r0
   813ec:	f04f 0100 	mov.w	r1, #0
   813f0:	e73e      	b.n	81270 <__adddf3+0x138>
   813f2:	bf00      	nop

000813f4 <__aeabi_f2d>:
   813f4:	0042      	lsls	r2, r0, #1
   813f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   813fa:	ea4f 0131 	mov.w	r1, r1, rrx
   813fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81402:	bf1f      	itttt	ne
   81404:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81408:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8140c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81410:	4770      	bxne	lr
   81412:	f092 0f00 	teq	r2, #0
   81416:	bf14      	ite	ne
   81418:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8141c:	4770      	bxeq	lr
   8141e:	b530      	push	{r4, r5, lr}
   81420:	f44f 7460 	mov.w	r4, #896	; 0x380
   81424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8142c:	e720      	b.n	81270 <__adddf3+0x138>
   8142e:	bf00      	nop

00081430 <__aeabi_ul2d>:
   81430:	ea50 0201 	orrs.w	r2, r0, r1
   81434:	bf08      	it	eq
   81436:	4770      	bxeq	lr
   81438:	b530      	push	{r4, r5, lr}
   8143a:	f04f 0500 	mov.w	r5, #0
   8143e:	e00a      	b.n	81456 <__aeabi_l2d+0x16>

00081440 <__aeabi_l2d>:
   81440:	ea50 0201 	orrs.w	r2, r0, r1
   81444:	bf08      	it	eq
   81446:	4770      	bxeq	lr
   81448:	b530      	push	{r4, r5, lr}
   8144a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8144e:	d502      	bpl.n	81456 <__aeabi_l2d+0x16>
   81450:	4240      	negs	r0, r0
   81452:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81456:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8145a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8145e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81462:	f43f aedc 	beq.w	8121e <__adddf3+0xe6>
   81466:	f04f 0203 	mov.w	r2, #3
   8146a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8146e:	bf18      	it	ne
   81470:	3203      	addne	r2, #3
   81472:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81476:	bf18      	it	ne
   81478:	3203      	addne	r2, #3
   8147a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8147e:	f1c2 0320 	rsb	r3, r2, #32
   81482:	fa00 fc03 	lsl.w	ip, r0, r3
   81486:	fa20 f002 	lsr.w	r0, r0, r2
   8148a:	fa01 fe03 	lsl.w	lr, r1, r3
   8148e:	ea40 000e 	orr.w	r0, r0, lr
   81492:	fa21 f102 	lsr.w	r1, r1, r2
   81496:	4414      	add	r4, r2
   81498:	e6c1      	b.n	8121e <__adddf3+0xe6>
   8149a:	bf00      	nop

0008149c <__aeabi_dmul>:
   8149c:	b570      	push	{r4, r5, r6, lr}
   8149e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   814a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   814a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   814aa:	bf1d      	ittte	ne
   814ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   814b0:	ea94 0f0c 	teqne	r4, ip
   814b4:	ea95 0f0c 	teqne	r5, ip
   814b8:	f000 f8de 	bleq	81678 <__aeabi_dmul+0x1dc>
   814bc:	442c      	add	r4, r5
   814be:	ea81 0603 	eor.w	r6, r1, r3
   814c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   814c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   814ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   814ce:	bf18      	it	ne
   814d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   814d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   814d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   814dc:	d038      	beq.n	81550 <__aeabi_dmul+0xb4>
   814de:	fba0 ce02 	umull	ip, lr, r0, r2
   814e2:	f04f 0500 	mov.w	r5, #0
   814e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   814ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   814ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   814f2:	f04f 0600 	mov.w	r6, #0
   814f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   814fa:	f09c 0f00 	teq	ip, #0
   814fe:	bf18      	it	ne
   81500:	f04e 0e01 	orrne.w	lr, lr, #1
   81504:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81508:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8150c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81510:	d204      	bcs.n	8151c <__aeabi_dmul+0x80>
   81512:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81516:	416d      	adcs	r5, r5
   81518:	eb46 0606 	adc.w	r6, r6, r6
   8151c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81520:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81524:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81528:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8152c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81530:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81534:	bf88      	it	hi
   81536:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8153a:	d81e      	bhi.n	8157a <__aeabi_dmul+0xde>
   8153c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81540:	bf08      	it	eq
   81542:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81546:	f150 0000 	adcs.w	r0, r0, #0
   8154a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8154e:	bd70      	pop	{r4, r5, r6, pc}
   81550:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81554:	ea46 0101 	orr.w	r1, r6, r1
   81558:	ea40 0002 	orr.w	r0, r0, r2
   8155c:	ea81 0103 	eor.w	r1, r1, r3
   81560:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81564:	bfc2      	ittt	gt
   81566:	ebd4 050c 	rsbsgt	r5, r4, ip
   8156a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8156e:	bd70      	popgt	{r4, r5, r6, pc}
   81570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81574:	f04f 0e00 	mov.w	lr, #0
   81578:	3c01      	subs	r4, #1
   8157a:	f300 80ab 	bgt.w	816d4 <__aeabi_dmul+0x238>
   8157e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81582:	bfde      	ittt	le
   81584:	2000      	movle	r0, #0
   81586:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8158a:	bd70      	pople	{r4, r5, r6, pc}
   8158c:	f1c4 0400 	rsb	r4, r4, #0
   81590:	3c20      	subs	r4, #32
   81592:	da35      	bge.n	81600 <__aeabi_dmul+0x164>
   81594:	340c      	adds	r4, #12
   81596:	dc1b      	bgt.n	815d0 <__aeabi_dmul+0x134>
   81598:	f104 0414 	add.w	r4, r4, #20
   8159c:	f1c4 0520 	rsb	r5, r4, #32
   815a0:	fa00 f305 	lsl.w	r3, r0, r5
   815a4:	fa20 f004 	lsr.w	r0, r0, r4
   815a8:	fa01 f205 	lsl.w	r2, r1, r5
   815ac:	ea40 0002 	orr.w	r0, r0, r2
   815b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   815b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   815b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   815bc:	fa21 f604 	lsr.w	r6, r1, r4
   815c0:	eb42 0106 	adc.w	r1, r2, r6
   815c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   815c8:	bf08      	it	eq
   815ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   815ce:	bd70      	pop	{r4, r5, r6, pc}
   815d0:	f1c4 040c 	rsb	r4, r4, #12
   815d4:	f1c4 0520 	rsb	r5, r4, #32
   815d8:	fa00 f304 	lsl.w	r3, r0, r4
   815dc:	fa20 f005 	lsr.w	r0, r0, r5
   815e0:	fa01 f204 	lsl.w	r2, r1, r4
   815e4:	ea40 0002 	orr.w	r0, r0, r2
   815e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   815ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   815f0:	f141 0100 	adc.w	r1, r1, #0
   815f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   815f8:	bf08      	it	eq
   815fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   815fe:	bd70      	pop	{r4, r5, r6, pc}
   81600:	f1c4 0520 	rsb	r5, r4, #32
   81604:	fa00 f205 	lsl.w	r2, r0, r5
   81608:	ea4e 0e02 	orr.w	lr, lr, r2
   8160c:	fa20 f304 	lsr.w	r3, r0, r4
   81610:	fa01 f205 	lsl.w	r2, r1, r5
   81614:	ea43 0302 	orr.w	r3, r3, r2
   81618:	fa21 f004 	lsr.w	r0, r1, r4
   8161c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81620:	fa21 f204 	lsr.w	r2, r1, r4
   81624:	ea20 0002 	bic.w	r0, r0, r2
   81628:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8162c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81630:	bf08      	it	eq
   81632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81636:	bd70      	pop	{r4, r5, r6, pc}
   81638:	f094 0f00 	teq	r4, #0
   8163c:	d10f      	bne.n	8165e <__aeabi_dmul+0x1c2>
   8163e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81642:	0040      	lsls	r0, r0, #1
   81644:	eb41 0101 	adc.w	r1, r1, r1
   81648:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8164c:	bf08      	it	eq
   8164e:	3c01      	subeq	r4, #1
   81650:	d0f7      	beq.n	81642 <__aeabi_dmul+0x1a6>
   81652:	ea41 0106 	orr.w	r1, r1, r6
   81656:	f095 0f00 	teq	r5, #0
   8165a:	bf18      	it	ne
   8165c:	4770      	bxne	lr
   8165e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81662:	0052      	lsls	r2, r2, #1
   81664:	eb43 0303 	adc.w	r3, r3, r3
   81668:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8166c:	bf08      	it	eq
   8166e:	3d01      	subeq	r5, #1
   81670:	d0f7      	beq.n	81662 <__aeabi_dmul+0x1c6>
   81672:	ea43 0306 	orr.w	r3, r3, r6
   81676:	4770      	bx	lr
   81678:	ea94 0f0c 	teq	r4, ip
   8167c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81680:	bf18      	it	ne
   81682:	ea95 0f0c 	teqne	r5, ip
   81686:	d00c      	beq.n	816a2 <__aeabi_dmul+0x206>
   81688:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8168c:	bf18      	it	ne
   8168e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81692:	d1d1      	bne.n	81638 <__aeabi_dmul+0x19c>
   81694:	ea81 0103 	eor.w	r1, r1, r3
   81698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8169c:	f04f 0000 	mov.w	r0, #0
   816a0:	bd70      	pop	{r4, r5, r6, pc}
   816a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   816a6:	bf06      	itte	eq
   816a8:	4610      	moveq	r0, r2
   816aa:	4619      	moveq	r1, r3
   816ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   816b0:	d019      	beq.n	816e6 <__aeabi_dmul+0x24a>
   816b2:	ea94 0f0c 	teq	r4, ip
   816b6:	d102      	bne.n	816be <__aeabi_dmul+0x222>
   816b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   816bc:	d113      	bne.n	816e6 <__aeabi_dmul+0x24a>
   816be:	ea95 0f0c 	teq	r5, ip
   816c2:	d105      	bne.n	816d0 <__aeabi_dmul+0x234>
   816c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   816c8:	bf1c      	itt	ne
   816ca:	4610      	movne	r0, r2
   816cc:	4619      	movne	r1, r3
   816ce:	d10a      	bne.n	816e6 <__aeabi_dmul+0x24a>
   816d0:	ea81 0103 	eor.w	r1, r1, r3
   816d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   816d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   816dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   816e0:	f04f 0000 	mov.w	r0, #0
   816e4:	bd70      	pop	{r4, r5, r6, pc}
   816e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   816ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   816ee:	bd70      	pop	{r4, r5, r6, pc}

000816f0 <__aeabi_ddiv>:
   816f0:	b570      	push	{r4, r5, r6, lr}
   816f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   816f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   816fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   816fe:	bf1d      	ittte	ne
   81700:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81704:	ea94 0f0c 	teqne	r4, ip
   81708:	ea95 0f0c 	teqne	r5, ip
   8170c:	f000 f8a7 	bleq	8185e <__aeabi_ddiv+0x16e>
   81710:	eba4 0405 	sub.w	r4, r4, r5
   81714:	ea81 0e03 	eor.w	lr, r1, r3
   81718:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8171c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81720:	f000 8088 	beq.w	81834 <__aeabi_ddiv+0x144>
   81724:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81728:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8172c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81730:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81734:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81738:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8173c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81740:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81744:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81748:	429d      	cmp	r5, r3
   8174a:	bf08      	it	eq
   8174c:	4296      	cmpeq	r6, r2
   8174e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81752:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81756:	d202      	bcs.n	8175e <__aeabi_ddiv+0x6e>
   81758:	085b      	lsrs	r3, r3, #1
   8175a:	ea4f 0232 	mov.w	r2, r2, rrx
   8175e:	1ab6      	subs	r6, r6, r2
   81760:	eb65 0503 	sbc.w	r5, r5, r3
   81764:	085b      	lsrs	r3, r3, #1
   81766:	ea4f 0232 	mov.w	r2, r2, rrx
   8176a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8176e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81772:	ebb6 0e02 	subs.w	lr, r6, r2
   81776:	eb75 0e03 	sbcs.w	lr, r5, r3
   8177a:	bf22      	ittt	cs
   8177c:	1ab6      	subcs	r6, r6, r2
   8177e:	4675      	movcs	r5, lr
   81780:	ea40 000c 	orrcs.w	r0, r0, ip
   81784:	085b      	lsrs	r3, r3, #1
   81786:	ea4f 0232 	mov.w	r2, r2, rrx
   8178a:	ebb6 0e02 	subs.w	lr, r6, r2
   8178e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81792:	bf22      	ittt	cs
   81794:	1ab6      	subcs	r6, r6, r2
   81796:	4675      	movcs	r5, lr
   81798:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8179c:	085b      	lsrs	r3, r3, #1
   8179e:	ea4f 0232 	mov.w	r2, r2, rrx
   817a2:	ebb6 0e02 	subs.w	lr, r6, r2
   817a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   817aa:	bf22      	ittt	cs
   817ac:	1ab6      	subcs	r6, r6, r2
   817ae:	4675      	movcs	r5, lr
   817b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   817b4:	085b      	lsrs	r3, r3, #1
   817b6:	ea4f 0232 	mov.w	r2, r2, rrx
   817ba:	ebb6 0e02 	subs.w	lr, r6, r2
   817be:	eb75 0e03 	sbcs.w	lr, r5, r3
   817c2:	bf22      	ittt	cs
   817c4:	1ab6      	subcs	r6, r6, r2
   817c6:	4675      	movcs	r5, lr
   817c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   817cc:	ea55 0e06 	orrs.w	lr, r5, r6
   817d0:	d018      	beq.n	81804 <__aeabi_ddiv+0x114>
   817d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   817d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   817da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   817de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   817e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   817e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   817ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   817ee:	d1c0      	bne.n	81772 <__aeabi_ddiv+0x82>
   817f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   817f4:	d10b      	bne.n	8180e <__aeabi_ddiv+0x11e>
   817f6:	ea41 0100 	orr.w	r1, r1, r0
   817fa:	f04f 0000 	mov.w	r0, #0
   817fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81802:	e7b6      	b.n	81772 <__aeabi_ddiv+0x82>
   81804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81808:	bf04      	itt	eq
   8180a:	4301      	orreq	r1, r0
   8180c:	2000      	moveq	r0, #0
   8180e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81812:	bf88      	it	hi
   81814:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81818:	f63f aeaf 	bhi.w	8157a <__aeabi_dmul+0xde>
   8181c:	ebb5 0c03 	subs.w	ip, r5, r3
   81820:	bf04      	itt	eq
   81822:	ebb6 0c02 	subseq.w	ip, r6, r2
   81826:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8182a:	f150 0000 	adcs.w	r0, r0, #0
   8182e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81832:	bd70      	pop	{r4, r5, r6, pc}
   81834:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81838:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8183c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81840:	bfc2      	ittt	gt
   81842:	ebd4 050c 	rsbsgt	r5, r4, ip
   81846:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8184a:	bd70      	popgt	{r4, r5, r6, pc}
   8184c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81850:	f04f 0e00 	mov.w	lr, #0
   81854:	3c01      	subs	r4, #1
   81856:	e690      	b.n	8157a <__aeabi_dmul+0xde>
   81858:	ea45 0e06 	orr.w	lr, r5, r6
   8185c:	e68d      	b.n	8157a <__aeabi_dmul+0xde>
   8185e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81862:	ea94 0f0c 	teq	r4, ip
   81866:	bf08      	it	eq
   81868:	ea95 0f0c 	teqeq	r5, ip
   8186c:	f43f af3b 	beq.w	816e6 <__aeabi_dmul+0x24a>
   81870:	ea94 0f0c 	teq	r4, ip
   81874:	d10a      	bne.n	8188c <__aeabi_ddiv+0x19c>
   81876:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8187a:	f47f af34 	bne.w	816e6 <__aeabi_dmul+0x24a>
   8187e:	ea95 0f0c 	teq	r5, ip
   81882:	f47f af25 	bne.w	816d0 <__aeabi_dmul+0x234>
   81886:	4610      	mov	r0, r2
   81888:	4619      	mov	r1, r3
   8188a:	e72c      	b.n	816e6 <__aeabi_dmul+0x24a>
   8188c:	ea95 0f0c 	teq	r5, ip
   81890:	d106      	bne.n	818a0 <__aeabi_ddiv+0x1b0>
   81892:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81896:	f43f aefd 	beq.w	81694 <__aeabi_dmul+0x1f8>
   8189a:	4610      	mov	r0, r2
   8189c:	4619      	mov	r1, r3
   8189e:	e722      	b.n	816e6 <__aeabi_dmul+0x24a>
   818a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   818a4:	bf18      	it	ne
   818a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   818aa:	f47f aec5 	bne.w	81638 <__aeabi_dmul+0x19c>
   818ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   818b2:	f47f af0d 	bne.w	816d0 <__aeabi_dmul+0x234>
   818b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   818ba:	f47f aeeb 	bne.w	81694 <__aeabi_dmul+0x1f8>
   818be:	e712      	b.n	816e6 <__aeabi_dmul+0x24a>

000818c0 <__aeabi_d2uiz>:
   818c0:	004a      	lsls	r2, r1, #1
   818c2:	d211      	bcs.n	818e8 <__aeabi_d2uiz+0x28>
   818c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   818c8:	d211      	bcs.n	818ee <__aeabi_d2uiz+0x2e>
   818ca:	d50d      	bpl.n	818e8 <__aeabi_d2uiz+0x28>
   818cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   818d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   818d4:	d40e      	bmi.n	818f4 <__aeabi_d2uiz+0x34>
   818d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   818da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   818de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   818e2:	fa23 f002 	lsr.w	r0, r3, r2
   818e6:	4770      	bx	lr
   818e8:	f04f 0000 	mov.w	r0, #0
   818ec:	4770      	bx	lr
   818ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   818f2:	d102      	bne.n	818fa <__aeabi_d2uiz+0x3a>
   818f4:	f04f 30ff 	mov.w	r0, #4294967295
   818f8:	4770      	bx	lr
   818fa:	f04f 0000 	mov.w	r0, #0
   818fe:	4770      	bx	lr

00081900 <__libc_init_array>:
   81900:	b570      	push	{r4, r5, r6, lr}
   81902:	4e0f      	ldr	r6, [pc, #60]	; (81940 <__libc_init_array+0x40>)
   81904:	4d0f      	ldr	r5, [pc, #60]	; (81944 <__libc_init_array+0x44>)
   81906:	1b76      	subs	r6, r6, r5
   81908:	10b6      	asrs	r6, r6, #2
   8190a:	bf18      	it	ne
   8190c:	2400      	movne	r4, #0
   8190e:	d005      	beq.n	8191c <__libc_init_array+0x1c>
   81910:	3401      	adds	r4, #1
   81912:	f855 3b04 	ldr.w	r3, [r5], #4
   81916:	4798      	blx	r3
   81918:	42a6      	cmp	r6, r4
   8191a:	d1f9      	bne.n	81910 <__libc_init_array+0x10>
   8191c:	4e0a      	ldr	r6, [pc, #40]	; (81948 <__libc_init_array+0x48>)
   8191e:	4d0b      	ldr	r5, [pc, #44]	; (8194c <__libc_init_array+0x4c>)
   81920:	f003 f80e 	bl	84940 <_init>
   81924:	1b76      	subs	r6, r6, r5
   81926:	10b6      	asrs	r6, r6, #2
   81928:	bf18      	it	ne
   8192a:	2400      	movne	r4, #0
   8192c:	d006      	beq.n	8193c <__libc_init_array+0x3c>
   8192e:	3401      	adds	r4, #1
   81930:	f855 3b04 	ldr.w	r3, [r5], #4
   81934:	4798      	blx	r3
   81936:	42a6      	cmp	r6, r4
   81938:	d1f9      	bne.n	8192e <__libc_init_array+0x2e>
   8193a:	bd70      	pop	{r4, r5, r6, pc}
   8193c:	bd70      	pop	{r4, r5, r6, pc}
   8193e:	bf00      	nop
   81940:	0008494c 	.word	0x0008494c
   81944:	0008494c 	.word	0x0008494c
   81948:	00084954 	.word	0x00084954
   8194c:	0008494c 	.word	0x0008494c

00081950 <iprintf>:
   81950:	b40f      	push	{r0, r1, r2, r3}
   81952:	b510      	push	{r4, lr}
   81954:	4b07      	ldr	r3, [pc, #28]	; (81974 <iprintf+0x24>)
   81956:	b082      	sub	sp, #8
   81958:	ac04      	add	r4, sp, #16
   8195a:	f854 2b04 	ldr.w	r2, [r4], #4
   8195e:	6818      	ldr	r0, [r3, #0]
   81960:	4623      	mov	r3, r4
   81962:	6881      	ldr	r1, [r0, #8]
   81964:	9401      	str	r4, [sp, #4]
   81966:	f000 f965 	bl	81c34 <_vfiprintf_r>
   8196a:	b002      	add	sp, #8
   8196c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81970:	b004      	add	sp, #16
   81972:	4770      	bx	lr
   81974:	20070140 	.word	0x20070140

00081978 <memset>:
   81978:	b470      	push	{r4, r5, r6}
   8197a:	0786      	lsls	r6, r0, #30
   8197c:	d046      	beq.n	81a0c <memset+0x94>
   8197e:	1e54      	subs	r4, r2, #1
   81980:	2a00      	cmp	r2, #0
   81982:	d041      	beq.n	81a08 <memset+0x90>
   81984:	b2ca      	uxtb	r2, r1
   81986:	4603      	mov	r3, r0
   81988:	e002      	b.n	81990 <memset+0x18>
   8198a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8198e:	d33b      	bcc.n	81a08 <memset+0x90>
   81990:	f803 2b01 	strb.w	r2, [r3], #1
   81994:	079d      	lsls	r5, r3, #30
   81996:	d1f8      	bne.n	8198a <memset+0x12>
   81998:	2c03      	cmp	r4, #3
   8199a:	d92e      	bls.n	819fa <memset+0x82>
   8199c:	b2cd      	uxtb	r5, r1
   8199e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   819a2:	2c0f      	cmp	r4, #15
   819a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   819a8:	d919      	bls.n	819de <memset+0x66>
   819aa:	4626      	mov	r6, r4
   819ac:	f103 0210 	add.w	r2, r3, #16
   819b0:	3e10      	subs	r6, #16
   819b2:	2e0f      	cmp	r6, #15
   819b4:	f842 5c10 	str.w	r5, [r2, #-16]
   819b8:	f842 5c0c 	str.w	r5, [r2, #-12]
   819bc:	f842 5c08 	str.w	r5, [r2, #-8]
   819c0:	f842 5c04 	str.w	r5, [r2, #-4]
   819c4:	f102 0210 	add.w	r2, r2, #16
   819c8:	d8f2      	bhi.n	819b0 <memset+0x38>
   819ca:	f1a4 0210 	sub.w	r2, r4, #16
   819ce:	f022 020f 	bic.w	r2, r2, #15
   819d2:	f004 040f 	and.w	r4, r4, #15
   819d6:	3210      	adds	r2, #16
   819d8:	2c03      	cmp	r4, #3
   819da:	4413      	add	r3, r2
   819dc:	d90d      	bls.n	819fa <memset+0x82>
   819de:	461e      	mov	r6, r3
   819e0:	4622      	mov	r2, r4
   819e2:	3a04      	subs	r2, #4
   819e4:	2a03      	cmp	r2, #3
   819e6:	f846 5b04 	str.w	r5, [r6], #4
   819ea:	d8fa      	bhi.n	819e2 <memset+0x6a>
   819ec:	1f22      	subs	r2, r4, #4
   819ee:	f022 0203 	bic.w	r2, r2, #3
   819f2:	3204      	adds	r2, #4
   819f4:	4413      	add	r3, r2
   819f6:	f004 0403 	and.w	r4, r4, #3
   819fa:	b12c      	cbz	r4, 81a08 <memset+0x90>
   819fc:	b2c9      	uxtb	r1, r1
   819fe:	441c      	add	r4, r3
   81a00:	f803 1b01 	strb.w	r1, [r3], #1
   81a04:	429c      	cmp	r4, r3
   81a06:	d1fb      	bne.n	81a00 <memset+0x88>
   81a08:	bc70      	pop	{r4, r5, r6}
   81a0a:	4770      	bx	lr
   81a0c:	4614      	mov	r4, r2
   81a0e:	4603      	mov	r3, r0
   81a10:	e7c2      	b.n	81998 <memset+0x20>
   81a12:	bf00      	nop

00081a14 <setbuf>:
   81a14:	2900      	cmp	r1, #0
   81a16:	bf0c      	ite	eq
   81a18:	2202      	moveq	r2, #2
   81a1a:	2200      	movne	r2, #0
   81a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81a20:	f000 b800 	b.w	81a24 <setvbuf>

00081a24 <setvbuf>:
   81a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81a28:	4d61      	ldr	r5, [pc, #388]	; (81bb0 <setvbuf+0x18c>)
   81a2a:	b083      	sub	sp, #12
   81a2c:	682d      	ldr	r5, [r5, #0]
   81a2e:	4604      	mov	r4, r0
   81a30:	460f      	mov	r7, r1
   81a32:	4690      	mov	r8, r2
   81a34:	461e      	mov	r6, r3
   81a36:	b115      	cbz	r5, 81a3e <setvbuf+0x1a>
   81a38:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81a3a:	2b00      	cmp	r3, #0
   81a3c:	d064      	beq.n	81b08 <setvbuf+0xe4>
   81a3e:	f1b8 0f02 	cmp.w	r8, #2
   81a42:	d006      	beq.n	81a52 <setvbuf+0x2e>
   81a44:	f1b8 0f01 	cmp.w	r8, #1
   81a48:	f200 809f 	bhi.w	81b8a <setvbuf+0x166>
   81a4c:	2e00      	cmp	r6, #0
   81a4e:	f2c0 809c 	blt.w	81b8a <setvbuf+0x166>
   81a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81a54:	07d8      	lsls	r0, r3, #31
   81a56:	d534      	bpl.n	81ac2 <setvbuf+0x9e>
   81a58:	4621      	mov	r1, r4
   81a5a:	4628      	mov	r0, r5
   81a5c:	f001 f882 	bl	82b64 <_fflush_r>
   81a60:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81a62:	b141      	cbz	r1, 81a76 <setvbuf+0x52>
   81a64:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81a68:	4299      	cmp	r1, r3
   81a6a:	d002      	beq.n	81a72 <setvbuf+0x4e>
   81a6c:	4628      	mov	r0, r5
   81a6e:	f001 f9f7 	bl	82e60 <_free_r>
   81a72:	2300      	movs	r3, #0
   81a74:	6323      	str	r3, [r4, #48]	; 0x30
   81a76:	2200      	movs	r2, #0
   81a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81a7c:	61a2      	str	r2, [r4, #24]
   81a7e:	6062      	str	r2, [r4, #4]
   81a80:	061a      	lsls	r2, r3, #24
   81a82:	d43a      	bmi.n	81afa <setvbuf+0xd6>
   81a84:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81a88:	f023 0303 	bic.w	r3, r3, #3
   81a8c:	f1b8 0f02 	cmp.w	r8, #2
   81a90:	81a3      	strh	r3, [r4, #12]
   81a92:	d01d      	beq.n	81ad0 <setvbuf+0xac>
   81a94:	ab01      	add	r3, sp, #4
   81a96:	466a      	mov	r2, sp
   81a98:	4621      	mov	r1, r4
   81a9a:	4628      	mov	r0, r5
   81a9c:	f001 fc7e 	bl	8339c <__swhatbuf_r>
   81aa0:	89a3      	ldrh	r3, [r4, #12]
   81aa2:	4318      	orrs	r0, r3
   81aa4:	81a0      	strh	r0, [r4, #12]
   81aa6:	2e00      	cmp	r6, #0
   81aa8:	d132      	bne.n	81b10 <setvbuf+0xec>
   81aaa:	9e00      	ldr	r6, [sp, #0]
   81aac:	4630      	mov	r0, r6
   81aae:	f001 fced 	bl	8348c <malloc>
   81ab2:	4607      	mov	r7, r0
   81ab4:	2800      	cmp	r0, #0
   81ab6:	d06b      	beq.n	81b90 <setvbuf+0x16c>
   81ab8:	89a3      	ldrh	r3, [r4, #12]
   81aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81abe:	81a3      	strh	r3, [r4, #12]
   81ac0:	e028      	b.n	81b14 <setvbuf+0xf0>
   81ac2:	89a3      	ldrh	r3, [r4, #12]
   81ac4:	0599      	lsls	r1, r3, #22
   81ac6:	d4c7      	bmi.n	81a58 <setvbuf+0x34>
   81ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81aca:	f001 fc63 	bl	83394 <__retarget_lock_acquire_recursive>
   81ace:	e7c3      	b.n	81a58 <setvbuf+0x34>
   81ad0:	2500      	movs	r5, #0
   81ad2:	2600      	movs	r6, #0
   81ad4:	2001      	movs	r0, #1
   81ad6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81adc:	f043 0302 	orr.w	r3, r3, #2
   81ae0:	60a6      	str	r6, [r4, #8]
   81ae2:	07ce      	lsls	r6, r1, #31
   81ae4:	81a3      	strh	r3, [r4, #12]
   81ae6:	6160      	str	r0, [r4, #20]
   81ae8:	6022      	str	r2, [r4, #0]
   81aea:	6122      	str	r2, [r4, #16]
   81aec:	d401      	bmi.n	81af2 <setvbuf+0xce>
   81aee:	0598      	lsls	r0, r3, #22
   81af0:	d53e      	bpl.n	81b70 <setvbuf+0x14c>
   81af2:	4628      	mov	r0, r5
   81af4:	b003      	add	sp, #12
   81af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81afa:	6921      	ldr	r1, [r4, #16]
   81afc:	4628      	mov	r0, r5
   81afe:	f001 f9af 	bl	82e60 <_free_r>
   81b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81b06:	e7bd      	b.n	81a84 <setvbuf+0x60>
   81b08:	4628      	mov	r0, r5
   81b0a:	f001 f883 	bl	82c14 <__sinit>
   81b0e:	e796      	b.n	81a3e <setvbuf+0x1a>
   81b10:	2f00      	cmp	r7, #0
   81b12:	d0cb      	beq.n	81aac <setvbuf+0x88>
   81b14:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81b16:	2b00      	cmp	r3, #0
   81b18:	d033      	beq.n	81b82 <setvbuf+0x15e>
   81b1a:	9b00      	ldr	r3, [sp, #0]
   81b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81b20:	429e      	cmp	r6, r3
   81b22:	bf1c      	itt	ne
   81b24:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81b28:	81a2      	strhne	r2, [r4, #12]
   81b2a:	f1b8 0f01 	cmp.w	r8, #1
   81b2e:	bf04      	itt	eq
   81b30:	f042 0201 	orreq.w	r2, r2, #1
   81b34:	81a2      	strheq	r2, [r4, #12]
   81b36:	b292      	uxth	r2, r2
   81b38:	f012 0308 	ands.w	r3, r2, #8
   81b3c:	6027      	str	r7, [r4, #0]
   81b3e:	6127      	str	r7, [r4, #16]
   81b40:	6166      	str	r6, [r4, #20]
   81b42:	d00e      	beq.n	81b62 <setvbuf+0x13e>
   81b44:	07d1      	lsls	r1, r2, #31
   81b46:	d51a      	bpl.n	81b7e <setvbuf+0x15a>
   81b48:	2300      	movs	r3, #0
   81b4a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81b4c:	4276      	negs	r6, r6
   81b4e:	f015 0501 	ands.w	r5, r5, #1
   81b52:	61a6      	str	r6, [r4, #24]
   81b54:	60a3      	str	r3, [r4, #8]
   81b56:	d009      	beq.n	81b6c <setvbuf+0x148>
   81b58:	2500      	movs	r5, #0
   81b5a:	4628      	mov	r0, r5
   81b5c:	b003      	add	sp, #12
   81b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81b62:	60a3      	str	r3, [r4, #8]
   81b64:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81b66:	f015 0501 	ands.w	r5, r5, #1
   81b6a:	d1f5      	bne.n	81b58 <setvbuf+0x134>
   81b6c:	0593      	lsls	r3, r2, #22
   81b6e:	d4c0      	bmi.n	81af2 <setvbuf+0xce>
   81b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81b72:	f001 fc11 	bl	83398 <__retarget_lock_release_recursive>
   81b76:	4628      	mov	r0, r5
   81b78:	b003      	add	sp, #12
   81b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81b7e:	60a6      	str	r6, [r4, #8]
   81b80:	e7f0      	b.n	81b64 <setvbuf+0x140>
   81b82:	4628      	mov	r0, r5
   81b84:	f001 f846 	bl	82c14 <__sinit>
   81b88:	e7c7      	b.n	81b1a <setvbuf+0xf6>
   81b8a:	f04f 35ff 	mov.w	r5, #4294967295
   81b8e:	e7b0      	b.n	81af2 <setvbuf+0xce>
   81b90:	f8dd 9000 	ldr.w	r9, [sp]
   81b94:	45b1      	cmp	r9, r6
   81b96:	d004      	beq.n	81ba2 <setvbuf+0x17e>
   81b98:	4648      	mov	r0, r9
   81b9a:	f001 fc77 	bl	8348c <malloc>
   81b9e:	4607      	mov	r7, r0
   81ba0:	b920      	cbnz	r0, 81bac <setvbuf+0x188>
   81ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81ba6:	f04f 35ff 	mov.w	r5, #4294967295
   81baa:	e792      	b.n	81ad2 <setvbuf+0xae>
   81bac:	464e      	mov	r6, r9
   81bae:	e783      	b.n	81ab8 <setvbuf+0x94>
   81bb0:	20070140 	.word	0x20070140

00081bb4 <__sprint_r.part.0>:
   81bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81bb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81bba:	4693      	mov	fp, r2
   81bbc:	049c      	lsls	r4, r3, #18
   81bbe:	d52f      	bpl.n	81c20 <__sprint_r.part.0+0x6c>
   81bc0:	6893      	ldr	r3, [r2, #8]
   81bc2:	6812      	ldr	r2, [r2, #0]
   81bc4:	b353      	cbz	r3, 81c1c <__sprint_r.part.0+0x68>
   81bc6:	460e      	mov	r6, r1
   81bc8:	4607      	mov	r7, r0
   81bca:	f102 0908 	add.w	r9, r2, #8
   81bce:	e919 0420 	ldmdb	r9, {r5, sl}
   81bd2:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81bd6:	d017      	beq.n	81c08 <__sprint_r.part.0+0x54>
   81bd8:	2400      	movs	r4, #0
   81bda:	3d04      	subs	r5, #4
   81bdc:	e001      	b.n	81be2 <__sprint_r.part.0+0x2e>
   81bde:	45a0      	cmp	r8, r4
   81be0:	d010      	beq.n	81c04 <__sprint_r.part.0+0x50>
   81be2:	4632      	mov	r2, r6
   81be4:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81be8:	4638      	mov	r0, r7
   81bea:	f001 f8b5 	bl	82d58 <_fputwc_r>
   81bee:	1c43      	adds	r3, r0, #1
   81bf0:	f104 0401 	add.w	r4, r4, #1
   81bf4:	d1f3      	bne.n	81bde <__sprint_r.part.0+0x2a>
   81bf6:	2300      	movs	r3, #0
   81bf8:	f8cb 3008 	str.w	r3, [fp, #8]
   81bfc:	f8cb 3004 	str.w	r3, [fp, #4]
   81c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c04:	f8db 3008 	ldr.w	r3, [fp, #8]
   81c08:	f02a 0a03 	bic.w	sl, sl, #3
   81c0c:	eba3 030a 	sub.w	r3, r3, sl
   81c10:	f8cb 3008 	str.w	r3, [fp, #8]
   81c14:	f109 0908 	add.w	r9, r9, #8
   81c18:	2b00      	cmp	r3, #0
   81c1a:	d1d8      	bne.n	81bce <__sprint_r.part.0+0x1a>
   81c1c:	2000      	movs	r0, #0
   81c1e:	e7ea      	b.n	81bf6 <__sprint_r.part.0+0x42>
   81c20:	f001 fa04 	bl	8302c <__sfvwrite_r>
   81c24:	2300      	movs	r3, #0
   81c26:	f8cb 3008 	str.w	r3, [fp, #8]
   81c2a:	f8cb 3004 	str.w	r3, [fp, #4]
   81c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c32:	bf00      	nop

00081c34 <_vfiprintf_r>:
   81c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c38:	b0ad      	sub	sp, #180	; 0xb4
   81c3a:	461d      	mov	r5, r3
   81c3c:	468b      	mov	fp, r1
   81c3e:	4690      	mov	r8, r2
   81c40:	9307      	str	r3, [sp, #28]
   81c42:	9006      	str	r0, [sp, #24]
   81c44:	b118      	cbz	r0, 81c4e <_vfiprintf_r+0x1a>
   81c46:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81c48:	2b00      	cmp	r3, #0
   81c4a:	f000 80f3 	beq.w	81e34 <_vfiprintf_r+0x200>
   81c4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81c52:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81c56:	07df      	lsls	r7, r3, #31
   81c58:	b281      	uxth	r1, r0
   81c5a:	d402      	bmi.n	81c62 <_vfiprintf_r+0x2e>
   81c5c:	058e      	lsls	r6, r1, #22
   81c5e:	f140 80fc 	bpl.w	81e5a <_vfiprintf_r+0x226>
   81c62:	048c      	lsls	r4, r1, #18
   81c64:	d40a      	bmi.n	81c7c <_vfiprintf_r+0x48>
   81c66:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81c6a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81c72:	f8ab 100c 	strh.w	r1, [fp, #12]
   81c76:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   81c7a:	b289      	uxth	r1, r1
   81c7c:	0708      	lsls	r0, r1, #28
   81c7e:	f140 80b3 	bpl.w	81de8 <_vfiprintf_r+0x1b4>
   81c82:	f8db 3010 	ldr.w	r3, [fp, #16]
   81c86:	2b00      	cmp	r3, #0
   81c88:	f000 80ae 	beq.w	81de8 <_vfiprintf_r+0x1b4>
   81c8c:	f001 031a 	and.w	r3, r1, #26
   81c90:	2b0a      	cmp	r3, #10
   81c92:	f000 80b5 	beq.w	81e00 <_vfiprintf_r+0x1cc>
   81c96:	2300      	movs	r3, #0
   81c98:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81c9c:	46d1      	mov	r9, sl
   81c9e:	930b      	str	r3, [sp, #44]	; 0x2c
   81ca0:	9303      	str	r3, [sp, #12]
   81ca2:	9311      	str	r3, [sp, #68]	; 0x44
   81ca4:	9310      	str	r3, [sp, #64]	; 0x40
   81ca6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   81caa:	f8cd b010 	str.w	fp, [sp, #16]
   81cae:	f898 3000 	ldrb.w	r3, [r8]
   81cb2:	4644      	mov	r4, r8
   81cb4:	b1fb      	cbz	r3, 81cf6 <_vfiprintf_r+0xc2>
   81cb6:	2b25      	cmp	r3, #37	; 0x25
   81cb8:	d102      	bne.n	81cc0 <_vfiprintf_r+0x8c>
   81cba:	e01c      	b.n	81cf6 <_vfiprintf_r+0xc2>
   81cbc:	2b25      	cmp	r3, #37	; 0x25
   81cbe:	d003      	beq.n	81cc8 <_vfiprintf_r+0x94>
   81cc0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81cc4:	2b00      	cmp	r3, #0
   81cc6:	d1f9      	bne.n	81cbc <_vfiprintf_r+0x88>
   81cc8:	eba4 0508 	sub.w	r5, r4, r8
   81ccc:	b19d      	cbz	r5, 81cf6 <_vfiprintf_r+0xc2>
   81cce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81cd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81cd2:	3301      	adds	r3, #1
   81cd4:	442a      	add	r2, r5
   81cd6:	2b07      	cmp	r3, #7
   81cd8:	f8c9 8000 	str.w	r8, [r9]
   81cdc:	f8c9 5004 	str.w	r5, [r9, #4]
   81ce0:	9211      	str	r2, [sp, #68]	; 0x44
   81ce2:	9310      	str	r3, [sp, #64]	; 0x40
   81ce4:	dd7a      	ble.n	81ddc <_vfiprintf_r+0x1a8>
   81ce6:	2a00      	cmp	r2, #0
   81ce8:	f040 84b5 	bne.w	82656 <_vfiprintf_r+0xa22>
   81cec:	46d1      	mov	r9, sl
   81cee:	9b03      	ldr	r3, [sp, #12]
   81cf0:	9210      	str	r2, [sp, #64]	; 0x40
   81cf2:	442b      	add	r3, r5
   81cf4:	9303      	str	r3, [sp, #12]
   81cf6:	7823      	ldrb	r3, [r4, #0]
   81cf8:	2b00      	cmp	r3, #0
   81cfa:	f000 83e5 	beq.w	824c8 <_vfiprintf_r+0x894>
   81cfe:	2000      	movs	r0, #0
   81d00:	f04f 0300 	mov.w	r3, #0
   81d04:	f104 0801 	add.w	r8, r4, #1
   81d08:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81d0c:	7862      	ldrb	r2, [r4, #1]
   81d0e:	4606      	mov	r6, r0
   81d10:	4605      	mov	r5, r0
   81d12:	4603      	mov	r3, r0
   81d14:	f04f 34ff 	mov.w	r4, #4294967295
   81d18:	f108 0801 	add.w	r8, r8, #1
   81d1c:	f1a2 0120 	sub.w	r1, r2, #32
   81d20:	2958      	cmp	r1, #88	; 0x58
   81d22:	f200 82d9 	bhi.w	822d8 <_vfiprintf_r+0x6a4>
   81d26:	e8df f011 	tbh	[pc, r1, lsl #1]
   81d2a:	0228      	.short	0x0228
   81d2c:	02d702d7 	.word	0x02d702d7
   81d30:	02d70230 	.word	0x02d70230
   81d34:	02d702d7 	.word	0x02d702d7
   81d38:	02d702d7 	.word	0x02d702d7
   81d3c:	00a002d7 	.word	0x00a002d7
   81d40:	02d70288 	.word	0x02d70288
   81d44:	02b800a8 	.word	0x02b800a8
   81d48:	01a602d7 	.word	0x01a602d7
   81d4c:	01ab01ab 	.word	0x01ab01ab
   81d50:	01ab01ab 	.word	0x01ab01ab
   81d54:	01ab01ab 	.word	0x01ab01ab
   81d58:	01ab01ab 	.word	0x01ab01ab
   81d5c:	02d701ab 	.word	0x02d701ab
   81d60:	02d702d7 	.word	0x02d702d7
   81d64:	02d702d7 	.word	0x02d702d7
   81d68:	02d702d7 	.word	0x02d702d7
   81d6c:	02d702d7 	.word	0x02d702d7
   81d70:	01b902d7 	.word	0x01b902d7
   81d74:	02d702d7 	.word	0x02d702d7
   81d78:	02d702d7 	.word	0x02d702d7
   81d7c:	02d702d7 	.word	0x02d702d7
   81d80:	02d702d7 	.word	0x02d702d7
   81d84:	02d702d7 	.word	0x02d702d7
   81d88:	02d7019e 	.word	0x02d7019e
   81d8c:	02d702d7 	.word	0x02d702d7
   81d90:	02d702d7 	.word	0x02d702d7
   81d94:	02d701a2 	.word	0x02d701a2
   81d98:	025a02d7 	.word	0x025a02d7
   81d9c:	02d702d7 	.word	0x02d702d7
   81da0:	02d702d7 	.word	0x02d702d7
   81da4:	02d702d7 	.word	0x02d702d7
   81da8:	02d702d7 	.word	0x02d702d7
   81dac:	02d702d7 	.word	0x02d702d7
   81db0:	02220261 	.word	0x02220261
   81db4:	02d702d7 	.word	0x02d702d7
   81db8:	027602d7 	.word	0x027602d7
   81dbc:	02d70222 	.word	0x02d70222
   81dc0:	027b02d7 	.word	0x027b02d7
   81dc4:	01fc02d7 	.word	0x01fc02d7
   81dc8:	02100189 	.word	0x02100189
   81dcc:	02d702d2 	.word	0x02d702d2
   81dd0:	02d70295 	.word	0x02d70295
   81dd4:	02d700ad 	.word	0x02d700ad
   81dd8:	023502d7 	.word	0x023502d7
   81ddc:	f109 0908 	add.w	r9, r9, #8
   81de0:	9b03      	ldr	r3, [sp, #12]
   81de2:	442b      	add	r3, r5
   81de4:	9303      	str	r3, [sp, #12]
   81de6:	e786      	b.n	81cf6 <_vfiprintf_r+0xc2>
   81de8:	4659      	mov	r1, fp
   81dea:	9806      	ldr	r0, [sp, #24]
   81dec:	f000 fdaa 	bl	82944 <__swsetup_r>
   81df0:	bb18      	cbnz	r0, 81e3a <_vfiprintf_r+0x206>
   81df2:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   81df6:	f001 031a 	and.w	r3, r1, #26
   81dfa:	2b0a      	cmp	r3, #10
   81dfc:	f47f af4b 	bne.w	81c96 <_vfiprintf_r+0x62>
   81e00:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81e04:	2b00      	cmp	r3, #0
   81e06:	f6ff af46 	blt.w	81c96 <_vfiprintf_r+0x62>
   81e0a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81e0e:	07db      	lsls	r3, r3, #31
   81e10:	d405      	bmi.n	81e1e <_vfiprintf_r+0x1ea>
   81e12:	058f      	lsls	r7, r1, #22
   81e14:	d403      	bmi.n	81e1e <_vfiprintf_r+0x1ea>
   81e16:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81e1a:	f001 fabd 	bl	83398 <__retarget_lock_release_recursive>
   81e1e:	462b      	mov	r3, r5
   81e20:	4642      	mov	r2, r8
   81e22:	4659      	mov	r1, fp
   81e24:	9806      	ldr	r0, [sp, #24]
   81e26:	f000 fd49 	bl	828bc <__sbprintf>
   81e2a:	9003      	str	r0, [sp, #12]
   81e2c:	9803      	ldr	r0, [sp, #12]
   81e2e:	b02d      	add	sp, #180	; 0xb4
   81e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e34:	f000 feee 	bl	82c14 <__sinit>
   81e38:	e709      	b.n	81c4e <_vfiprintf_r+0x1a>
   81e3a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81e3e:	07d9      	lsls	r1, r3, #31
   81e40:	d404      	bmi.n	81e4c <_vfiprintf_r+0x218>
   81e42:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81e46:	059a      	lsls	r2, r3, #22
   81e48:	f140 84ae 	bpl.w	827a8 <_vfiprintf_r+0xb74>
   81e4c:	f04f 33ff 	mov.w	r3, #4294967295
   81e50:	9303      	str	r3, [sp, #12]
   81e52:	9803      	ldr	r0, [sp, #12]
   81e54:	b02d      	add	sp, #180	; 0xb4
   81e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e5a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81e5e:	f001 fa99 	bl	83394 <__retarget_lock_acquire_recursive>
   81e62:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81e66:	b281      	uxth	r1, r0
   81e68:	e6fb      	b.n	81c62 <_vfiprintf_r+0x2e>
   81e6a:	9907      	ldr	r1, [sp, #28]
   81e6c:	460a      	mov	r2, r1
   81e6e:	680d      	ldr	r5, [r1, #0]
   81e70:	3204      	adds	r2, #4
   81e72:	2d00      	cmp	r5, #0
   81e74:	9207      	str	r2, [sp, #28]
   81e76:	da02      	bge.n	81e7e <_vfiprintf_r+0x24a>
   81e78:	426d      	negs	r5, r5
   81e7a:	f043 0304 	orr.w	r3, r3, #4
   81e7e:	f898 2000 	ldrb.w	r2, [r8]
   81e82:	e749      	b.n	81d18 <_vfiprintf_r+0xe4>
   81e84:	9508      	str	r5, [sp, #32]
   81e86:	069e      	lsls	r6, r3, #26
   81e88:	f100 845a 	bmi.w	82740 <_vfiprintf_r+0xb0c>
   81e8c:	9907      	ldr	r1, [sp, #28]
   81e8e:	06dd      	lsls	r5, r3, #27
   81e90:	460a      	mov	r2, r1
   81e92:	f100 83ef 	bmi.w	82674 <_vfiprintf_r+0xa40>
   81e96:	0658      	lsls	r0, r3, #25
   81e98:	f140 83ec 	bpl.w	82674 <_vfiprintf_r+0xa40>
   81e9c:	2700      	movs	r7, #0
   81e9e:	2201      	movs	r2, #1
   81ea0:	880e      	ldrh	r6, [r1, #0]
   81ea2:	3104      	adds	r1, #4
   81ea4:	9107      	str	r1, [sp, #28]
   81ea6:	f04f 0100 	mov.w	r1, #0
   81eaa:	2500      	movs	r5, #0
   81eac:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81eb0:	1c61      	adds	r1, r4, #1
   81eb2:	f000 8117 	beq.w	820e4 <_vfiprintf_r+0x4b0>
   81eb6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81eba:	9102      	str	r1, [sp, #8]
   81ebc:	ea56 0107 	orrs.w	r1, r6, r7
   81ec0:	f040 8115 	bne.w	820ee <_vfiprintf_r+0x4ba>
   81ec4:	2c00      	cmp	r4, #0
   81ec6:	f040 835b 	bne.w	82580 <_vfiprintf_r+0x94c>
   81eca:	2a00      	cmp	r2, #0
   81ecc:	f040 83b6 	bne.w	8263c <_vfiprintf_r+0xa08>
   81ed0:	f013 0301 	ands.w	r3, r3, #1
   81ed4:	9305      	str	r3, [sp, #20]
   81ed6:	f000 8455 	beq.w	82784 <_vfiprintf_r+0xb50>
   81eda:	2330      	movs	r3, #48	; 0x30
   81edc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81ee0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81ee4:	9b05      	ldr	r3, [sp, #20]
   81ee6:	42a3      	cmp	r3, r4
   81ee8:	bfb8      	it	lt
   81eea:	4623      	movlt	r3, r4
   81eec:	9301      	str	r3, [sp, #4]
   81eee:	b10d      	cbz	r5, 81ef4 <_vfiprintf_r+0x2c0>
   81ef0:	3301      	adds	r3, #1
   81ef2:	9301      	str	r3, [sp, #4]
   81ef4:	9b02      	ldr	r3, [sp, #8]
   81ef6:	f013 0302 	ands.w	r3, r3, #2
   81efa:	9309      	str	r3, [sp, #36]	; 0x24
   81efc:	d002      	beq.n	81f04 <_vfiprintf_r+0x2d0>
   81efe:	9b01      	ldr	r3, [sp, #4]
   81f00:	3302      	adds	r3, #2
   81f02:	9301      	str	r3, [sp, #4]
   81f04:	9b02      	ldr	r3, [sp, #8]
   81f06:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81f0a:	930a      	str	r3, [sp, #40]	; 0x28
   81f0c:	f040 8215 	bne.w	8233a <_vfiprintf_r+0x706>
   81f10:	9b08      	ldr	r3, [sp, #32]
   81f12:	9a01      	ldr	r2, [sp, #4]
   81f14:	1a9d      	subs	r5, r3, r2
   81f16:	2d00      	cmp	r5, #0
   81f18:	f340 820f 	ble.w	8233a <_vfiprintf_r+0x706>
   81f1c:	2d10      	cmp	r5, #16
   81f1e:	f340 8484 	ble.w	8282a <_vfiprintf_r+0xbf6>
   81f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81f24:	46ce      	mov	lr, r9
   81f26:	2710      	movs	r7, #16
   81f28:	46a1      	mov	r9, r4
   81f2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f2c:	4ec5      	ldr	r6, [pc, #788]	; (82244 <_vfiprintf_r+0x610>)
   81f2e:	4619      	mov	r1, r3
   81f30:	9c06      	ldr	r4, [sp, #24]
   81f32:	e007      	b.n	81f44 <_vfiprintf_r+0x310>
   81f34:	f101 0c02 	add.w	ip, r1, #2
   81f38:	4601      	mov	r1, r0
   81f3a:	f10e 0e08 	add.w	lr, lr, #8
   81f3e:	3d10      	subs	r5, #16
   81f40:	2d10      	cmp	r5, #16
   81f42:	dd11      	ble.n	81f68 <_vfiprintf_r+0x334>
   81f44:	1c48      	adds	r0, r1, #1
   81f46:	3210      	adds	r2, #16
   81f48:	2807      	cmp	r0, #7
   81f4a:	9211      	str	r2, [sp, #68]	; 0x44
   81f4c:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81f50:	9010      	str	r0, [sp, #64]	; 0x40
   81f52:	ddef      	ble.n	81f34 <_vfiprintf_r+0x300>
   81f54:	2a00      	cmp	r2, #0
   81f56:	f040 81d9 	bne.w	8230c <_vfiprintf_r+0x6d8>
   81f5a:	3d10      	subs	r5, #16
   81f5c:	2d10      	cmp	r5, #16
   81f5e:	4611      	mov	r1, r2
   81f60:	f04f 0c01 	mov.w	ip, #1
   81f64:	46d6      	mov	lr, sl
   81f66:	dced      	bgt.n	81f44 <_vfiprintf_r+0x310>
   81f68:	464c      	mov	r4, r9
   81f6a:	4661      	mov	r1, ip
   81f6c:	46f1      	mov	r9, lr
   81f6e:	442a      	add	r2, r5
   81f70:	2907      	cmp	r1, #7
   81f72:	9211      	str	r2, [sp, #68]	; 0x44
   81f74:	f8c9 6000 	str.w	r6, [r9]
   81f78:	f8c9 5004 	str.w	r5, [r9, #4]
   81f7c:	9110      	str	r1, [sp, #64]	; 0x40
   81f7e:	f300 82eb 	bgt.w	82558 <_vfiprintf_r+0x924>
   81f82:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81f86:	f109 0908 	add.w	r9, r9, #8
   81f8a:	1c48      	adds	r0, r1, #1
   81f8c:	2d00      	cmp	r5, #0
   81f8e:	f040 81dc 	bne.w	8234a <_vfiprintf_r+0x716>
   81f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81f94:	2b00      	cmp	r3, #0
   81f96:	f000 81f6 	beq.w	82386 <_vfiprintf_r+0x752>
   81f9a:	2102      	movs	r1, #2
   81f9c:	ab0e      	add	r3, sp, #56	; 0x38
   81f9e:	440a      	add	r2, r1
   81fa0:	2807      	cmp	r0, #7
   81fa2:	9211      	str	r2, [sp, #68]	; 0x44
   81fa4:	9010      	str	r0, [sp, #64]	; 0x40
   81fa6:	f8c9 1004 	str.w	r1, [r9, #4]
   81faa:	f8c9 3000 	str.w	r3, [r9]
   81fae:	f340 81e6 	ble.w	8237e <_vfiprintf_r+0x74a>
   81fb2:	2a00      	cmp	r2, #0
   81fb4:	f040 8395 	bne.w	826e2 <_vfiprintf_r+0xaae>
   81fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81fba:	2001      	movs	r0, #1
   81fbc:	2b80      	cmp	r3, #128	; 0x80
   81fbe:	4611      	mov	r1, r2
   81fc0:	46d1      	mov	r9, sl
   81fc2:	f040 81e4 	bne.w	8238e <_vfiprintf_r+0x75a>
   81fc6:	9b08      	ldr	r3, [sp, #32]
   81fc8:	9d01      	ldr	r5, [sp, #4]
   81fca:	1b5e      	subs	r6, r3, r5
   81fcc:	2e00      	cmp	r6, #0
   81fce:	f340 81de 	ble.w	8238e <_vfiprintf_r+0x75a>
   81fd2:	2e10      	cmp	r6, #16
   81fd4:	f340 843c 	ble.w	82850 <_vfiprintf_r+0xc1c>
   81fd8:	46cc      	mov	ip, r9
   81fda:	2710      	movs	r7, #16
   81fdc:	46a1      	mov	r9, r4
   81fde:	4d9a      	ldr	r5, [pc, #616]	; (82248 <_vfiprintf_r+0x614>)
   81fe0:	9c06      	ldr	r4, [sp, #24]
   81fe2:	e007      	b.n	81ff4 <_vfiprintf_r+0x3c0>
   81fe4:	f101 0e02 	add.w	lr, r1, #2
   81fe8:	4601      	mov	r1, r0
   81fea:	f10c 0c08 	add.w	ip, ip, #8
   81fee:	3e10      	subs	r6, #16
   81ff0:	2e10      	cmp	r6, #16
   81ff2:	dd11      	ble.n	82018 <_vfiprintf_r+0x3e4>
   81ff4:	1c48      	adds	r0, r1, #1
   81ff6:	3210      	adds	r2, #16
   81ff8:	2807      	cmp	r0, #7
   81ffa:	9211      	str	r2, [sp, #68]	; 0x44
   81ffc:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82000:	9010      	str	r0, [sp, #64]	; 0x40
   82002:	ddef      	ble.n	81fe4 <_vfiprintf_r+0x3b0>
   82004:	2a00      	cmp	r2, #0
   82006:	f040 829b 	bne.w	82540 <_vfiprintf_r+0x90c>
   8200a:	3e10      	subs	r6, #16
   8200c:	2e10      	cmp	r6, #16
   8200e:	f04f 0e01 	mov.w	lr, #1
   82012:	4611      	mov	r1, r2
   82014:	46d4      	mov	ip, sl
   82016:	dced      	bgt.n	81ff4 <_vfiprintf_r+0x3c0>
   82018:	464c      	mov	r4, r9
   8201a:	46e1      	mov	r9, ip
   8201c:	4432      	add	r2, r6
   8201e:	f1be 0f07 	cmp.w	lr, #7
   82022:	9211      	str	r2, [sp, #68]	; 0x44
   82024:	e889 0060 	stmia.w	r9, {r5, r6}
   82028:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   8202c:	f300 8366 	bgt.w	826fc <_vfiprintf_r+0xac8>
   82030:	f109 0908 	add.w	r9, r9, #8
   82034:	f10e 0001 	add.w	r0, lr, #1
   82038:	4671      	mov	r1, lr
   8203a:	e1a8      	b.n	8238e <_vfiprintf_r+0x75a>
   8203c:	9508      	str	r5, [sp, #32]
   8203e:	f013 0220 	ands.w	r2, r3, #32
   82042:	f040 8389 	bne.w	82758 <_vfiprintf_r+0xb24>
   82046:	f013 0110 	ands.w	r1, r3, #16
   8204a:	f040 8319 	bne.w	82680 <_vfiprintf_r+0xa4c>
   8204e:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82052:	f000 8315 	beq.w	82680 <_vfiprintf_r+0xa4c>
   82056:	9807      	ldr	r0, [sp, #28]
   82058:	460a      	mov	r2, r1
   8205a:	4601      	mov	r1, r0
   8205c:	3104      	adds	r1, #4
   8205e:	8806      	ldrh	r6, [r0, #0]
   82060:	2700      	movs	r7, #0
   82062:	9107      	str	r1, [sp, #28]
   82064:	e71f      	b.n	81ea6 <_vfiprintf_r+0x272>
   82066:	9508      	str	r5, [sp, #32]
   82068:	f043 0310 	orr.w	r3, r3, #16
   8206c:	e7e7      	b.n	8203e <_vfiprintf_r+0x40a>
   8206e:	9508      	str	r5, [sp, #32]
   82070:	f043 0310 	orr.w	r3, r3, #16
   82074:	e707      	b.n	81e86 <_vfiprintf_r+0x252>
   82076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8207a:	f898 2000 	ldrb.w	r2, [r8]
   8207e:	e64b      	b.n	81d18 <_vfiprintf_r+0xe4>
   82080:	2500      	movs	r5, #0
   82082:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82086:	f818 2b01 	ldrb.w	r2, [r8], #1
   8208a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8208e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82096:	2909      	cmp	r1, #9
   82098:	d9f5      	bls.n	82086 <_vfiprintf_r+0x452>
   8209a:	e63f      	b.n	81d1c <_vfiprintf_r+0xe8>
   8209c:	9508      	str	r5, [sp, #32]
   8209e:	2800      	cmp	r0, #0
   820a0:	f040 8402 	bne.w	828a8 <_vfiprintf_r+0xc74>
   820a4:	f043 0310 	orr.w	r3, r3, #16
   820a8:	069e      	lsls	r6, r3, #26
   820aa:	f100 833d 	bmi.w	82728 <_vfiprintf_r+0xaf4>
   820ae:	9907      	ldr	r1, [sp, #28]
   820b0:	06dd      	lsls	r5, r3, #27
   820b2:	460a      	mov	r2, r1
   820b4:	f100 82f0 	bmi.w	82698 <_vfiprintf_r+0xa64>
   820b8:	0658      	lsls	r0, r3, #25
   820ba:	f140 82ed 	bpl.w	82698 <_vfiprintf_r+0xa64>
   820be:	f9b1 6000 	ldrsh.w	r6, [r1]
   820c2:	3204      	adds	r2, #4
   820c4:	17f7      	asrs	r7, r6, #31
   820c6:	4630      	mov	r0, r6
   820c8:	4639      	mov	r1, r7
   820ca:	9207      	str	r2, [sp, #28]
   820cc:	2800      	cmp	r0, #0
   820ce:	f171 0200 	sbcs.w	r2, r1, #0
   820d2:	f2c0 835a 	blt.w	8278a <_vfiprintf_r+0xb56>
   820d6:	1c61      	adds	r1, r4, #1
   820d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   820dc:	f04f 0201 	mov.w	r2, #1
   820e0:	f47f aee9 	bne.w	81eb6 <_vfiprintf_r+0x282>
   820e4:	ea56 0107 	orrs.w	r1, r6, r7
   820e8:	f000 824b 	beq.w	82582 <_vfiprintf_r+0x94e>
   820ec:	9302      	str	r3, [sp, #8]
   820ee:	2a01      	cmp	r2, #1
   820f0:	f000 828a 	beq.w	82608 <_vfiprintf_r+0x9d4>
   820f4:	2a02      	cmp	r2, #2
   820f6:	f040 825a 	bne.w	825ae <_vfiprintf_r+0x97a>
   820fa:	46d3      	mov	fp, sl
   820fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   820fe:	0933      	lsrs	r3, r6, #4
   82100:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82104:	0939      	lsrs	r1, r7, #4
   82106:	f006 020f 	and.w	r2, r6, #15
   8210a:	460f      	mov	r7, r1
   8210c:	461e      	mov	r6, r3
   8210e:	5c83      	ldrb	r3, [r0, r2]
   82110:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82114:	ea56 0307 	orrs.w	r3, r6, r7
   82118:	d1f1      	bne.n	820fe <_vfiprintf_r+0x4ca>
   8211a:	ebaa 030b 	sub.w	r3, sl, fp
   8211e:	9305      	str	r3, [sp, #20]
   82120:	e6e0      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   82122:	2800      	cmp	r0, #0
   82124:	f040 83bd 	bne.w	828a2 <_vfiprintf_r+0xc6e>
   82128:	0699      	lsls	r1, r3, #26
   8212a:	f100 8359 	bmi.w	827e0 <_vfiprintf_r+0xbac>
   8212e:	06da      	lsls	r2, r3, #27
   82130:	f100 80e5 	bmi.w	822fe <_vfiprintf_r+0x6ca>
   82134:	065b      	lsls	r3, r3, #25
   82136:	f140 80e2 	bpl.w	822fe <_vfiprintf_r+0x6ca>
   8213a:	9a07      	ldr	r2, [sp, #28]
   8213c:	6813      	ldr	r3, [r2, #0]
   8213e:	3204      	adds	r2, #4
   82140:	9207      	str	r2, [sp, #28]
   82142:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82146:	801a      	strh	r2, [r3, #0]
   82148:	e5b1      	b.n	81cae <_vfiprintf_r+0x7a>
   8214a:	2278      	movs	r2, #120	; 0x78
   8214c:	2130      	movs	r1, #48	; 0x30
   8214e:	9508      	str	r5, [sp, #32]
   82150:	9d07      	ldr	r5, [sp, #28]
   82152:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82156:	1d2a      	adds	r2, r5, #4
   82158:	9207      	str	r2, [sp, #28]
   8215a:	4a3c      	ldr	r2, [pc, #240]	; (8224c <_vfiprintf_r+0x618>)
   8215c:	682e      	ldr	r6, [r5, #0]
   8215e:	920b      	str	r2, [sp, #44]	; 0x2c
   82160:	f043 0302 	orr.w	r3, r3, #2
   82164:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82168:	2700      	movs	r7, #0
   8216a:	2202      	movs	r2, #2
   8216c:	e69b      	b.n	81ea6 <_vfiprintf_r+0x272>
   8216e:	9508      	str	r5, [sp, #32]
   82170:	2800      	cmp	r0, #0
   82172:	d099      	beq.n	820a8 <_vfiprintf_r+0x474>
   82174:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82178:	e796      	b.n	820a8 <_vfiprintf_r+0x474>
   8217a:	f898 2000 	ldrb.w	r2, [r8]
   8217e:	2e00      	cmp	r6, #0
   82180:	f47f adca 	bne.w	81d18 <_vfiprintf_r+0xe4>
   82184:	2001      	movs	r0, #1
   82186:	2620      	movs	r6, #32
   82188:	e5c6      	b.n	81d18 <_vfiprintf_r+0xe4>
   8218a:	f043 0301 	orr.w	r3, r3, #1
   8218e:	f898 2000 	ldrb.w	r2, [r8]
   82192:	e5c1      	b.n	81d18 <_vfiprintf_r+0xe4>
   82194:	9508      	str	r5, [sp, #32]
   82196:	2800      	cmp	r0, #0
   82198:	f040 8380 	bne.w	8289c <_vfiprintf_r+0xc68>
   8219c:	492b      	ldr	r1, [pc, #172]	; (8224c <_vfiprintf_r+0x618>)
   8219e:	910b      	str	r1, [sp, #44]	; 0x2c
   821a0:	069f      	lsls	r7, r3, #26
   821a2:	f100 82e5 	bmi.w	82770 <_vfiprintf_r+0xb3c>
   821a6:	9807      	ldr	r0, [sp, #28]
   821a8:	06de      	lsls	r6, r3, #27
   821aa:	4601      	mov	r1, r0
   821ac:	f100 826f 	bmi.w	8268e <_vfiprintf_r+0xa5a>
   821b0:	065d      	lsls	r5, r3, #25
   821b2:	f140 826c 	bpl.w	8268e <_vfiprintf_r+0xa5a>
   821b6:	2700      	movs	r7, #0
   821b8:	3104      	adds	r1, #4
   821ba:	8806      	ldrh	r6, [r0, #0]
   821bc:	9107      	str	r1, [sp, #28]
   821be:	07d8      	lsls	r0, r3, #31
   821c0:	f140 8220 	bpl.w	82604 <_vfiprintf_r+0x9d0>
   821c4:	ea56 0107 	orrs.w	r1, r6, r7
   821c8:	f000 821c 	beq.w	82604 <_vfiprintf_r+0x9d0>
   821cc:	2130      	movs	r1, #48	; 0x30
   821ce:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   821d2:	f043 0302 	orr.w	r3, r3, #2
   821d6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   821da:	2202      	movs	r2, #2
   821dc:	e663      	b.n	81ea6 <_vfiprintf_r+0x272>
   821de:	9508      	str	r5, [sp, #32]
   821e0:	2800      	cmp	r0, #0
   821e2:	f040 8355 	bne.w	82890 <_vfiprintf_r+0xc5c>
   821e6:	491a      	ldr	r1, [pc, #104]	; (82250 <_vfiprintf_r+0x61c>)
   821e8:	910b      	str	r1, [sp, #44]	; 0x2c
   821ea:	e7d9      	b.n	821a0 <_vfiprintf_r+0x56c>
   821ec:	2201      	movs	r2, #1
   821ee:	9807      	ldr	r0, [sp, #28]
   821f0:	4611      	mov	r1, r2
   821f2:	9201      	str	r2, [sp, #4]
   821f4:	6802      	ldr	r2, [r0, #0]
   821f6:	f04f 0400 	mov.w	r4, #0
   821fa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   821fe:	4602      	mov	r2, r0
   82200:	3204      	adds	r2, #4
   82202:	9508      	str	r5, [sp, #32]
   82204:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82208:	9105      	str	r1, [sp, #20]
   8220a:	9207      	str	r2, [sp, #28]
   8220c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82210:	9302      	str	r3, [sp, #8]
   82212:	2400      	movs	r4, #0
   82214:	e66e      	b.n	81ef4 <_vfiprintf_r+0x2c0>
   82216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8221a:	f898 2000 	ldrb.w	r2, [r8]
   8221e:	e57b      	b.n	81d18 <_vfiprintf_r+0xe4>
   82220:	f898 2000 	ldrb.w	r2, [r8]
   82224:	2a6c      	cmp	r2, #108	; 0x6c
   82226:	bf03      	ittte	eq
   82228:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   8222c:	f043 0320 	orreq.w	r3, r3, #32
   82230:	f108 0801 	addeq.w	r8, r8, #1
   82234:	f043 0310 	orrne.w	r3, r3, #16
   82238:	e56e      	b.n	81d18 <_vfiprintf_r+0xe4>
   8223a:	f898 2000 	ldrb.w	r2, [r8]
   8223e:	2001      	movs	r0, #1
   82240:	262b      	movs	r6, #43	; 0x2b
   82242:	e569      	b.n	81d18 <_vfiprintf_r+0xe4>
   82244:	0008480c 	.word	0x0008480c
   82248:	0008481c 	.word	0x0008481c
   8224c:	000847f0 	.word	0x000847f0
   82250:	000847dc 	.word	0x000847dc
   82254:	f04f 0200 	mov.w	r2, #0
   82258:	9907      	ldr	r1, [sp, #28]
   8225a:	9508      	str	r5, [sp, #32]
   8225c:	f8d1 b000 	ldr.w	fp, [r1]
   82260:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82264:	1d0d      	adds	r5, r1, #4
   82266:	f1bb 0f00 	cmp.w	fp, #0
   8226a:	f000 82e4 	beq.w	82836 <_vfiprintf_r+0xc02>
   8226e:	1c67      	adds	r7, r4, #1
   82270:	f000 82c3 	beq.w	827fa <_vfiprintf_r+0xbc6>
   82274:	4622      	mov	r2, r4
   82276:	2100      	movs	r1, #0
   82278:	4658      	mov	r0, fp
   8227a:	9301      	str	r3, [sp, #4]
   8227c:	f001 fbc6 	bl	83a0c <memchr>
   82280:	9b01      	ldr	r3, [sp, #4]
   82282:	2800      	cmp	r0, #0
   82284:	f000 82e8 	beq.w	82858 <_vfiprintf_r+0xc24>
   82288:	eba0 020b 	sub.w	r2, r0, fp
   8228c:	9507      	str	r5, [sp, #28]
   8228e:	9205      	str	r2, [sp, #20]
   82290:	9302      	str	r3, [sp, #8]
   82292:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82296:	2400      	movs	r4, #0
   82298:	e624      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   8229a:	f898 2000 	ldrb.w	r2, [r8]
   8229e:	f108 0701 	add.w	r7, r8, #1
   822a2:	2a2a      	cmp	r2, #42	; 0x2a
   822a4:	f000 82e9 	beq.w	8287a <_vfiprintf_r+0xc46>
   822a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   822ac:	2909      	cmp	r1, #9
   822ae:	46b8      	mov	r8, r7
   822b0:	f04f 0400 	mov.w	r4, #0
   822b4:	f63f ad32 	bhi.w	81d1c <_vfiprintf_r+0xe8>
   822b8:	f818 2b01 	ldrb.w	r2, [r8], #1
   822bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   822c0:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   822c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   822c8:	2909      	cmp	r1, #9
   822ca:	d9f5      	bls.n	822b8 <_vfiprintf_r+0x684>
   822cc:	e526      	b.n	81d1c <_vfiprintf_r+0xe8>
   822ce:	f043 0320 	orr.w	r3, r3, #32
   822d2:	f898 2000 	ldrb.w	r2, [r8]
   822d6:	e51f      	b.n	81d18 <_vfiprintf_r+0xe4>
   822d8:	9508      	str	r5, [sp, #32]
   822da:	2800      	cmp	r0, #0
   822dc:	f040 82db 	bne.w	82896 <_vfiprintf_r+0xc62>
   822e0:	2a00      	cmp	r2, #0
   822e2:	f000 80f1 	beq.w	824c8 <_vfiprintf_r+0x894>
   822e6:	2101      	movs	r1, #1
   822e8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   822ec:	f04f 0200 	mov.w	r2, #0
   822f0:	9101      	str	r1, [sp, #4]
   822f2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   822f6:	9105      	str	r1, [sp, #20]
   822f8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   822fc:	e788      	b.n	82210 <_vfiprintf_r+0x5dc>
   822fe:	9a07      	ldr	r2, [sp, #28]
   82300:	6813      	ldr	r3, [r2, #0]
   82302:	3204      	adds	r2, #4
   82304:	9207      	str	r2, [sp, #28]
   82306:	9a03      	ldr	r2, [sp, #12]
   82308:	601a      	str	r2, [r3, #0]
   8230a:	e4d0      	b.n	81cae <_vfiprintf_r+0x7a>
   8230c:	aa0f      	add	r2, sp, #60	; 0x3c
   8230e:	9904      	ldr	r1, [sp, #16]
   82310:	4620      	mov	r0, r4
   82312:	f7ff fc4f 	bl	81bb4 <__sprint_r.part.0>
   82316:	2800      	cmp	r0, #0
   82318:	f040 8143 	bne.w	825a2 <_vfiprintf_r+0x96e>
   8231c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8231e:	46d6      	mov	lr, sl
   82320:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82322:	f101 0c01 	add.w	ip, r1, #1
   82326:	e60a      	b.n	81f3e <_vfiprintf_r+0x30a>
   82328:	aa0f      	add	r2, sp, #60	; 0x3c
   8232a:	9904      	ldr	r1, [sp, #16]
   8232c:	9806      	ldr	r0, [sp, #24]
   8232e:	f7ff fc41 	bl	81bb4 <__sprint_r.part.0>
   82332:	2800      	cmp	r0, #0
   82334:	f040 8135 	bne.w	825a2 <_vfiprintf_r+0x96e>
   82338:	46d1      	mov	r9, sl
   8233a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8233c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82340:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82342:	1c48      	adds	r0, r1, #1
   82344:	2d00      	cmp	r5, #0
   82346:	f43f ae24 	beq.w	81f92 <_vfiprintf_r+0x35e>
   8234a:	2101      	movs	r1, #1
   8234c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   82350:	440a      	add	r2, r1
   82352:	2807      	cmp	r0, #7
   82354:	9211      	str	r2, [sp, #68]	; 0x44
   82356:	9010      	str	r0, [sp, #64]	; 0x40
   82358:	f8c9 1004 	str.w	r1, [r9, #4]
   8235c:	f8c9 5000 	str.w	r5, [r9]
   82360:	f340 8109 	ble.w	82576 <_vfiprintf_r+0x942>
   82364:	2a00      	cmp	r2, #0
   82366:	f040 81af 	bne.w	826c8 <_vfiprintf_r+0xa94>
   8236a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8236c:	2b00      	cmp	r3, #0
   8236e:	f43f ae23 	beq.w	81fb8 <_vfiprintf_r+0x384>
   82372:	2202      	movs	r2, #2
   82374:	4608      	mov	r0, r1
   82376:	46d1      	mov	r9, sl
   82378:	ab0e      	add	r3, sp, #56	; 0x38
   8237a:	921d      	str	r2, [sp, #116]	; 0x74
   8237c:	931c      	str	r3, [sp, #112]	; 0x70
   8237e:	4601      	mov	r1, r0
   82380:	f109 0908 	add.w	r9, r9, #8
   82384:	3001      	adds	r0, #1
   82386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82388:	2b80      	cmp	r3, #128	; 0x80
   8238a:	f43f ae1c 	beq.w	81fc6 <_vfiprintf_r+0x392>
   8238e:	9b05      	ldr	r3, [sp, #20]
   82390:	1ae4      	subs	r4, r4, r3
   82392:	2c00      	cmp	r4, #0
   82394:	dd2f      	ble.n	823f6 <_vfiprintf_r+0x7c2>
   82396:	2c10      	cmp	r4, #16
   82398:	f340 8220 	ble.w	827dc <_vfiprintf_r+0xba8>
   8239c:	46ce      	mov	lr, r9
   8239e:	2610      	movs	r6, #16
   823a0:	4db2      	ldr	r5, [pc, #712]	; (8266c <_vfiprintf_r+0xa38>)
   823a2:	9f06      	ldr	r7, [sp, #24]
   823a4:	f8dd 9010 	ldr.w	r9, [sp, #16]
   823a8:	e006      	b.n	823b8 <_vfiprintf_r+0x784>
   823aa:	1c88      	adds	r0, r1, #2
   823ac:	4619      	mov	r1, r3
   823ae:	f10e 0e08 	add.w	lr, lr, #8
   823b2:	3c10      	subs	r4, #16
   823b4:	2c10      	cmp	r4, #16
   823b6:	dd10      	ble.n	823da <_vfiprintf_r+0x7a6>
   823b8:	1c4b      	adds	r3, r1, #1
   823ba:	3210      	adds	r2, #16
   823bc:	2b07      	cmp	r3, #7
   823be:	9211      	str	r2, [sp, #68]	; 0x44
   823c0:	e88e 0060 	stmia.w	lr, {r5, r6}
   823c4:	9310      	str	r3, [sp, #64]	; 0x40
   823c6:	ddf0      	ble.n	823aa <_vfiprintf_r+0x776>
   823c8:	2a00      	cmp	r2, #0
   823ca:	d165      	bne.n	82498 <_vfiprintf_r+0x864>
   823cc:	3c10      	subs	r4, #16
   823ce:	2c10      	cmp	r4, #16
   823d0:	f04f 0001 	mov.w	r0, #1
   823d4:	4611      	mov	r1, r2
   823d6:	46d6      	mov	lr, sl
   823d8:	dcee      	bgt.n	823b8 <_vfiprintf_r+0x784>
   823da:	46f1      	mov	r9, lr
   823dc:	4422      	add	r2, r4
   823de:	2807      	cmp	r0, #7
   823e0:	9211      	str	r2, [sp, #68]	; 0x44
   823e2:	f8c9 5000 	str.w	r5, [r9]
   823e6:	f8c9 4004 	str.w	r4, [r9, #4]
   823ea:	9010      	str	r0, [sp, #64]	; 0x40
   823ec:	f300 8085 	bgt.w	824fa <_vfiprintf_r+0x8c6>
   823f0:	f109 0908 	add.w	r9, r9, #8
   823f4:	3001      	adds	r0, #1
   823f6:	9905      	ldr	r1, [sp, #20]
   823f8:	2807      	cmp	r0, #7
   823fa:	440a      	add	r2, r1
   823fc:	9211      	str	r2, [sp, #68]	; 0x44
   823fe:	f8c9 b000 	str.w	fp, [r9]
   82402:	f8c9 1004 	str.w	r1, [r9, #4]
   82406:	9010      	str	r0, [sp, #64]	; 0x40
   82408:	f340 8082 	ble.w	82510 <_vfiprintf_r+0x8dc>
   8240c:	2a00      	cmp	r2, #0
   8240e:	f040 8118 	bne.w	82642 <_vfiprintf_r+0xa0e>
   82412:	9b02      	ldr	r3, [sp, #8]
   82414:	9210      	str	r2, [sp, #64]	; 0x40
   82416:	0758      	lsls	r0, r3, #29
   82418:	d535      	bpl.n	82486 <_vfiprintf_r+0x852>
   8241a:	9b08      	ldr	r3, [sp, #32]
   8241c:	9901      	ldr	r1, [sp, #4]
   8241e:	1a5c      	subs	r4, r3, r1
   82420:	2c00      	cmp	r4, #0
   82422:	f340 80e7 	ble.w	825f4 <_vfiprintf_r+0x9c0>
   82426:	46d1      	mov	r9, sl
   82428:	2c10      	cmp	r4, #16
   8242a:	f340 820d 	ble.w	82848 <_vfiprintf_r+0xc14>
   8242e:	2510      	movs	r5, #16
   82430:	9910      	ldr	r1, [sp, #64]	; 0x40
   82432:	4e8f      	ldr	r6, [pc, #572]	; (82670 <_vfiprintf_r+0xa3c>)
   82434:	9f06      	ldr	r7, [sp, #24]
   82436:	f8dd b010 	ldr.w	fp, [sp, #16]
   8243a:	e006      	b.n	8244a <_vfiprintf_r+0x816>
   8243c:	1c88      	adds	r0, r1, #2
   8243e:	4619      	mov	r1, r3
   82440:	f109 0908 	add.w	r9, r9, #8
   82444:	3c10      	subs	r4, #16
   82446:	2c10      	cmp	r4, #16
   82448:	dd11      	ble.n	8246e <_vfiprintf_r+0x83a>
   8244a:	1c4b      	adds	r3, r1, #1
   8244c:	3210      	adds	r2, #16
   8244e:	2b07      	cmp	r3, #7
   82450:	9211      	str	r2, [sp, #68]	; 0x44
   82452:	f8c9 6000 	str.w	r6, [r9]
   82456:	f8c9 5004 	str.w	r5, [r9, #4]
   8245a:	9310      	str	r3, [sp, #64]	; 0x40
   8245c:	ddee      	ble.n	8243c <_vfiprintf_r+0x808>
   8245e:	bb42      	cbnz	r2, 824b2 <_vfiprintf_r+0x87e>
   82460:	3c10      	subs	r4, #16
   82462:	2c10      	cmp	r4, #16
   82464:	f04f 0001 	mov.w	r0, #1
   82468:	4611      	mov	r1, r2
   8246a:	46d1      	mov	r9, sl
   8246c:	dced      	bgt.n	8244a <_vfiprintf_r+0x816>
   8246e:	4422      	add	r2, r4
   82470:	2807      	cmp	r0, #7
   82472:	9211      	str	r2, [sp, #68]	; 0x44
   82474:	f8c9 6000 	str.w	r6, [r9]
   82478:	f8c9 4004 	str.w	r4, [r9, #4]
   8247c:	9010      	str	r0, [sp, #64]	; 0x40
   8247e:	dd51      	ble.n	82524 <_vfiprintf_r+0x8f0>
   82480:	2a00      	cmp	r2, #0
   82482:	f040 819a 	bne.w	827ba <_vfiprintf_r+0xb86>
   82486:	9b03      	ldr	r3, [sp, #12]
   82488:	9a08      	ldr	r2, [sp, #32]
   8248a:	9901      	ldr	r1, [sp, #4]
   8248c:	428a      	cmp	r2, r1
   8248e:	bfac      	ite	ge
   82490:	189b      	addge	r3, r3, r2
   82492:	185b      	addlt	r3, r3, r1
   82494:	9303      	str	r3, [sp, #12]
   82496:	e04e      	b.n	82536 <_vfiprintf_r+0x902>
   82498:	aa0f      	add	r2, sp, #60	; 0x3c
   8249a:	4649      	mov	r1, r9
   8249c:	4638      	mov	r0, r7
   8249e:	f7ff fb89 	bl	81bb4 <__sprint_r.part.0>
   824a2:	2800      	cmp	r0, #0
   824a4:	f040 813e 	bne.w	82724 <_vfiprintf_r+0xaf0>
   824a8:	9910      	ldr	r1, [sp, #64]	; 0x40
   824aa:	46d6      	mov	lr, sl
   824ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   824ae:	1c48      	adds	r0, r1, #1
   824b0:	e77f      	b.n	823b2 <_vfiprintf_r+0x77e>
   824b2:	aa0f      	add	r2, sp, #60	; 0x3c
   824b4:	4659      	mov	r1, fp
   824b6:	4638      	mov	r0, r7
   824b8:	f7ff fb7c 	bl	81bb4 <__sprint_r.part.0>
   824bc:	b960      	cbnz	r0, 824d8 <_vfiprintf_r+0x8a4>
   824be:	9910      	ldr	r1, [sp, #64]	; 0x40
   824c0:	46d1      	mov	r9, sl
   824c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   824c4:	1c48      	adds	r0, r1, #1
   824c6:	e7bd      	b.n	82444 <_vfiprintf_r+0x810>
   824c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   824ca:	f8dd b010 	ldr.w	fp, [sp, #16]
   824ce:	2b00      	cmp	r3, #0
   824d0:	f040 81ca 	bne.w	82868 <_vfiprintf_r+0xc34>
   824d4:	2300      	movs	r3, #0
   824d6:	9310      	str	r3, [sp, #64]	; 0x40
   824d8:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   824dc:	f013 0f01 	tst.w	r3, #1
   824e0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   824e4:	d102      	bne.n	824ec <_vfiprintf_r+0x8b8>
   824e6:	059a      	lsls	r2, r3, #22
   824e8:	f140 80dd 	bpl.w	826a6 <_vfiprintf_r+0xa72>
   824ec:	065b      	lsls	r3, r3, #25
   824ee:	f53f acad 	bmi.w	81e4c <_vfiprintf_r+0x218>
   824f2:	9803      	ldr	r0, [sp, #12]
   824f4:	b02d      	add	sp, #180	; 0xb4
   824f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824fa:	2a00      	cmp	r2, #0
   824fc:	f040 8105 	bne.w	8270a <_vfiprintf_r+0xad6>
   82500:	2301      	movs	r3, #1
   82502:	46d1      	mov	r9, sl
   82504:	9a05      	ldr	r2, [sp, #20]
   82506:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8250a:	921d      	str	r2, [sp, #116]	; 0x74
   8250c:	9211      	str	r2, [sp, #68]	; 0x44
   8250e:	9310      	str	r3, [sp, #64]	; 0x40
   82510:	f109 0908 	add.w	r9, r9, #8
   82514:	9b02      	ldr	r3, [sp, #8]
   82516:	0759      	lsls	r1, r3, #29
   82518:	d504      	bpl.n	82524 <_vfiprintf_r+0x8f0>
   8251a:	9b08      	ldr	r3, [sp, #32]
   8251c:	9901      	ldr	r1, [sp, #4]
   8251e:	1a5c      	subs	r4, r3, r1
   82520:	2c00      	cmp	r4, #0
   82522:	dc81      	bgt.n	82428 <_vfiprintf_r+0x7f4>
   82524:	9b03      	ldr	r3, [sp, #12]
   82526:	9908      	ldr	r1, [sp, #32]
   82528:	9801      	ldr	r0, [sp, #4]
   8252a:	4281      	cmp	r1, r0
   8252c:	bfac      	ite	ge
   8252e:	185b      	addge	r3, r3, r1
   82530:	181b      	addlt	r3, r3, r0
   82532:	9303      	str	r3, [sp, #12]
   82534:	bb72      	cbnz	r2, 82594 <_vfiprintf_r+0x960>
   82536:	2300      	movs	r3, #0
   82538:	46d1      	mov	r9, sl
   8253a:	9310      	str	r3, [sp, #64]	; 0x40
   8253c:	f7ff bbb7 	b.w	81cae <_vfiprintf_r+0x7a>
   82540:	aa0f      	add	r2, sp, #60	; 0x3c
   82542:	9904      	ldr	r1, [sp, #16]
   82544:	4620      	mov	r0, r4
   82546:	f7ff fb35 	bl	81bb4 <__sprint_r.part.0>
   8254a:	bb50      	cbnz	r0, 825a2 <_vfiprintf_r+0x96e>
   8254c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8254e:	46d4      	mov	ip, sl
   82550:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82552:	f101 0e01 	add.w	lr, r1, #1
   82556:	e54a      	b.n	81fee <_vfiprintf_r+0x3ba>
   82558:	2a00      	cmp	r2, #0
   8255a:	f47f aee5 	bne.w	82328 <_vfiprintf_r+0x6f4>
   8255e:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82562:	2900      	cmp	r1, #0
   82564:	f000 811a 	beq.w	8279c <_vfiprintf_r+0xb68>
   82568:	2201      	movs	r2, #1
   8256a:	46d1      	mov	r9, sl
   8256c:	4610      	mov	r0, r2
   8256e:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82572:	921d      	str	r2, [sp, #116]	; 0x74
   82574:	911c      	str	r1, [sp, #112]	; 0x70
   82576:	4601      	mov	r1, r0
   82578:	f109 0908 	add.w	r9, r9, #8
   8257c:	3001      	adds	r0, #1
   8257e:	e508      	b.n	81f92 <_vfiprintf_r+0x35e>
   82580:	9b02      	ldr	r3, [sp, #8]
   82582:	2a01      	cmp	r2, #1
   82584:	f000 8097 	beq.w	826b6 <_vfiprintf_r+0xa82>
   82588:	2a02      	cmp	r2, #2
   8258a:	d10d      	bne.n	825a8 <_vfiprintf_r+0x974>
   8258c:	9302      	str	r3, [sp, #8]
   8258e:	2600      	movs	r6, #0
   82590:	2700      	movs	r7, #0
   82592:	e5b2      	b.n	820fa <_vfiprintf_r+0x4c6>
   82594:	aa0f      	add	r2, sp, #60	; 0x3c
   82596:	9904      	ldr	r1, [sp, #16]
   82598:	9806      	ldr	r0, [sp, #24]
   8259a:	f7ff fb0b 	bl	81bb4 <__sprint_r.part.0>
   8259e:	2800      	cmp	r0, #0
   825a0:	d0c9      	beq.n	82536 <_vfiprintf_r+0x902>
   825a2:	f8dd b010 	ldr.w	fp, [sp, #16]
   825a6:	e797      	b.n	824d8 <_vfiprintf_r+0x8a4>
   825a8:	2600      	movs	r6, #0
   825aa:	2700      	movs	r7, #0
   825ac:	9302      	str	r3, [sp, #8]
   825ae:	4651      	mov	r1, sl
   825b0:	e000      	b.n	825b4 <_vfiprintf_r+0x980>
   825b2:	4659      	mov	r1, fp
   825b4:	08f2      	lsrs	r2, r6, #3
   825b6:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   825ba:	08f8      	lsrs	r0, r7, #3
   825bc:	f006 0307 	and.w	r3, r6, #7
   825c0:	4607      	mov	r7, r0
   825c2:	4616      	mov	r6, r2
   825c4:	3330      	adds	r3, #48	; 0x30
   825c6:	ea56 0207 	orrs.w	r2, r6, r7
   825ca:	f801 3c01 	strb.w	r3, [r1, #-1]
   825ce:	f101 3bff 	add.w	fp, r1, #4294967295
   825d2:	d1ee      	bne.n	825b2 <_vfiprintf_r+0x97e>
   825d4:	9a02      	ldr	r2, [sp, #8]
   825d6:	07d6      	lsls	r6, r2, #31
   825d8:	f57f ad9f 	bpl.w	8211a <_vfiprintf_r+0x4e6>
   825dc:	2b30      	cmp	r3, #48	; 0x30
   825de:	f43f ad9c 	beq.w	8211a <_vfiprintf_r+0x4e6>
   825e2:	2330      	movs	r3, #48	; 0x30
   825e4:	3902      	subs	r1, #2
   825e6:	f80b 3c01 	strb.w	r3, [fp, #-1]
   825ea:	ebaa 0301 	sub.w	r3, sl, r1
   825ee:	9305      	str	r3, [sp, #20]
   825f0:	468b      	mov	fp, r1
   825f2:	e477      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   825f4:	9b03      	ldr	r3, [sp, #12]
   825f6:	9a08      	ldr	r2, [sp, #32]
   825f8:	428a      	cmp	r2, r1
   825fa:	bfac      	ite	ge
   825fc:	189b      	addge	r3, r3, r2
   825fe:	185b      	addlt	r3, r3, r1
   82600:	9303      	str	r3, [sp, #12]
   82602:	e798      	b.n	82536 <_vfiprintf_r+0x902>
   82604:	2202      	movs	r2, #2
   82606:	e44e      	b.n	81ea6 <_vfiprintf_r+0x272>
   82608:	2f00      	cmp	r7, #0
   8260a:	bf08      	it	eq
   8260c:	2e0a      	cmpeq	r6, #10
   8260e:	d351      	bcc.n	826b4 <_vfiprintf_r+0xa80>
   82610:	46d3      	mov	fp, sl
   82612:	4630      	mov	r0, r6
   82614:	4639      	mov	r1, r7
   82616:	220a      	movs	r2, #10
   82618:	2300      	movs	r3, #0
   8261a:	f001 ff29 	bl	84470 <__aeabi_uldivmod>
   8261e:	3230      	adds	r2, #48	; 0x30
   82620:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82624:	4630      	mov	r0, r6
   82626:	4639      	mov	r1, r7
   82628:	2300      	movs	r3, #0
   8262a:	220a      	movs	r2, #10
   8262c:	f001 ff20 	bl	84470 <__aeabi_uldivmod>
   82630:	4606      	mov	r6, r0
   82632:	460f      	mov	r7, r1
   82634:	ea56 0307 	orrs.w	r3, r6, r7
   82638:	d1eb      	bne.n	82612 <_vfiprintf_r+0x9de>
   8263a:	e56e      	b.n	8211a <_vfiprintf_r+0x4e6>
   8263c:	9405      	str	r4, [sp, #20]
   8263e:	46d3      	mov	fp, sl
   82640:	e450      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   82642:	aa0f      	add	r2, sp, #60	; 0x3c
   82644:	9904      	ldr	r1, [sp, #16]
   82646:	9806      	ldr	r0, [sp, #24]
   82648:	f7ff fab4 	bl	81bb4 <__sprint_r.part.0>
   8264c:	2800      	cmp	r0, #0
   8264e:	d1a8      	bne.n	825a2 <_vfiprintf_r+0x96e>
   82650:	46d1      	mov	r9, sl
   82652:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82654:	e75e      	b.n	82514 <_vfiprintf_r+0x8e0>
   82656:	aa0f      	add	r2, sp, #60	; 0x3c
   82658:	9904      	ldr	r1, [sp, #16]
   8265a:	9806      	ldr	r0, [sp, #24]
   8265c:	f7ff faaa 	bl	81bb4 <__sprint_r.part.0>
   82660:	2800      	cmp	r0, #0
   82662:	d19e      	bne.n	825a2 <_vfiprintf_r+0x96e>
   82664:	46d1      	mov	r9, sl
   82666:	f7ff bbbb 	b.w	81de0 <_vfiprintf_r+0x1ac>
   8266a:	bf00      	nop
   8266c:	0008481c 	.word	0x0008481c
   82670:	0008480c 	.word	0x0008480c
   82674:	3104      	adds	r1, #4
   82676:	6816      	ldr	r6, [r2, #0]
   82678:	2700      	movs	r7, #0
   8267a:	2201      	movs	r2, #1
   8267c:	9107      	str	r1, [sp, #28]
   8267e:	e412      	b.n	81ea6 <_vfiprintf_r+0x272>
   82680:	9807      	ldr	r0, [sp, #28]
   82682:	2700      	movs	r7, #0
   82684:	4601      	mov	r1, r0
   82686:	3104      	adds	r1, #4
   82688:	6806      	ldr	r6, [r0, #0]
   8268a:	9107      	str	r1, [sp, #28]
   8268c:	e40b      	b.n	81ea6 <_vfiprintf_r+0x272>
   8268e:	680e      	ldr	r6, [r1, #0]
   82690:	3104      	adds	r1, #4
   82692:	9107      	str	r1, [sp, #28]
   82694:	2700      	movs	r7, #0
   82696:	e592      	b.n	821be <_vfiprintf_r+0x58a>
   82698:	6816      	ldr	r6, [r2, #0]
   8269a:	3204      	adds	r2, #4
   8269c:	17f7      	asrs	r7, r6, #31
   8269e:	9207      	str	r2, [sp, #28]
   826a0:	4630      	mov	r0, r6
   826a2:	4639      	mov	r1, r7
   826a4:	e512      	b.n	820cc <_vfiprintf_r+0x498>
   826a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   826aa:	f000 fe75 	bl	83398 <__retarget_lock_release_recursive>
   826ae:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   826b2:	e71b      	b.n	824ec <_vfiprintf_r+0x8b8>
   826b4:	9b02      	ldr	r3, [sp, #8]
   826b6:	9302      	str	r3, [sp, #8]
   826b8:	2301      	movs	r3, #1
   826ba:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   826be:	3630      	adds	r6, #48	; 0x30
   826c0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   826c4:	9305      	str	r3, [sp, #20]
   826c6:	e40d      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   826c8:	aa0f      	add	r2, sp, #60	; 0x3c
   826ca:	9904      	ldr	r1, [sp, #16]
   826cc:	9806      	ldr	r0, [sp, #24]
   826ce:	f7ff fa71 	bl	81bb4 <__sprint_r.part.0>
   826d2:	2800      	cmp	r0, #0
   826d4:	f47f af65 	bne.w	825a2 <_vfiprintf_r+0x96e>
   826d8:	9910      	ldr	r1, [sp, #64]	; 0x40
   826da:	46d1      	mov	r9, sl
   826dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   826de:	1c48      	adds	r0, r1, #1
   826e0:	e457      	b.n	81f92 <_vfiprintf_r+0x35e>
   826e2:	aa0f      	add	r2, sp, #60	; 0x3c
   826e4:	9904      	ldr	r1, [sp, #16]
   826e6:	9806      	ldr	r0, [sp, #24]
   826e8:	f7ff fa64 	bl	81bb4 <__sprint_r.part.0>
   826ec:	2800      	cmp	r0, #0
   826ee:	f47f af58 	bne.w	825a2 <_vfiprintf_r+0x96e>
   826f2:	9910      	ldr	r1, [sp, #64]	; 0x40
   826f4:	46d1      	mov	r9, sl
   826f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   826f8:	1c48      	adds	r0, r1, #1
   826fa:	e644      	b.n	82386 <_vfiprintf_r+0x752>
   826fc:	2a00      	cmp	r2, #0
   826fe:	f040 8087 	bne.w	82810 <_vfiprintf_r+0xbdc>
   82702:	2001      	movs	r0, #1
   82704:	4611      	mov	r1, r2
   82706:	46d1      	mov	r9, sl
   82708:	e641      	b.n	8238e <_vfiprintf_r+0x75a>
   8270a:	aa0f      	add	r2, sp, #60	; 0x3c
   8270c:	9904      	ldr	r1, [sp, #16]
   8270e:	9806      	ldr	r0, [sp, #24]
   82710:	f7ff fa50 	bl	81bb4 <__sprint_r.part.0>
   82714:	2800      	cmp	r0, #0
   82716:	f47f af44 	bne.w	825a2 <_vfiprintf_r+0x96e>
   8271a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8271c:	46d1      	mov	r9, sl
   8271e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82720:	3001      	adds	r0, #1
   82722:	e668      	b.n	823f6 <_vfiprintf_r+0x7c2>
   82724:	46cb      	mov	fp, r9
   82726:	e6d7      	b.n	824d8 <_vfiprintf_r+0x8a4>
   82728:	9d07      	ldr	r5, [sp, #28]
   8272a:	3507      	adds	r5, #7
   8272c:	f025 0507 	bic.w	r5, r5, #7
   82730:	f105 0208 	add.w	r2, r5, #8
   82734:	e9d5 0100 	ldrd	r0, r1, [r5]
   82738:	9207      	str	r2, [sp, #28]
   8273a:	4606      	mov	r6, r0
   8273c:	460f      	mov	r7, r1
   8273e:	e4c5      	b.n	820cc <_vfiprintf_r+0x498>
   82740:	9d07      	ldr	r5, [sp, #28]
   82742:	3507      	adds	r5, #7
   82744:	f025 0207 	bic.w	r2, r5, #7
   82748:	f102 0108 	add.w	r1, r2, #8
   8274c:	e9d2 6700 	ldrd	r6, r7, [r2]
   82750:	9107      	str	r1, [sp, #28]
   82752:	2201      	movs	r2, #1
   82754:	f7ff bba7 	b.w	81ea6 <_vfiprintf_r+0x272>
   82758:	9d07      	ldr	r5, [sp, #28]
   8275a:	3507      	adds	r5, #7
   8275c:	f025 0207 	bic.w	r2, r5, #7
   82760:	f102 0108 	add.w	r1, r2, #8
   82764:	e9d2 6700 	ldrd	r6, r7, [r2]
   82768:	9107      	str	r1, [sp, #28]
   8276a:	2200      	movs	r2, #0
   8276c:	f7ff bb9b 	b.w	81ea6 <_vfiprintf_r+0x272>
   82770:	9d07      	ldr	r5, [sp, #28]
   82772:	3507      	adds	r5, #7
   82774:	f025 0107 	bic.w	r1, r5, #7
   82778:	f101 0008 	add.w	r0, r1, #8
   8277c:	9007      	str	r0, [sp, #28]
   8277e:	e9d1 6700 	ldrd	r6, r7, [r1]
   82782:	e51c      	b.n	821be <_vfiprintf_r+0x58a>
   82784:	46d3      	mov	fp, sl
   82786:	f7ff bbad 	b.w	81ee4 <_vfiprintf_r+0x2b0>
   8278a:	252d      	movs	r5, #45	; 0x2d
   8278c:	4276      	negs	r6, r6
   8278e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82792:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82796:	2201      	movs	r2, #1
   82798:	f7ff bb8a 	b.w	81eb0 <_vfiprintf_r+0x27c>
   8279c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8279e:	b9b3      	cbnz	r3, 827ce <_vfiprintf_r+0xb9a>
   827a0:	4611      	mov	r1, r2
   827a2:	2001      	movs	r0, #1
   827a4:	46d1      	mov	r9, sl
   827a6:	e5f2      	b.n	8238e <_vfiprintf_r+0x75a>
   827a8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   827ac:	f000 fdf4 	bl	83398 <__retarget_lock_release_recursive>
   827b0:	f04f 33ff 	mov.w	r3, #4294967295
   827b4:	9303      	str	r3, [sp, #12]
   827b6:	f7ff bb4c 	b.w	81e52 <_vfiprintf_r+0x21e>
   827ba:	aa0f      	add	r2, sp, #60	; 0x3c
   827bc:	9904      	ldr	r1, [sp, #16]
   827be:	9806      	ldr	r0, [sp, #24]
   827c0:	f7ff f9f8 	bl	81bb4 <__sprint_r.part.0>
   827c4:	2800      	cmp	r0, #0
   827c6:	f47f aeec 	bne.w	825a2 <_vfiprintf_r+0x96e>
   827ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   827cc:	e6aa      	b.n	82524 <_vfiprintf_r+0x8f0>
   827ce:	2202      	movs	r2, #2
   827d0:	ab0e      	add	r3, sp, #56	; 0x38
   827d2:	921d      	str	r2, [sp, #116]	; 0x74
   827d4:	931c      	str	r3, [sp, #112]	; 0x70
   827d6:	2001      	movs	r0, #1
   827d8:	46d1      	mov	r9, sl
   827da:	e5d0      	b.n	8237e <_vfiprintf_r+0x74a>
   827dc:	4d34      	ldr	r5, [pc, #208]	; (828b0 <_vfiprintf_r+0xc7c>)
   827de:	e5fd      	b.n	823dc <_vfiprintf_r+0x7a8>
   827e0:	9a07      	ldr	r2, [sp, #28]
   827e2:	4613      	mov	r3, r2
   827e4:	3304      	adds	r3, #4
   827e6:	9307      	str	r3, [sp, #28]
   827e8:	9b03      	ldr	r3, [sp, #12]
   827ea:	6811      	ldr	r1, [r2, #0]
   827ec:	17dd      	asrs	r5, r3, #31
   827ee:	461a      	mov	r2, r3
   827f0:	462b      	mov	r3, r5
   827f2:	e9c1 2300 	strd	r2, r3, [r1]
   827f6:	f7ff ba5a 	b.w	81cae <_vfiprintf_r+0x7a>
   827fa:	4658      	mov	r0, fp
   827fc:	9507      	str	r5, [sp, #28]
   827fe:	9302      	str	r3, [sp, #8]
   82800:	f001 fc3c 	bl	8407c <strlen>
   82804:	2400      	movs	r4, #0
   82806:	9005      	str	r0, [sp, #20]
   82808:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8280c:	f7ff bb6a 	b.w	81ee4 <_vfiprintf_r+0x2b0>
   82810:	aa0f      	add	r2, sp, #60	; 0x3c
   82812:	9904      	ldr	r1, [sp, #16]
   82814:	9806      	ldr	r0, [sp, #24]
   82816:	f7ff f9cd 	bl	81bb4 <__sprint_r.part.0>
   8281a:	2800      	cmp	r0, #0
   8281c:	f47f aec1 	bne.w	825a2 <_vfiprintf_r+0x96e>
   82820:	9910      	ldr	r1, [sp, #64]	; 0x40
   82822:	46d1      	mov	r9, sl
   82824:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82826:	1c48      	adds	r0, r1, #1
   82828:	e5b1      	b.n	8238e <_vfiprintf_r+0x75a>
   8282a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8282c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8282e:	3101      	adds	r1, #1
   82830:	4e20      	ldr	r6, [pc, #128]	; (828b4 <_vfiprintf_r+0xc80>)
   82832:	f7ff bb9c 	b.w	81f6e <_vfiprintf_r+0x33a>
   82836:	2c06      	cmp	r4, #6
   82838:	bf28      	it	cs
   8283a:	2406      	movcs	r4, #6
   8283c:	9507      	str	r5, [sp, #28]
   8283e:	9405      	str	r4, [sp, #20]
   82840:	9401      	str	r4, [sp, #4]
   82842:	f8df b074 	ldr.w	fp, [pc, #116]	; 828b8 <_vfiprintf_r+0xc84>
   82846:	e4e3      	b.n	82210 <_vfiprintf_r+0x5dc>
   82848:	9810      	ldr	r0, [sp, #64]	; 0x40
   8284a:	4e1a      	ldr	r6, [pc, #104]	; (828b4 <_vfiprintf_r+0xc80>)
   8284c:	3001      	adds	r0, #1
   8284e:	e60e      	b.n	8246e <_vfiprintf_r+0x83a>
   82850:	4686      	mov	lr, r0
   82852:	4d17      	ldr	r5, [pc, #92]	; (828b0 <_vfiprintf_r+0xc7c>)
   82854:	f7ff bbe2 	b.w	8201c <_vfiprintf_r+0x3e8>
   82858:	9405      	str	r4, [sp, #20]
   8285a:	9507      	str	r5, [sp, #28]
   8285c:	9302      	str	r3, [sp, #8]
   8285e:	4604      	mov	r4, r0
   82860:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82864:	f7ff bb3e 	b.w	81ee4 <_vfiprintf_r+0x2b0>
   82868:	9806      	ldr	r0, [sp, #24]
   8286a:	aa0f      	add	r2, sp, #60	; 0x3c
   8286c:	4659      	mov	r1, fp
   8286e:	f7ff f9a1 	bl	81bb4 <__sprint_r.part.0>
   82872:	2800      	cmp	r0, #0
   82874:	f43f ae2e 	beq.w	824d4 <_vfiprintf_r+0x8a0>
   82878:	e62e      	b.n	824d8 <_vfiprintf_r+0x8a4>
   8287a:	9907      	ldr	r1, [sp, #28]
   8287c:	f898 2001 	ldrb.w	r2, [r8, #1]
   82880:	680c      	ldr	r4, [r1, #0]
   82882:	3104      	adds	r1, #4
   82884:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   82888:	46b8      	mov	r8, r7
   8288a:	9107      	str	r1, [sp, #28]
   8288c:	f7ff ba44 	b.w	81d18 <_vfiprintf_r+0xe4>
   82890:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82894:	e4a7      	b.n	821e6 <_vfiprintf_r+0x5b2>
   82896:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8289a:	e521      	b.n	822e0 <_vfiprintf_r+0x6ac>
   8289c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   828a0:	e47c      	b.n	8219c <_vfiprintf_r+0x568>
   828a2:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   828a6:	e43f      	b.n	82128 <_vfiprintf_r+0x4f4>
   828a8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   828ac:	f7ff bbfa 	b.w	820a4 <_vfiprintf_r+0x470>
   828b0:	0008481c 	.word	0x0008481c
   828b4:	0008480c 	.word	0x0008480c
   828b8:	00084804 	.word	0x00084804

000828bc <__sbprintf>:
   828bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828c0:	460c      	mov	r4, r1
   828c2:	f04f 0e00 	mov.w	lr, #0
   828c6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   828ca:	4606      	mov	r6, r0
   828cc:	4617      	mov	r7, r2
   828ce:	4698      	mov	r8, r3
   828d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   828d2:	89e3      	ldrh	r3, [r4, #14]
   828d4:	8989      	ldrh	r1, [r1, #12]
   828d6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   828da:	f021 0102 	bic.w	r1, r1, #2
   828de:	9219      	str	r2, [sp, #100]	; 0x64
   828e0:	f8ad 300e 	strh.w	r3, [sp, #14]
   828e4:	69e2      	ldr	r2, [r4, #28]
   828e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   828e8:	f8ad 100c 	strh.w	r1, [sp, #12]
   828ec:	a816      	add	r0, sp, #88	; 0x58
   828ee:	a91a      	add	r1, sp, #104	; 0x68
   828f0:	f8cd e018 	str.w	lr, [sp, #24]
   828f4:	9207      	str	r2, [sp, #28]
   828f6:	9309      	str	r3, [sp, #36]	; 0x24
   828f8:	9100      	str	r1, [sp, #0]
   828fa:	9104      	str	r1, [sp, #16]
   828fc:	9502      	str	r5, [sp, #8]
   828fe:	9505      	str	r5, [sp, #20]
   82900:	f000 fd44 	bl	8338c <__retarget_lock_init_recursive>
   82904:	4643      	mov	r3, r8
   82906:	463a      	mov	r2, r7
   82908:	4669      	mov	r1, sp
   8290a:	4630      	mov	r0, r6
   8290c:	f7ff f992 	bl	81c34 <_vfiprintf_r>
   82910:	1e05      	subs	r5, r0, #0
   82912:	db07      	blt.n	82924 <__sbprintf+0x68>
   82914:	4630      	mov	r0, r6
   82916:	4669      	mov	r1, sp
   82918:	f000 f924 	bl	82b64 <_fflush_r>
   8291c:	2800      	cmp	r0, #0
   8291e:	bf18      	it	ne
   82920:	f04f 35ff 	movne.w	r5, #4294967295
   82924:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82928:	065b      	lsls	r3, r3, #25
   8292a:	d503      	bpl.n	82934 <__sbprintf+0x78>
   8292c:	89a3      	ldrh	r3, [r4, #12]
   8292e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82932:	81a3      	strh	r3, [r4, #12]
   82934:	9816      	ldr	r0, [sp, #88]	; 0x58
   82936:	f000 fd2b 	bl	83390 <__retarget_lock_close_recursive>
   8293a:	4628      	mov	r0, r5
   8293c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082944 <__swsetup_r>:
   82944:	b538      	push	{r3, r4, r5, lr}
   82946:	4b30      	ldr	r3, [pc, #192]	; (82a08 <__swsetup_r+0xc4>)
   82948:	4605      	mov	r5, r0
   8294a:	6818      	ldr	r0, [r3, #0]
   8294c:	460c      	mov	r4, r1
   8294e:	b110      	cbz	r0, 82956 <__swsetup_r+0x12>
   82950:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82952:	2b00      	cmp	r3, #0
   82954:	d038      	beq.n	829c8 <__swsetup_r+0x84>
   82956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8295a:	b293      	uxth	r3, r2
   8295c:	0718      	lsls	r0, r3, #28
   8295e:	d50c      	bpl.n	8297a <__swsetup_r+0x36>
   82960:	6920      	ldr	r0, [r4, #16]
   82962:	b1a8      	cbz	r0, 82990 <__swsetup_r+0x4c>
   82964:	f013 0201 	ands.w	r2, r3, #1
   82968:	d01e      	beq.n	829a8 <__swsetup_r+0x64>
   8296a:	2200      	movs	r2, #0
   8296c:	6963      	ldr	r3, [r4, #20]
   8296e:	60a2      	str	r2, [r4, #8]
   82970:	425b      	negs	r3, r3
   82972:	61a3      	str	r3, [r4, #24]
   82974:	b1f0      	cbz	r0, 829b4 <__swsetup_r+0x70>
   82976:	2000      	movs	r0, #0
   82978:	bd38      	pop	{r3, r4, r5, pc}
   8297a:	06d9      	lsls	r1, r3, #27
   8297c:	d53b      	bpl.n	829f6 <__swsetup_r+0xb2>
   8297e:	0758      	lsls	r0, r3, #29
   82980:	d425      	bmi.n	829ce <__swsetup_r+0x8a>
   82982:	6920      	ldr	r0, [r4, #16]
   82984:	f042 0308 	orr.w	r3, r2, #8
   82988:	81a3      	strh	r3, [r4, #12]
   8298a:	b29b      	uxth	r3, r3
   8298c:	2800      	cmp	r0, #0
   8298e:	d1e9      	bne.n	82964 <__swsetup_r+0x20>
   82990:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82994:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82998:	d0e4      	beq.n	82964 <__swsetup_r+0x20>
   8299a:	4628      	mov	r0, r5
   8299c:	4621      	mov	r1, r4
   8299e:	f000 fd2b 	bl	833f8 <__smakebuf_r>
   829a2:	89a3      	ldrh	r3, [r4, #12]
   829a4:	6920      	ldr	r0, [r4, #16]
   829a6:	e7dd      	b.n	82964 <__swsetup_r+0x20>
   829a8:	0799      	lsls	r1, r3, #30
   829aa:	bf58      	it	pl
   829ac:	6962      	ldrpl	r2, [r4, #20]
   829ae:	60a2      	str	r2, [r4, #8]
   829b0:	2800      	cmp	r0, #0
   829b2:	d1e0      	bne.n	82976 <__swsetup_r+0x32>
   829b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829b8:	061a      	lsls	r2, r3, #24
   829ba:	d5dd      	bpl.n	82978 <__swsetup_r+0x34>
   829bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   829c0:	81a3      	strh	r3, [r4, #12]
   829c2:	f04f 30ff 	mov.w	r0, #4294967295
   829c6:	bd38      	pop	{r3, r4, r5, pc}
   829c8:	f000 f924 	bl	82c14 <__sinit>
   829cc:	e7c3      	b.n	82956 <__swsetup_r+0x12>
   829ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
   829d0:	b151      	cbz	r1, 829e8 <__swsetup_r+0xa4>
   829d2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   829d6:	4299      	cmp	r1, r3
   829d8:	d004      	beq.n	829e4 <__swsetup_r+0xa0>
   829da:	4628      	mov	r0, r5
   829dc:	f000 fa40 	bl	82e60 <_free_r>
   829e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   829e4:	2300      	movs	r3, #0
   829e6:	6323      	str	r3, [r4, #48]	; 0x30
   829e8:	2300      	movs	r3, #0
   829ea:	6920      	ldr	r0, [r4, #16]
   829ec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   829f0:	e884 0009 	stmia.w	r4, {r0, r3}
   829f4:	e7c6      	b.n	82984 <__swsetup_r+0x40>
   829f6:	2309      	movs	r3, #9
   829f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   829fc:	602b      	str	r3, [r5, #0]
   829fe:	f04f 30ff 	mov.w	r0, #4294967295
   82a02:	81a2      	strh	r2, [r4, #12]
   82a04:	bd38      	pop	{r3, r4, r5, pc}
   82a06:	bf00      	nop
   82a08:	20070140 	.word	0x20070140

00082a0c <register_fini>:
   82a0c:	4b02      	ldr	r3, [pc, #8]	; (82a18 <register_fini+0xc>)
   82a0e:	b113      	cbz	r3, 82a16 <register_fini+0xa>
   82a10:	4802      	ldr	r0, [pc, #8]	; (82a1c <register_fini+0x10>)
   82a12:	f000 b805 	b.w	82a20 <atexit>
   82a16:	4770      	bx	lr
   82a18:	00000000 	.word	0x00000000
   82a1c:	00082c8d 	.word	0x00082c8d

00082a20 <atexit>:
   82a20:	2300      	movs	r3, #0
   82a22:	4601      	mov	r1, r0
   82a24:	461a      	mov	r2, r3
   82a26:	4618      	mov	r0, r3
   82a28:	f001 bbfa 	b.w	84220 <__register_exitproc>

00082a2c <__sflush_r>:
   82a2c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a34:	b29a      	uxth	r2, r3
   82a36:	460d      	mov	r5, r1
   82a38:	0711      	lsls	r1, r2, #28
   82a3a:	4680      	mov	r8, r0
   82a3c:	d43a      	bmi.n	82ab4 <__sflush_r+0x88>
   82a3e:	686a      	ldr	r2, [r5, #4]
   82a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82a44:	2a00      	cmp	r2, #0
   82a46:	81ab      	strh	r3, [r5, #12]
   82a48:	dd70      	ble.n	82b2c <__sflush_r+0x100>
   82a4a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82a4c:	2c00      	cmp	r4, #0
   82a4e:	d04a      	beq.n	82ae6 <__sflush_r+0xba>
   82a50:	2200      	movs	r2, #0
   82a52:	b29b      	uxth	r3, r3
   82a54:	f8d8 6000 	ldr.w	r6, [r8]
   82a58:	f8c8 2000 	str.w	r2, [r8]
   82a5c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82a60:	d068      	beq.n	82b34 <__sflush_r+0x108>
   82a62:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82a64:	075f      	lsls	r7, r3, #29
   82a66:	d505      	bpl.n	82a74 <__sflush_r+0x48>
   82a68:	6869      	ldr	r1, [r5, #4]
   82a6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82a6c:	1a52      	subs	r2, r2, r1
   82a6e:	b10b      	cbz	r3, 82a74 <__sflush_r+0x48>
   82a70:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82a72:	1ad2      	subs	r2, r2, r3
   82a74:	2300      	movs	r3, #0
   82a76:	69e9      	ldr	r1, [r5, #28]
   82a78:	4640      	mov	r0, r8
   82a7a:	47a0      	blx	r4
   82a7c:	1c44      	adds	r4, r0, #1
   82a7e:	d03d      	beq.n	82afc <__sflush_r+0xd0>
   82a80:	2100      	movs	r1, #0
   82a82:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82a86:	692a      	ldr	r2, [r5, #16]
   82a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82a8c:	81ab      	strh	r3, [r5, #12]
   82a8e:	04db      	lsls	r3, r3, #19
   82a90:	6069      	str	r1, [r5, #4]
   82a92:	602a      	str	r2, [r5, #0]
   82a94:	d448      	bmi.n	82b28 <__sflush_r+0xfc>
   82a96:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82a98:	f8c8 6000 	str.w	r6, [r8]
   82a9c:	b319      	cbz	r1, 82ae6 <__sflush_r+0xba>
   82a9e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82aa2:	4299      	cmp	r1, r3
   82aa4:	d002      	beq.n	82aac <__sflush_r+0x80>
   82aa6:	4640      	mov	r0, r8
   82aa8:	f000 f9da 	bl	82e60 <_free_r>
   82aac:	2000      	movs	r0, #0
   82aae:	6328      	str	r0, [r5, #48]	; 0x30
   82ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ab4:	692e      	ldr	r6, [r5, #16]
   82ab6:	b1b6      	cbz	r6, 82ae6 <__sflush_r+0xba>
   82ab8:	0791      	lsls	r1, r2, #30
   82aba:	bf18      	it	ne
   82abc:	2300      	movne	r3, #0
   82abe:	682c      	ldr	r4, [r5, #0]
   82ac0:	bf08      	it	eq
   82ac2:	696b      	ldreq	r3, [r5, #20]
   82ac4:	602e      	str	r6, [r5, #0]
   82ac6:	1ba4      	subs	r4, r4, r6
   82ac8:	60ab      	str	r3, [r5, #8]
   82aca:	e00a      	b.n	82ae2 <__sflush_r+0xb6>
   82acc:	4623      	mov	r3, r4
   82ace:	4632      	mov	r2, r6
   82ad0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82ad2:	69e9      	ldr	r1, [r5, #28]
   82ad4:	4640      	mov	r0, r8
   82ad6:	47b8      	blx	r7
   82ad8:	2800      	cmp	r0, #0
   82ada:	eba4 0400 	sub.w	r4, r4, r0
   82ade:	4406      	add	r6, r0
   82ae0:	dd04      	ble.n	82aec <__sflush_r+0xc0>
   82ae2:	2c00      	cmp	r4, #0
   82ae4:	dcf2      	bgt.n	82acc <__sflush_r+0xa0>
   82ae6:	2000      	movs	r0, #0
   82ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82aec:	89ab      	ldrh	r3, [r5, #12]
   82aee:	f04f 30ff 	mov.w	r0, #4294967295
   82af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82af6:	81ab      	strh	r3, [r5, #12]
   82af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82afc:	f8d8 4000 	ldr.w	r4, [r8]
   82b00:	2c1d      	cmp	r4, #29
   82b02:	d8f3      	bhi.n	82aec <__sflush_r+0xc0>
   82b04:	4b16      	ldr	r3, [pc, #88]	; (82b60 <__sflush_r+0x134>)
   82b06:	40e3      	lsrs	r3, r4
   82b08:	43db      	mvns	r3, r3
   82b0a:	f013 0301 	ands.w	r3, r3, #1
   82b0e:	d1ed      	bne.n	82aec <__sflush_r+0xc0>
   82b10:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82b14:	6929      	ldr	r1, [r5, #16]
   82b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82b1a:	81aa      	strh	r2, [r5, #12]
   82b1c:	04d2      	lsls	r2, r2, #19
   82b1e:	606b      	str	r3, [r5, #4]
   82b20:	6029      	str	r1, [r5, #0]
   82b22:	d5b8      	bpl.n	82a96 <__sflush_r+0x6a>
   82b24:	2c00      	cmp	r4, #0
   82b26:	d1b6      	bne.n	82a96 <__sflush_r+0x6a>
   82b28:	6528      	str	r0, [r5, #80]	; 0x50
   82b2a:	e7b4      	b.n	82a96 <__sflush_r+0x6a>
   82b2c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82b2e:	2a00      	cmp	r2, #0
   82b30:	dc8b      	bgt.n	82a4a <__sflush_r+0x1e>
   82b32:	e7d8      	b.n	82ae6 <__sflush_r+0xba>
   82b34:	2301      	movs	r3, #1
   82b36:	69e9      	ldr	r1, [r5, #28]
   82b38:	4640      	mov	r0, r8
   82b3a:	47a0      	blx	r4
   82b3c:	1c43      	adds	r3, r0, #1
   82b3e:	4602      	mov	r2, r0
   82b40:	d002      	beq.n	82b48 <__sflush_r+0x11c>
   82b42:	89ab      	ldrh	r3, [r5, #12]
   82b44:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82b46:	e78d      	b.n	82a64 <__sflush_r+0x38>
   82b48:	f8d8 3000 	ldr.w	r3, [r8]
   82b4c:	2b00      	cmp	r3, #0
   82b4e:	d0f8      	beq.n	82b42 <__sflush_r+0x116>
   82b50:	2b1d      	cmp	r3, #29
   82b52:	d001      	beq.n	82b58 <__sflush_r+0x12c>
   82b54:	2b16      	cmp	r3, #22
   82b56:	d1c9      	bne.n	82aec <__sflush_r+0xc0>
   82b58:	f8c8 6000 	str.w	r6, [r8]
   82b5c:	e7c3      	b.n	82ae6 <__sflush_r+0xba>
   82b5e:	bf00      	nop
   82b60:	20400001 	.word	0x20400001

00082b64 <_fflush_r>:
   82b64:	b538      	push	{r3, r4, r5, lr}
   82b66:	460d      	mov	r5, r1
   82b68:	4604      	mov	r4, r0
   82b6a:	b108      	cbz	r0, 82b70 <_fflush_r+0xc>
   82b6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82b6e:	b1bb      	cbz	r3, 82ba0 <_fflush_r+0x3c>
   82b70:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82b74:	b188      	cbz	r0, 82b9a <_fflush_r+0x36>
   82b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82b78:	07db      	lsls	r3, r3, #31
   82b7a:	d401      	bmi.n	82b80 <_fflush_r+0x1c>
   82b7c:	0581      	lsls	r1, r0, #22
   82b7e:	d517      	bpl.n	82bb0 <_fflush_r+0x4c>
   82b80:	4620      	mov	r0, r4
   82b82:	4629      	mov	r1, r5
   82b84:	f7ff ff52 	bl	82a2c <__sflush_r>
   82b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82b8a:	4604      	mov	r4, r0
   82b8c:	07da      	lsls	r2, r3, #31
   82b8e:	d402      	bmi.n	82b96 <_fflush_r+0x32>
   82b90:	89ab      	ldrh	r3, [r5, #12]
   82b92:	059b      	lsls	r3, r3, #22
   82b94:	d507      	bpl.n	82ba6 <_fflush_r+0x42>
   82b96:	4620      	mov	r0, r4
   82b98:	bd38      	pop	{r3, r4, r5, pc}
   82b9a:	4604      	mov	r4, r0
   82b9c:	4620      	mov	r0, r4
   82b9e:	bd38      	pop	{r3, r4, r5, pc}
   82ba0:	f000 f838 	bl	82c14 <__sinit>
   82ba4:	e7e4      	b.n	82b70 <_fflush_r+0xc>
   82ba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82ba8:	f000 fbf6 	bl	83398 <__retarget_lock_release_recursive>
   82bac:	4620      	mov	r0, r4
   82bae:	bd38      	pop	{r3, r4, r5, pc}
   82bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82bb2:	f000 fbef 	bl	83394 <__retarget_lock_acquire_recursive>
   82bb6:	e7e3      	b.n	82b80 <_fflush_r+0x1c>

00082bb8 <_cleanup_r>:
   82bb8:	4901      	ldr	r1, [pc, #4]	; (82bc0 <_cleanup_r+0x8>)
   82bba:	f000 bbb1 	b.w	83320 <_fwalk_reent>
   82bbe:	bf00      	nop
   82bc0:	00084309 	.word	0x00084309

00082bc4 <std.isra.0>:
   82bc4:	2300      	movs	r3, #0
   82bc6:	b510      	push	{r4, lr}
   82bc8:	4604      	mov	r4, r0
   82bca:	8181      	strh	r1, [r0, #12]
   82bcc:	81c2      	strh	r2, [r0, #14]
   82bce:	6003      	str	r3, [r0, #0]
   82bd0:	6043      	str	r3, [r0, #4]
   82bd2:	6083      	str	r3, [r0, #8]
   82bd4:	6643      	str	r3, [r0, #100]	; 0x64
   82bd6:	6103      	str	r3, [r0, #16]
   82bd8:	6143      	str	r3, [r0, #20]
   82bda:	6183      	str	r3, [r0, #24]
   82bdc:	4619      	mov	r1, r3
   82bde:	2208      	movs	r2, #8
   82be0:	305c      	adds	r0, #92	; 0x5c
   82be2:	f7fe fec9 	bl	81978 <memset>
   82be6:	4807      	ldr	r0, [pc, #28]	; (82c04 <std.isra.0+0x40>)
   82be8:	4907      	ldr	r1, [pc, #28]	; (82c08 <std.isra.0+0x44>)
   82bea:	4a08      	ldr	r2, [pc, #32]	; (82c0c <std.isra.0+0x48>)
   82bec:	4b08      	ldr	r3, [pc, #32]	; (82c10 <std.isra.0+0x4c>)
   82bee:	6220      	str	r0, [r4, #32]
   82bf0:	61e4      	str	r4, [r4, #28]
   82bf2:	6261      	str	r1, [r4, #36]	; 0x24
   82bf4:	62a2      	str	r2, [r4, #40]	; 0x28
   82bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
   82bf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c00:	f000 bbc4 	b.w	8338c <__retarget_lock_init_recursive>
   82c04:	00083ff5 	.word	0x00083ff5
   82c08:	00084019 	.word	0x00084019
   82c0c:	00084055 	.word	0x00084055
   82c10:	00084075 	.word	0x00084075

00082c14 <__sinit>:
   82c14:	b510      	push	{r4, lr}
   82c16:	4604      	mov	r4, r0
   82c18:	4814      	ldr	r0, [pc, #80]	; (82c6c <__sinit+0x58>)
   82c1a:	f000 fbbb 	bl	83394 <__retarget_lock_acquire_recursive>
   82c1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82c20:	b9fa      	cbnz	r2, 82c62 <__sinit+0x4e>
   82c22:	2003      	movs	r0, #3
   82c24:	4912      	ldr	r1, [pc, #72]	; (82c70 <__sinit+0x5c>)
   82c26:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82c2a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82c2e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82c32:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82c36:	63e1      	str	r1, [r4, #60]	; 0x3c
   82c38:	6860      	ldr	r0, [r4, #4]
   82c3a:	2104      	movs	r1, #4
   82c3c:	f7ff ffc2 	bl	82bc4 <std.isra.0>
   82c40:	68a0      	ldr	r0, [r4, #8]
   82c42:	2201      	movs	r2, #1
   82c44:	2109      	movs	r1, #9
   82c46:	f7ff ffbd 	bl	82bc4 <std.isra.0>
   82c4a:	68e0      	ldr	r0, [r4, #12]
   82c4c:	2202      	movs	r2, #2
   82c4e:	2112      	movs	r1, #18
   82c50:	f7ff ffb8 	bl	82bc4 <std.isra.0>
   82c54:	2301      	movs	r3, #1
   82c56:	4805      	ldr	r0, [pc, #20]	; (82c6c <__sinit+0x58>)
   82c58:	63a3      	str	r3, [r4, #56]	; 0x38
   82c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c5e:	f000 bb9b 	b.w	83398 <__retarget_lock_release_recursive>
   82c62:	4802      	ldr	r0, [pc, #8]	; (82c6c <__sinit+0x58>)
   82c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c68:	f000 bb96 	b.w	83398 <__retarget_lock_release_recursive>
   82c6c:	20070c80 	.word	0x20070c80
   82c70:	00082bb9 	.word	0x00082bb9

00082c74 <__sfp_lock_acquire>:
   82c74:	4801      	ldr	r0, [pc, #4]	; (82c7c <__sfp_lock_acquire+0x8>)
   82c76:	f000 bb8d 	b.w	83394 <__retarget_lock_acquire_recursive>
   82c7a:	bf00      	nop
   82c7c:	20070c94 	.word	0x20070c94

00082c80 <__sfp_lock_release>:
   82c80:	4801      	ldr	r0, [pc, #4]	; (82c88 <__sfp_lock_release+0x8>)
   82c82:	f000 bb89 	b.w	83398 <__retarget_lock_release_recursive>
   82c86:	bf00      	nop
   82c88:	20070c94 	.word	0x20070c94

00082c8c <__libc_fini_array>:
   82c8c:	b538      	push	{r3, r4, r5, lr}
   82c8e:	4c0a      	ldr	r4, [pc, #40]	; (82cb8 <__libc_fini_array+0x2c>)
   82c90:	4d0a      	ldr	r5, [pc, #40]	; (82cbc <__libc_fini_array+0x30>)
   82c92:	1b64      	subs	r4, r4, r5
   82c94:	10a4      	asrs	r4, r4, #2
   82c96:	d00a      	beq.n	82cae <__libc_fini_array+0x22>
   82c98:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82c9c:	3b01      	subs	r3, #1
   82c9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82ca2:	3c01      	subs	r4, #1
   82ca4:	f855 3904 	ldr.w	r3, [r5], #-4
   82ca8:	4798      	blx	r3
   82caa:	2c00      	cmp	r4, #0
   82cac:	d1f9      	bne.n	82ca2 <__libc_fini_array+0x16>
   82cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82cb2:	f001 be4f 	b.w	84954 <_fini>
   82cb6:	bf00      	nop
   82cb8:	00084964 	.word	0x00084964
   82cbc:	00084960 	.word	0x00084960

00082cc0 <__fputwc>:
   82cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82cc4:	b083      	sub	sp, #12
   82cc6:	4607      	mov	r7, r0
   82cc8:	4688      	mov	r8, r1
   82cca:	4614      	mov	r4, r2
   82ccc:	f000 fb50 	bl	83370 <__locale_mb_cur_max>
   82cd0:	2801      	cmp	r0, #1
   82cd2:	d033      	beq.n	82d3c <__fputwc+0x7c>
   82cd4:	4642      	mov	r2, r8
   82cd6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82cda:	a901      	add	r1, sp, #4
   82cdc:	4638      	mov	r0, r7
   82cde:	f001 fa53 	bl	84188 <_wcrtomb_r>
   82ce2:	1c42      	adds	r2, r0, #1
   82ce4:	4606      	mov	r6, r0
   82ce6:	d022      	beq.n	82d2e <__fputwc+0x6e>
   82ce8:	b390      	cbz	r0, 82d50 <__fputwc+0x90>
   82cea:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82cee:	2500      	movs	r5, #0
   82cf0:	f10d 0904 	add.w	r9, sp, #4
   82cf4:	e008      	b.n	82d08 <__fputwc+0x48>
   82cf6:	6823      	ldr	r3, [r4, #0]
   82cf8:	1c5a      	adds	r2, r3, #1
   82cfa:	6022      	str	r2, [r4, #0]
   82cfc:	7019      	strb	r1, [r3, #0]
   82cfe:	3501      	adds	r5, #1
   82d00:	42b5      	cmp	r5, r6
   82d02:	d225      	bcs.n	82d50 <__fputwc+0x90>
   82d04:	f815 1009 	ldrb.w	r1, [r5, r9]
   82d08:	68a3      	ldr	r3, [r4, #8]
   82d0a:	3b01      	subs	r3, #1
   82d0c:	2b00      	cmp	r3, #0
   82d0e:	60a3      	str	r3, [r4, #8]
   82d10:	daf1      	bge.n	82cf6 <__fputwc+0x36>
   82d12:	69a2      	ldr	r2, [r4, #24]
   82d14:	4293      	cmp	r3, r2
   82d16:	db01      	blt.n	82d1c <__fputwc+0x5c>
   82d18:	290a      	cmp	r1, #10
   82d1a:	d1ec      	bne.n	82cf6 <__fputwc+0x36>
   82d1c:	4622      	mov	r2, r4
   82d1e:	4638      	mov	r0, r7
   82d20:	f001 f9da 	bl	840d8 <__swbuf_r>
   82d24:	1c43      	adds	r3, r0, #1
   82d26:	d1ea      	bne.n	82cfe <__fputwc+0x3e>
   82d28:	b003      	add	sp, #12
   82d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82d2e:	89a3      	ldrh	r3, [r4, #12]
   82d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d34:	81a3      	strh	r3, [r4, #12]
   82d36:	b003      	add	sp, #12
   82d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82d3c:	f108 33ff 	add.w	r3, r8, #4294967295
   82d40:	2bfe      	cmp	r3, #254	; 0xfe
   82d42:	d8c7      	bhi.n	82cd4 <__fputwc+0x14>
   82d44:	fa5f f188 	uxtb.w	r1, r8
   82d48:	4606      	mov	r6, r0
   82d4a:	f88d 1004 	strb.w	r1, [sp, #4]
   82d4e:	e7ce      	b.n	82cee <__fputwc+0x2e>
   82d50:	4640      	mov	r0, r8
   82d52:	b003      	add	sp, #12
   82d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00082d58 <_fputwc_r>:
   82d58:	b530      	push	{r4, r5, lr}
   82d5a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82d5c:	4614      	mov	r4, r2
   82d5e:	f013 0f01 	tst.w	r3, #1
   82d62:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   82d66:	b083      	sub	sp, #12
   82d68:	4605      	mov	r5, r0
   82d6a:	b29a      	uxth	r2, r3
   82d6c:	d101      	bne.n	82d72 <_fputwc_r+0x1a>
   82d6e:	0590      	lsls	r0, r2, #22
   82d70:	d51c      	bpl.n	82dac <_fputwc_r+0x54>
   82d72:	0490      	lsls	r0, r2, #18
   82d74:	d406      	bmi.n	82d84 <_fputwc_r+0x2c>
   82d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82d80:	81a3      	strh	r3, [r4, #12]
   82d82:	6662      	str	r2, [r4, #100]	; 0x64
   82d84:	4628      	mov	r0, r5
   82d86:	4622      	mov	r2, r4
   82d88:	f7ff ff9a 	bl	82cc0 <__fputwc>
   82d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82d8e:	4605      	mov	r5, r0
   82d90:	07da      	lsls	r2, r3, #31
   82d92:	d402      	bmi.n	82d9a <_fputwc_r+0x42>
   82d94:	89a3      	ldrh	r3, [r4, #12]
   82d96:	059b      	lsls	r3, r3, #22
   82d98:	d502      	bpl.n	82da0 <_fputwc_r+0x48>
   82d9a:	4628      	mov	r0, r5
   82d9c:	b003      	add	sp, #12
   82d9e:	bd30      	pop	{r4, r5, pc}
   82da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82da2:	f000 faf9 	bl	83398 <__retarget_lock_release_recursive>
   82da6:	4628      	mov	r0, r5
   82da8:	b003      	add	sp, #12
   82daa:	bd30      	pop	{r4, r5, pc}
   82dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82dae:	9101      	str	r1, [sp, #4]
   82db0:	f000 faf0 	bl	83394 <__retarget_lock_acquire_recursive>
   82db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82db8:	9901      	ldr	r1, [sp, #4]
   82dba:	b29a      	uxth	r2, r3
   82dbc:	e7d9      	b.n	82d72 <_fputwc_r+0x1a>
   82dbe:	bf00      	nop

00082dc0 <_malloc_trim_r>:
   82dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82dc2:	460c      	mov	r4, r1
   82dc4:	4f23      	ldr	r7, [pc, #140]	; (82e54 <_malloc_trim_r+0x94>)
   82dc6:	4606      	mov	r6, r0
   82dc8:	f000 ff40 	bl	83c4c <__malloc_lock>
   82dcc:	68bb      	ldr	r3, [r7, #8]
   82dce:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82dd2:	685d      	ldr	r5, [r3, #4]
   82dd4:	310f      	adds	r1, #15
   82dd6:	f025 0503 	bic.w	r5, r5, #3
   82dda:	4429      	add	r1, r5
   82ddc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82de0:	f021 010f 	bic.w	r1, r1, #15
   82de4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82de8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82dec:	db07      	blt.n	82dfe <_malloc_trim_r+0x3e>
   82dee:	2100      	movs	r1, #0
   82df0:	4630      	mov	r0, r6
   82df2:	f001 f8ed 	bl	83fd0 <_sbrk_r>
   82df6:	68bb      	ldr	r3, [r7, #8]
   82df8:	442b      	add	r3, r5
   82dfa:	4298      	cmp	r0, r3
   82dfc:	d004      	beq.n	82e08 <_malloc_trim_r+0x48>
   82dfe:	4630      	mov	r0, r6
   82e00:	f000 ff2a 	bl	83c58 <__malloc_unlock>
   82e04:	2000      	movs	r0, #0
   82e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e08:	4261      	negs	r1, r4
   82e0a:	4630      	mov	r0, r6
   82e0c:	f001 f8e0 	bl	83fd0 <_sbrk_r>
   82e10:	3001      	adds	r0, #1
   82e12:	d00d      	beq.n	82e30 <_malloc_trim_r+0x70>
   82e14:	4b10      	ldr	r3, [pc, #64]	; (82e58 <_malloc_trim_r+0x98>)
   82e16:	68ba      	ldr	r2, [r7, #8]
   82e18:	6819      	ldr	r1, [r3, #0]
   82e1a:	1b2d      	subs	r5, r5, r4
   82e1c:	f045 0501 	orr.w	r5, r5, #1
   82e20:	4630      	mov	r0, r6
   82e22:	1b09      	subs	r1, r1, r4
   82e24:	6055      	str	r5, [r2, #4]
   82e26:	6019      	str	r1, [r3, #0]
   82e28:	f000 ff16 	bl	83c58 <__malloc_unlock>
   82e2c:	2001      	movs	r0, #1
   82e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e30:	2100      	movs	r1, #0
   82e32:	4630      	mov	r0, r6
   82e34:	f001 f8cc 	bl	83fd0 <_sbrk_r>
   82e38:	68ba      	ldr	r2, [r7, #8]
   82e3a:	1a83      	subs	r3, r0, r2
   82e3c:	2b0f      	cmp	r3, #15
   82e3e:	ddde      	ble.n	82dfe <_malloc_trim_r+0x3e>
   82e40:	4c06      	ldr	r4, [pc, #24]	; (82e5c <_malloc_trim_r+0x9c>)
   82e42:	4905      	ldr	r1, [pc, #20]	; (82e58 <_malloc_trim_r+0x98>)
   82e44:	6824      	ldr	r4, [r4, #0]
   82e46:	f043 0301 	orr.w	r3, r3, #1
   82e4a:	1b00      	subs	r0, r0, r4
   82e4c:	6053      	str	r3, [r2, #4]
   82e4e:	6008      	str	r0, [r1, #0]
   82e50:	e7d5      	b.n	82dfe <_malloc_trim_r+0x3e>
   82e52:	bf00      	nop
   82e54:	200706e0 	.word	0x200706e0
   82e58:	20070c34 	.word	0x20070c34
   82e5c:	20070ae8 	.word	0x20070ae8

00082e60 <_free_r>:
   82e60:	2900      	cmp	r1, #0
   82e62:	d044      	beq.n	82eee <_free_r+0x8e>
   82e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e68:	460d      	mov	r5, r1
   82e6a:	4680      	mov	r8, r0
   82e6c:	f000 feee 	bl	83c4c <__malloc_lock>
   82e70:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82e74:	4969      	ldr	r1, [pc, #420]	; (8301c <_free_r+0x1bc>)
   82e76:	f1a5 0408 	sub.w	r4, r5, #8
   82e7a:	f027 0301 	bic.w	r3, r7, #1
   82e7e:	18e2      	adds	r2, r4, r3
   82e80:	688e      	ldr	r6, [r1, #8]
   82e82:	6850      	ldr	r0, [r2, #4]
   82e84:	42b2      	cmp	r2, r6
   82e86:	f020 0003 	bic.w	r0, r0, #3
   82e8a:	d05e      	beq.n	82f4a <_free_r+0xea>
   82e8c:	07fe      	lsls	r6, r7, #31
   82e8e:	6050      	str	r0, [r2, #4]
   82e90:	d40b      	bmi.n	82eaa <_free_r+0x4a>
   82e92:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82e96:	f101 0e08 	add.w	lr, r1, #8
   82e9a:	1be4      	subs	r4, r4, r7
   82e9c:	68a5      	ldr	r5, [r4, #8]
   82e9e:	443b      	add	r3, r7
   82ea0:	4575      	cmp	r5, lr
   82ea2:	d06d      	beq.n	82f80 <_free_r+0x120>
   82ea4:	68e7      	ldr	r7, [r4, #12]
   82ea6:	60ef      	str	r7, [r5, #12]
   82ea8:	60bd      	str	r5, [r7, #8]
   82eaa:	1815      	adds	r5, r2, r0
   82eac:	686d      	ldr	r5, [r5, #4]
   82eae:	07ed      	lsls	r5, r5, #31
   82eb0:	d53e      	bpl.n	82f30 <_free_r+0xd0>
   82eb2:	f043 0201 	orr.w	r2, r3, #1
   82eb6:	6062      	str	r2, [r4, #4]
   82eb8:	50e3      	str	r3, [r4, r3]
   82eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82ebe:	d217      	bcs.n	82ef0 <_free_r+0x90>
   82ec0:	2201      	movs	r2, #1
   82ec2:	08db      	lsrs	r3, r3, #3
   82ec4:	1098      	asrs	r0, r3, #2
   82ec6:	684d      	ldr	r5, [r1, #4]
   82ec8:	4413      	add	r3, r2
   82eca:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82ece:	4082      	lsls	r2, r0
   82ed0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82ed4:	432a      	orrs	r2, r5
   82ed6:	3808      	subs	r0, #8
   82ed8:	60e0      	str	r0, [r4, #12]
   82eda:	60a7      	str	r7, [r4, #8]
   82edc:	604a      	str	r2, [r1, #4]
   82ede:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82ee2:	60fc      	str	r4, [r7, #12]
   82ee4:	4640      	mov	r0, r8
   82ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82eea:	f000 beb5 	b.w	83c58 <__malloc_unlock>
   82eee:	4770      	bx	lr
   82ef0:	0a5a      	lsrs	r2, r3, #9
   82ef2:	2a04      	cmp	r2, #4
   82ef4:	d852      	bhi.n	82f9c <_free_r+0x13c>
   82ef6:	099a      	lsrs	r2, r3, #6
   82ef8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82efc:	00ff      	lsls	r7, r7, #3
   82efe:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82f02:	19c8      	adds	r0, r1, r7
   82f04:	59ca      	ldr	r2, [r1, r7]
   82f06:	3808      	subs	r0, #8
   82f08:	4290      	cmp	r0, r2
   82f0a:	d04f      	beq.n	82fac <_free_r+0x14c>
   82f0c:	6851      	ldr	r1, [r2, #4]
   82f0e:	f021 0103 	bic.w	r1, r1, #3
   82f12:	428b      	cmp	r3, r1
   82f14:	d232      	bcs.n	82f7c <_free_r+0x11c>
   82f16:	6892      	ldr	r2, [r2, #8]
   82f18:	4290      	cmp	r0, r2
   82f1a:	d1f7      	bne.n	82f0c <_free_r+0xac>
   82f1c:	68c3      	ldr	r3, [r0, #12]
   82f1e:	60a0      	str	r0, [r4, #8]
   82f20:	60e3      	str	r3, [r4, #12]
   82f22:	609c      	str	r4, [r3, #8]
   82f24:	60c4      	str	r4, [r0, #12]
   82f26:	4640      	mov	r0, r8
   82f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82f2c:	f000 be94 	b.w	83c58 <__malloc_unlock>
   82f30:	6895      	ldr	r5, [r2, #8]
   82f32:	4f3b      	ldr	r7, [pc, #236]	; (83020 <_free_r+0x1c0>)
   82f34:	4403      	add	r3, r0
   82f36:	42bd      	cmp	r5, r7
   82f38:	d040      	beq.n	82fbc <_free_r+0x15c>
   82f3a:	68d0      	ldr	r0, [r2, #12]
   82f3c:	f043 0201 	orr.w	r2, r3, #1
   82f40:	60e8      	str	r0, [r5, #12]
   82f42:	6085      	str	r5, [r0, #8]
   82f44:	6062      	str	r2, [r4, #4]
   82f46:	50e3      	str	r3, [r4, r3]
   82f48:	e7b7      	b.n	82eba <_free_r+0x5a>
   82f4a:	07ff      	lsls	r7, r7, #31
   82f4c:	4403      	add	r3, r0
   82f4e:	d407      	bmi.n	82f60 <_free_r+0x100>
   82f50:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82f54:	1b64      	subs	r4, r4, r5
   82f56:	68e2      	ldr	r2, [r4, #12]
   82f58:	68a0      	ldr	r0, [r4, #8]
   82f5a:	442b      	add	r3, r5
   82f5c:	60c2      	str	r2, [r0, #12]
   82f5e:	6090      	str	r0, [r2, #8]
   82f60:	4a30      	ldr	r2, [pc, #192]	; (83024 <_free_r+0x1c4>)
   82f62:	f043 0001 	orr.w	r0, r3, #1
   82f66:	6812      	ldr	r2, [r2, #0]
   82f68:	6060      	str	r0, [r4, #4]
   82f6a:	4293      	cmp	r3, r2
   82f6c:	608c      	str	r4, [r1, #8]
   82f6e:	d3b9      	bcc.n	82ee4 <_free_r+0x84>
   82f70:	4b2d      	ldr	r3, [pc, #180]	; (83028 <_free_r+0x1c8>)
   82f72:	4640      	mov	r0, r8
   82f74:	6819      	ldr	r1, [r3, #0]
   82f76:	f7ff ff23 	bl	82dc0 <_malloc_trim_r>
   82f7a:	e7b3      	b.n	82ee4 <_free_r+0x84>
   82f7c:	4610      	mov	r0, r2
   82f7e:	e7cd      	b.n	82f1c <_free_r+0xbc>
   82f80:	1811      	adds	r1, r2, r0
   82f82:	6849      	ldr	r1, [r1, #4]
   82f84:	07c9      	lsls	r1, r1, #31
   82f86:	d444      	bmi.n	83012 <_free_r+0x1b2>
   82f88:	6891      	ldr	r1, [r2, #8]
   82f8a:	4403      	add	r3, r0
   82f8c:	68d2      	ldr	r2, [r2, #12]
   82f8e:	f043 0001 	orr.w	r0, r3, #1
   82f92:	60ca      	str	r2, [r1, #12]
   82f94:	6091      	str	r1, [r2, #8]
   82f96:	6060      	str	r0, [r4, #4]
   82f98:	50e3      	str	r3, [r4, r3]
   82f9a:	e7a3      	b.n	82ee4 <_free_r+0x84>
   82f9c:	2a14      	cmp	r2, #20
   82f9e:	d816      	bhi.n	82fce <_free_r+0x16e>
   82fa0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82fa4:	00ff      	lsls	r7, r7, #3
   82fa6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82faa:	e7aa      	b.n	82f02 <_free_r+0xa2>
   82fac:	2301      	movs	r3, #1
   82fae:	10aa      	asrs	r2, r5, #2
   82fb0:	684d      	ldr	r5, [r1, #4]
   82fb2:	4093      	lsls	r3, r2
   82fb4:	432b      	orrs	r3, r5
   82fb6:	604b      	str	r3, [r1, #4]
   82fb8:	4603      	mov	r3, r0
   82fba:	e7b0      	b.n	82f1e <_free_r+0xbe>
   82fbc:	f043 0201 	orr.w	r2, r3, #1
   82fc0:	614c      	str	r4, [r1, #20]
   82fc2:	610c      	str	r4, [r1, #16]
   82fc4:	60e5      	str	r5, [r4, #12]
   82fc6:	60a5      	str	r5, [r4, #8]
   82fc8:	6062      	str	r2, [r4, #4]
   82fca:	50e3      	str	r3, [r4, r3]
   82fcc:	e78a      	b.n	82ee4 <_free_r+0x84>
   82fce:	2a54      	cmp	r2, #84	; 0x54
   82fd0:	d806      	bhi.n	82fe0 <_free_r+0x180>
   82fd2:	0b1a      	lsrs	r2, r3, #12
   82fd4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82fd8:	00ff      	lsls	r7, r7, #3
   82fda:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82fde:	e790      	b.n	82f02 <_free_r+0xa2>
   82fe0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82fe4:	d806      	bhi.n	82ff4 <_free_r+0x194>
   82fe6:	0bda      	lsrs	r2, r3, #15
   82fe8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82fec:	00ff      	lsls	r7, r7, #3
   82fee:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82ff2:	e786      	b.n	82f02 <_free_r+0xa2>
   82ff4:	f240 5054 	movw	r0, #1364	; 0x554
   82ff8:	4282      	cmp	r2, r0
   82ffa:	d806      	bhi.n	8300a <_free_r+0x1aa>
   82ffc:	0c9a      	lsrs	r2, r3, #18
   82ffe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83002:	00ff      	lsls	r7, r7, #3
   83004:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83008:	e77b      	b.n	82f02 <_free_r+0xa2>
   8300a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8300e:	257e      	movs	r5, #126	; 0x7e
   83010:	e777      	b.n	82f02 <_free_r+0xa2>
   83012:	f043 0101 	orr.w	r1, r3, #1
   83016:	6061      	str	r1, [r4, #4]
   83018:	6013      	str	r3, [r2, #0]
   8301a:	e763      	b.n	82ee4 <_free_r+0x84>
   8301c:	200706e0 	.word	0x200706e0
   83020:	200706e8 	.word	0x200706e8
   83024:	20070aec 	.word	0x20070aec
   83028:	20070c64 	.word	0x20070c64

0008302c <__sfvwrite_r>:
   8302c:	6893      	ldr	r3, [r2, #8]
   8302e:	2b00      	cmp	r3, #0
   83030:	d071      	beq.n	83116 <__sfvwrite_r+0xea>
   83032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83036:	898b      	ldrh	r3, [r1, #12]
   83038:	b083      	sub	sp, #12
   8303a:	460c      	mov	r4, r1
   8303c:	0719      	lsls	r1, r3, #28
   8303e:	9000      	str	r0, [sp, #0]
   83040:	4616      	mov	r6, r2
   83042:	d525      	bpl.n	83090 <__sfvwrite_r+0x64>
   83044:	6922      	ldr	r2, [r4, #16]
   83046:	b31a      	cbz	r2, 83090 <__sfvwrite_r+0x64>
   83048:	f013 0002 	ands.w	r0, r3, #2
   8304c:	6835      	ldr	r5, [r6, #0]
   8304e:	d02b      	beq.n	830a8 <__sfvwrite_r+0x7c>
   83050:	f04f 0900 	mov.w	r9, #0
   83054:	46b0      	mov	r8, r6
   83056:	464f      	mov	r7, r9
   83058:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8331c <__sfvwrite_r+0x2f0>
   8305c:	2f00      	cmp	r7, #0
   8305e:	d055      	beq.n	8310c <__sfvwrite_r+0xe0>
   83060:	4557      	cmp	r7, sl
   83062:	463b      	mov	r3, r7
   83064:	464a      	mov	r2, r9
   83066:	bf28      	it	cs
   83068:	4653      	movcs	r3, sl
   8306a:	69e1      	ldr	r1, [r4, #28]
   8306c:	9800      	ldr	r0, [sp, #0]
   8306e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83070:	47b0      	blx	r6
   83072:	2800      	cmp	r0, #0
   83074:	dd56      	ble.n	83124 <__sfvwrite_r+0xf8>
   83076:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8307a:	4481      	add	r9, r0
   8307c:	1a1b      	subs	r3, r3, r0
   8307e:	1a3f      	subs	r7, r7, r0
   83080:	f8c8 3008 	str.w	r3, [r8, #8]
   83084:	2b00      	cmp	r3, #0
   83086:	d1e9      	bne.n	8305c <__sfvwrite_r+0x30>
   83088:	2000      	movs	r0, #0
   8308a:	b003      	add	sp, #12
   8308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83090:	4621      	mov	r1, r4
   83092:	9800      	ldr	r0, [sp, #0]
   83094:	f7ff fc56 	bl	82944 <__swsetup_r>
   83098:	2800      	cmp	r0, #0
   8309a:	f040 8135 	bne.w	83308 <__sfvwrite_r+0x2dc>
   8309e:	89a3      	ldrh	r3, [r4, #12]
   830a0:	6835      	ldr	r5, [r6, #0]
   830a2:	f013 0002 	ands.w	r0, r3, #2
   830a6:	d1d3      	bne.n	83050 <__sfvwrite_r+0x24>
   830a8:	f013 0901 	ands.w	r9, r3, #1
   830ac:	d144      	bne.n	83138 <__sfvwrite_r+0x10c>
   830ae:	464f      	mov	r7, r9
   830b0:	9601      	str	r6, [sp, #4]
   830b2:	b337      	cbz	r7, 83102 <__sfvwrite_r+0xd6>
   830b4:	059a      	lsls	r2, r3, #22
   830b6:	f8d4 8008 	ldr.w	r8, [r4, #8]
   830ba:	f140 8085 	bpl.w	831c8 <__sfvwrite_r+0x19c>
   830be:	4547      	cmp	r7, r8
   830c0:	46c3      	mov	fp, r8
   830c2:	f0c0 80ad 	bcc.w	83220 <__sfvwrite_r+0x1f4>
   830c6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   830ca:	f040 80ae 	bne.w	8322a <__sfvwrite_r+0x1fe>
   830ce:	46ba      	mov	sl, r7
   830d0:	6820      	ldr	r0, [r4, #0]
   830d2:	465a      	mov	r2, fp
   830d4:	4649      	mov	r1, r9
   830d6:	f000 fd55 	bl	83b84 <memmove>
   830da:	68a2      	ldr	r2, [r4, #8]
   830dc:	6823      	ldr	r3, [r4, #0]
   830de:	eba2 0208 	sub.w	r2, r2, r8
   830e2:	445b      	add	r3, fp
   830e4:	60a2      	str	r2, [r4, #8]
   830e6:	6023      	str	r3, [r4, #0]
   830e8:	9a01      	ldr	r2, [sp, #4]
   830ea:	44d1      	add	r9, sl
   830ec:	6893      	ldr	r3, [r2, #8]
   830ee:	eba7 070a 	sub.w	r7, r7, sl
   830f2:	eba3 030a 	sub.w	r3, r3, sl
   830f6:	6093      	str	r3, [r2, #8]
   830f8:	2b00      	cmp	r3, #0
   830fa:	d0c5      	beq.n	83088 <__sfvwrite_r+0x5c>
   830fc:	89a3      	ldrh	r3, [r4, #12]
   830fe:	2f00      	cmp	r7, #0
   83100:	d1d8      	bne.n	830b4 <__sfvwrite_r+0x88>
   83102:	f8d5 9000 	ldr.w	r9, [r5]
   83106:	686f      	ldr	r7, [r5, #4]
   83108:	3508      	adds	r5, #8
   8310a:	e7d2      	b.n	830b2 <__sfvwrite_r+0x86>
   8310c:	f8d5 9000 	ldr.w	r9, [r5]
   83110:	686f      	ldr	r7, [r5, #4]
   83112:	3508      	adds	r5, #8
   83114:	e7a2      	b.n	8305c <__sfvwrite_r+0x30>
   83116:	2000      	movs	r0, #0
   83118:	4770      	bx	lr
   8311a:	4621      	mov	r1, r4
   8311c:	9800      	ldr	r0, [sp, #0]
   8311e:	f7ff fd21 	bl	82b64 <_fflush_r>
   83122:	b378      	cbz	r0, 83184 <__sfvwrite_r+0x158>
   83124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83128:	f04f 30ff 	mov.w	r0, #4294967295
   8312c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83130:	81a3      	strh	r3, [r4, #12]
   83132:	b003      	add	sp, #12
   83134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83138:	4681      	mov	r9, r0
   8313a:	4633      	mov	r3, r6
   8313c:	464e      	mov	r6, r9
   8313e:	46a8      	mov	r8, r5
   83140:	469a      	mov	sl, r3
   83142:	464d      	mov	r5, r9
   83144:	b356      	cbz	r6, 8319c <__sfvwrite_r+0x170>
   83146:	2800      	cmp	r0, #0
   83148:	d032      	beq.n	831b0 <__sfvwrite_r+0x184>
   8314a:	45b1      	cmp	r9, r6
   8314c:	46cb      	mov	fp, r9
   8314e:	bf28      	it	cs
   83150:	46b3      	movcs	fp, r6
   83152:	6820      	ldr	r0, [r4, #0]
   83154:	6923      	ldr	r3, [r4, #16]
   83156:	465f      	mov	r7, fp
   83158:	4298      	cmp	r0, r3
   8315a:	6962      	ldr	r2, [r4, #20]
   8315c:	d904      	bls.n	83168 <__sfvwrite_r+0x13c>
   8315e:	68a3      	ldr	r3, [r4, #8]
   83160:	4413      	add	r3, r2
   83162:	459b      	cmp	fp, r3
   83164:	f300 80a8 	bgt.w	832b8 <__sfvwrite_r+0x28c>
   83168:	4593      	cmp	fp, r2
   8316a:	db4d      	blt.n	83208 <__sfvwrite_r+0x1dc>
   8316c:	4613      	mov	r3, r2
   8316e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83170:	462a      	mov	r2, r5
   83172:	69e1      	ldr	r1, [r4, #28]
   83174:	9800      	ldr	r0, [sp, #0]
   83176:	47b8      	blx	r7
   83178:	1e07      	subs	r7, r0, #0
   8317a:	ddd3      	ble.n	83124 <__sfvwrite_r+0xf8>
   8317c:	ebb9 0907 	subs.w	r9, r9, r7
   83180:	d0cb      	beq.n	8311a <__sfvwrite_r+0xee>
   83182:	2001      	movs	r0, #1
   83184:	f8da 3008 	ldr.w	r3, [sl, #8]
   83188:	443d      	add	r5, r7
   8318a:	1bdb      	subs	r3, r3, r7
   8318c:	1bf6      	subs	r6, r6, r7
   8318e:	f8ca 3008 	str.w	r3, [sl, #8]
   83192:	2b00      	cmp	r3, #0
   83194:	f43f af78 	beq.w	83088 <__sfvwrite_r+0x5c>
   83198:	2e00      	cmp	r6, #0
   8319a:	d1d4      	bne.n	83146 <__sfvwrite_r+0x11a>
   8319c:	f108 0308 	add.w	r3, r8, #8
   831a0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   831a4:	4698      	mov	r8, r3
   831a6:	f853 5c08 	ldr.w	r5, [r3, #-8]
   831aa:	3308      	adds	r3, #8
   831ac:	2e00      	cmp	r6, #0
   831ae:	d0f7      	beq.n	831a0 <__sfvwrite_r+0x174>
   831b0:	4632      	mov	r2, r6
   831b2:	210a      	movs	r1, #10
   831b4:	4628      	mov	r0, r5
   831b6:	f000 fc29 	bl	83a0c <memchr>
   831ba:	2800      	cmp	r0, #0
   831bc:	f000 80a1 	beq.w	83302 <__sfvwrite_r+0x2d6>
   831c0:	3001      	adds	r0, #1
   831c2:	eba0 0905 	sub.w	r9, r0, r5
   831c6:	e7c0      	b.n	8314a <__sfvwrite_r+0x11e>
   831c8:	6820      	ldr	r0, [r4, #0]
   831ca:	6923      	ldr	r3, [r4, #16]
   831cc:	4298      	cmp	r0, r3
   831ce:	d802      	bhi.n	831d6 <__sfvwrite_r+0x1aa>
   831d0:	6963      	ldr	r3, [r4, #20]
   831d2:	429f      	cmp	r7, r3
   831d4:	d25d      	bcs.n	83292 <__sfvwrite_r+0x266>
   831d6:	45b8      	cmp	r8, r7
   831d8:	bf28      	it	cs
   831da:	46b8      	movcs	r8, r7
   831dc:	4649      	mov	r1, r9
   831de:	4642      	mov	r2, r8
   831e0:	f000 fcd0 	bl	83b84 <memmove>
   831e4:	68a3      	ldr	r3, [r4, #8]
   831e6:	6822      	ldr	r2, [r4, #0]
   831e8:	eba3 0308 	sub.w	r3, r3, r8
   831ec:	4442      	add	r2, r8
   831ee:	60a3      	str	r3, [r4, #8]
   831f0:	6022      	str	r2, [r4, #0]
   831f2:	b10b      	cbz	r3, 831f8 <__sfvwrite_r+0x1cc>
   831f4:	46c2      	mov	sl, r8
   831f6:	e777      	b.n	830e8 <__sfvwrite_r+0xbc>
   831f8:	4621      	mov	r1, r4
   831fa:	9800      	ldr	r0, [sp, #0]
   831fc:	f7ff fcb2 	bl	82b64 <_fflush_r>
   83200:	2800      	cmp	r0, #0
   83202:	d18f      	bne.n	83124 <__sfvwrite_r+0xf8>
   83204:	46c2      	mov	sl, r8
   83206:	e76f      	b.n	830e8 <__sfvwrite_r+0xbc>
   83208:	465a      	mov	r2, fp
   8320a:	4629      	mov	r1, r5
   8320c:	f000 fcba 	bl	83b84 <memmove>
   83210:	68a2      	ldr	r2, [r4, #8]
   83212:	6823      	ldr	r3, [r4, #0]
   83214:	eba2 020b 	sub.w	r2, r2, fp
   83218:	445b      	add	r3, fp
   8321a:	60a2      	str	r2, [r4, #8]
   8321c:	6023      	str	r3, [r4, #0]
   8321e:	e7ad      	b.n	8317c <__sfvwrite_r+0x150>
   83220:	46b8      	mov	r8, r7
   83222:	46ba      	mov	sl, r7
   83224:	46bb      	mov	fp, r7
   83226:	6820      	ldr	r0, [r4, #0]
   83228:	e753      	b.n	830d2 <__sfvwrite_r+0xa6>
   8322a:	6962      	ldr	r2, [r4, #20]
   8322c:	6820      	ldr	r0, [r4, #0]
   8322e:	6921      	ldr	r1, [r4, #16]
   83230:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83234:	eba0 0a01 	sub.w	sl, r0, r1
   83238:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8323c:	f10a 0001 	add.w	r0, sl, #1
   83240:	ea4f 0868 	mov.w	r8, r8, asr #1
   83244:	4438      	add	r0, r7
   83246:	4540      	cmp	r0, r8
   83248:	4642      	mov	r2, r8
   8324a:	bf84      	itt	hi
   8324c:	4680      	movhi	r8, r0
   8324e:	4642      	movhi	r2, r8
   83250:	055b      	lsls	r3, r3, #21
   83252:	d544      	bpl.n	832de <__sfvwrite_r+0x2b2>
   83254:	4611      	mov	r1, r2
   83256:	9800      	ldr	r0, [sp, #0]
   83258:	f000 f920 	bl	8349c <_malloc_r>
   8325c:	4683      	mov	fp, r0
   8325e:	2800      	cmp	r0, #0
   83260:	d055      	beq.n	8330e <__sfvwrite_r+0x2e2>
   83262:	4652      	mov	r2, sl
   83264:	6921      	ldr	r1, [r4, #16]
   83266:	f000 fc17 	bl	83a98 <memcpy>
   8326a:	89a3      	ldrh	r3, [r4, #12]
   8326c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83274:	81a3      	strh	r3, [r4, #12]
   83276:	eb0b 000a 	add.w	r0, fp, sl
   8327a:	eba8 030a 	sub.w	r3, r8, sl
   8327e:	f8c4 b010 	str.w	fp, [r4, #16]
   83282:	f8c4 8014 	str.w	r8, [r4, #20]
   83286:	6020      	str	r0, [r4, #0]
   83288:	60a3      	str	r3, [r4, #8]
   8328a:	46b8      	mov	r8, r7
   8328c:	46ba      	mov	sl, r7
   8328e:	46bb      	mov	fp, r7
   83290:	e71f      	b.n	830d2 <__sfvwrite_r+0xa6>
   83292:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83296:	42ba      	cmp	r2, r7
   83298:	bf28      	it	cs
   8329a:	463a      	movcs	r2, r7
   8329c:	fb92 f2f3 	sdiv	r2, r2, r3
   832a0:	69e1      	ldr	r1, [r4, #28]
   832a2:	fb03 f302 	mul.w	r3, r3, r2
   832a6:	9800      	ldr	r0, [sp, #0]
   832a8:	464a      	mov	r2, r9
   832aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
   832ac:	47b0      	blx	r6
   832ae:	f1b0 0a00 	subs.w	sl, r0, #0
   832b2:	f73f af19 	bgt.w	830e8 <__sfvwrite_r+0xbc>
   832b6:	e735      	b.n	83124 <__sfvwrite_r+0xf8>
   832b8:	461a      	mov	r2, r3
   832ba:	4629      	mov	r1, r5
   832bc:	9301      	str	r3, [sp, #4]
   832be:	f000 fc61 	bl	83b84 <memmove>
   832c2:	6822      	ldr	r2, [r4, #0]
   832c4:	9b01      	ldr	r3, [sp, #4]
   832c6:	4621      	mov	r1, r4
   832c8:	441a      	add	r2, r3
   832ca:	6022      	str	r2, [r4, #0]
   832cc:	9800      	ldr	r0, [sp, #0]
   832ce:	f7ff fc49 	bl	82b64 <_fflush_r>
   832d2:	9b01      	ldr	r3, [sp, #4]
   832d4:	2800      	cmp	r0, #0
   832d6:	f47f af25 	bne.w	83124 <__sfvwrite_r+0xf8>
   832da:	461f      	mov	r7, r3
   832dc:	e74e      	b.n	8317c <__sfvwrite_r+0x150>
   832de:	9800      	ldr	r0, [sp, #0]
   832e0:	f000 fcc0 	bl	83c64 <_realloc_r>
   832e4:	4683      	mov	fp, r0
   832e6:	2800      	cmp	r0, #0
   832e8:	d1c5      	bne.n	83276 <__sfvwrite_r+0x24a>
   832ea:	9d00      	ldr	r5, [sp, #0]
   832ec:	6921      	ldr	r1, [r4, #16]
   832ee:	4628      	mov	r0, r5
   832f0:	f7ff fdb6 	bl	82e60 <_free_r>
   832f4:	220c      	movs	r2, #12
   832f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   832fa:	602a      	str	r2, [r5, #0]
   832fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83300:	e712      	b.n	83128 <__sfvwrite_r+0xfc>
   83302:	f106 0901 	add.w	r9, r6, #1
   83306:	e720      	b.n	8314a <__sfvwrite_r+0x11e>
   83308:	f04f 30ff 	mov.w	r0, #4294967295
   8330c:	e6bd      	b.n	8308a <__sfvwrite_r+0x5e>
   8330e:	220c      	movs	r2, #12
   83310:	9900      	ldr	r1, [sp, #0]
   83312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83316:	600a      	str	r2, [r1, #0]
   83318:	e706      	b.n	83128 <__sfvwrite_r+0xfc>
   8331a:	bf00      	nop
   8331c:	7ffffc00 	.word	0x7ffffc00

00083320 <_fwalk_reent>:
   83320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83324:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83328:	d01e      	beq.n	83368 <_fwalk_reent+0x48>
   8332a:	4688      	mov	r8, r1
   8332c:	4607      	mov	r7, r0
   8332e:	f04f 0900 	mov.w	r9, #0
   83332:	6875      	ldr	r5, [r6, #4]
   83334:	68b4      	ldr	r4, [r6, #8]
   83336:	3d01      	subs	r5, #1
   83338:	d410      	bmi.n	8335c <_fwalk_reent+0x3c>
   8333a:	89a3      	ldrh	r3, [r4, #12]
   8333c:	3d01      	subs	r5, #1
   8333e:	2b01      	cmp	r3, #1
   83340:	d908      	bls.n	83354 <_fwalk_reent+0x34>
   83342:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83346:	3301      	adds	r3, #1
   83348:	d004      	beq.n	83354 <_fwalk_reent+0x34>
   8334a:	4621      	mov	r1, r4
   8334c:	4638      	mov	r0, r7
   8334e:	47c0      	blx	r8
   83350:	ea49 0900 	orr.w	r9, r9, r0
   83354:	1c6b      	adds	r3, r5, #1
   83356:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8335a:	d1ee      	bne.n	8333a <_fwalk_reent+0x1a>
   8335c:	6836      	ldr	r6, [r6, #0]
   8335e:	2e00      	cmp	r6, #0
   83360:	d1e7      	bne.n	83332 <_fwalk_reent+0x12>
   83362:	4648      	mov	r0, r9
   83364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83368:	46b1      	mov	r9, r6
   8336a:	4648      	mov	r0, r9
   8336c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083370 <__locale_mb_cur_max>:
   83370:	4b04      	ldr	r3, [pc, #16]	; (83384 <__locale_mb_cur_max+0x14>)
   83372:	4a05      	ldr	r2, [pc, #20]	; (83388 <__locale_mb_cur_max+0x18>)
   83374:	681b      	ldr	r3, [r3, #0]
   83376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   83378:	2b00      	cmp	r3, #0
   8337a:	bf08      	it	eq
   8337c:	4613      	moveq	r3, r2
   8337e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   83382:	4770      	bx	lr
   83384:	20070140 	.word	0x20070140
   83388:	20070574 	.word	0x20070574

0008338c <__retarget_lock_init_recursive>:
   8338c:	4770      	bx	lr
   8338e:	bf00      	nop

00083390 <__retarget_lock_close_recursive>:
   83390:	4770      	bx	lr
   83392:	bf00      	nop

00083394 <__retarget_lock_acquire_recursive>:
   83394:	4770      	bx	lr
   83396:	bf00      	nop

00083398 <__retarget_lock_release_recursive>:
   83398:	4770      	bx	lr
   8339a:	bf00      	nop

0008339c <__swhatbuf_r>:
   8339c:	b570      	push	{r4, r5, r6, lr}
   8339e:	460c      	mov	r4, r1
   833a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   833a4:	b090      	sub	sp, #64	; 0x40
   833a6:	2900      	cmp	r1, #0
   833a8:	4615      	mov	r5, r2
   833aa:	461e      	mov	r6, r3
   833ac:	db14      	blt.n	833d8 <__swhatbuf_r+0x3c>
   833ae:	aa01      	add	r2, sp, #4
   833b0:	f001 f80c 	bl	843cc <_fstat_r>
   833b4:	2800      	cmp	r0, #0
   833b6:	db0f      	blt.n	833d8 <__swhatbuf_r+0x3c>
   833b8:	9a02      	ldr	r2, [sp, #8]
   833ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   833be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   833c2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   833c6:	fab2 f282 	clz	r2, r2
   833ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
   833ce:	0952      	lsrs	r2, r2, #5
   833d0:	6032      	str	r2, [r6, #0]
   833d2:	602b      	str	r3, [r5, #0]
   833d4:	b010      	add	sp, #64	; 0x40
   833d6:	bd70      	pop	{r4, r5, r6, pc}
   833d8:	2300      	movs	r3, #0
   833da:	89a2      	ldrh	r2, [r4, #12]
   833dc:	6033      	str	r3, [r6, #0]
   833de:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   833e2:	d004      	beq.n	833ee <__swhatbuf_r+0x52>
   833e4:	2240      	movs	r2, #64	; 0x40
   833e6:	4618      	mov	r0, r3
   833e8:	602a      	str	r2, [r5, #0]
   833ea:	b010      	add	sp, #64	; 0x40
   833ec:	bd70      	pop	{r4, r5, r6, pc}
   833ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
   833f2:	602b      	str	r3, [r5, #0]
   833f4:	b010      	add	sp, #64	; 0x40
   833f6:	bd70      	pop	{r4, r5, r6, pc}

000833f8 <__smakebuf_r>:
   833f8:	898a      	ldrh	r2, [r1, #12]
   833fa:	460b      	mov	r3, r1
   833fc:	0792      	lsls	r2, r2, #30
   833fe:	d506      	bpl.n	8340e <__smakebuf_r+0x16>
   83400:	2101      	movs	r1, #1
   83402:	f103 0243 	add.w	r2, r3, #67	; 0x43
   83406:	6159      	str	r1, [r3, #20]
   83408:	601a      	str	r2, [r3, #0]
   8340a:	611a      	str	r2, [r3, #16]
   8340c:	4770      	bx	lr
   8340e:	b5f0      	push	{r4, r5, r6, r7, lr}
   83410:	b083      	sub	sp, #12
   83412:	ab01      	add	r3, sp, #4
   83414:	466a      	mov	r2, sp
   83416:	460c      	mov	r4, r1
   83418:	4606      	mov	r6, r0
   8341a:	f7ff ffbf 	bl	8339c <__swhatbuf_r>
   8341e:	9900      	ldr	r1, [sp, #0]
   83420:	4605      	mov	r5, r0
   83422:	4630      	mov	r0, r6
   83424:	f000 f83a 	bl	8349c <_malloc_r>
   83428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8342c:	b1d8      	cbz	r0, 83466 <__smakebuf_r+0x6e>
   8342e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   83432:	4f15      	ldr	r7, [pc, #84]	; (83488 <__smakebuf_r+0x90>)
   83434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83438:	63f7      	str	r7, [r6, #60]	; 0x3c
   8343a:	81a3      	strh	r3, [r4, #12]
   8343c:	6020      	str	r0, [r4, #0]
   8343e:	6120      	str	r0, [r4, #16]
   83440:	6161      	str	r1, [r4, #20]
   83442:	b91a      	cbnz	r2, 8344c <__smakebuf_r+0x54>
   83444:	432b      	orrs	r3, r5
   83446:	81a3      	strh	r3, [r4, #12]
   83448:	b003      	add	sp, #12
   8344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8344c:	4630      	mov	r0, r6
   8344e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83452:	f000 ffcf 	bl	843f4 <_isatty_r>
   83456:	b1a0      	cbz	r0, 83482 <__smakebuf_r+0x8a>
   83458:	89a3      	ldrh	r3, [r4, #12]
   8345a:	f023 0303 	bic.w	r3, r3, #3
   8345e:	f043 0301 	orr.w	r3, r3, #1
   83462:	b21b      	sxth	r3, r3
   83464:	e7ee      	b.n	83444 <__smakebuf_r+0x4c>
   83466:	059a      	lsls	r2, r3, #22
   83468:	d4ee      	bmi.n	83448 <__smakebuf_r+0x50>
   8346a:	2101      	movs	r1, #1
   8346c:	f023 0303 	bic.w	r3, r3, #3
   83470:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83474:	f043 0302 	orr.w	r3, r3, #2
   83478:	81a3      	strh	r3, [r4, #12]
   8347a:	6161      	str	r1, [r4, #20]
   8347c:	6022      	str	r2, [r4, #0]
   8347e:	6122      	str	r2, [r4, #16]
   83480:	e7e2      	b.n	83448 <__smakebuf_r+0x50>
   83482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83486:	e7dd      	b.n	83444 <__smakebuf_r+0x4c>
   83488:	00082bb9 	.word	0x00082bb9

0008348c <malloc>:
   8348c:	4b02      	ldr	r3, [pc, #8]	; (83498 <malloc+0xc>)
   8348e:	4601      	mov	r1, r0
   83490:	6818      	ldr	r0, [r3, #0]
   83492:	f000 b803 	b.w	8349c <_malloc_r>
   83496:	bf00      	nop
   83498:	20070140 	.word	0x20070140

0008349c <_malloc_r>:
   8349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   834a0:	f101 060b 	add.w	r6, r1, #11
   834a4:	2e16      	cmp	r6, #22
   834a6:	b083      	sub	sp, #12
   834a8:	4605      	mov	r5, r0
   834aa:	f240 809e 	bls.w	835ea <_malloc_r+0x14e>
   834ae:	f036 0607 	bics.w	r6, r6, #7
   834b2:	f100 80bd 	bmi.w	83630 <_malloc_r+0x194>
   834b6:	42b1      	cmp	r1, r6
   834b8:	f200 80ba 	bhi.w	83630 <_malloc_r+0x194>
   834bc:	f000 fbc6 	bl	83c4c <__malloc_lock>
   834c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   834c4:	f0c0 8285 	bcc.w	839d2 <_malloc_r+0x536>
   834c8:	0a73      	lsrs	r3, r6, #9
   834ca:	f000 80b8 	beq.w	8363e <_malloc_r+0x1a2>
   834ce:	2b04      	cmp	r3, #4
   834d0:	f200 816c 	bhi.w	837ac <_malloc_r+0x310>
   834d4:	09b3      	lsrs	r3, r6, #6
   834d6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   834da:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   834de:	00c1      	lsls	r1, r0, #3
   834e0:	4fb8      	ldr	r7, [pc, #736]	; (837c4 <_malloc_r+0x328>)
   834e2:	4439      	add	r1, r7
   834e4:	684c      	ldr	r4, [r1, #4]
   834e6:	3908      	subs	r1, #8
   834e8:	42a1      	cmp	r1, r4
   834ea:	d106      	bne.n	834fa <_malloc_r+0x5e>
   834ec:	e00c      	b.n	83508 <_malloc_r+0x6c>
   834ee:	2a00      	cmp	r2, #0
   834f0:	f280 80ab 	bge.w	8364a <_malloc_r+0x1ae>
   834f4:	68e4      	ldr	r4, [r4, #12]
   834f6:	42a1      	cmp	r1, r4
   834f8:	d006      	beq.n	83508 <_malloc_r+0x6c>
   834fa:	6863      	ldr	r3, [r4, #4]
   834fc:	f023 0303 	bic.w	r3, r3, #3
   83500:	1b9a      	subs	r2, r3, r6
   83502:	2a0f      	cmp	r2, #15
   83504:	ddf3      	ble.n	834ee <_malloc_r+0x52>
   83506:	4670      	mov	r0, lr
   83508:	693c      	ldr	r4, [r7, #16]
   8350a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 837d8 <_malloc_r+0x33c>
   8350e:	4574      	cmp	r4, lr
   83510:	f000 819e 	beq.w	83850 <_malloc_r+0x3b4>
   83514:	6863      	ldr	r3, [r4, #4]
   83516:	f023 0303 	bic.w	r3, r3, #3
   8351a:	1b9a      	subs	r2, r3, r6
   8351c:	2a0f      	cmp	r2, #15
   8351e:	f300 8183 	bgt.w	83828 <_malloc_r+0x38c>
   83522:	2a00      	cmp	r2, #0
   83524:	f8c7 e014 	str.w	lr, [r7, #20]
   83528:	f8c7 e010 	str.w	lr, [r7, #16]
   8352c:	f280 8091 	bge.w	83652 <_malloc_r+0x1b6>
   83530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83534:	f080 8154 	bcs.w	837e0 <_malloc_r+0x344>
   83538:	2201      	movs	r2, #1
   8353a:	08db      	lsrs	r3, r3, #3
   8353c:	6879      	ldr	r1, [r7, #4]
   8353e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83542:	4413      	add	r3, r2
   83544:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   83548:	fa02 f20c 	lsl.w	r2, r2, ip
   8354c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83550:	430a      	orrs	r2, r1
   83552:	f1ac 0108 	sub.w	r1, ip, #8
   83556:	60e1      	str	r1, [r4, #12]
   83558:	f8c4 8008 	str.w	r8, [r4, #8]
   8355c:	607a      	str	r2, [r7, #4]
   8355e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83562:	f8c8 400c 	str.w	r4, [r8, #12]
   83566:	2401      	movs	r4, #1
   83568:	1083      	asrs	r3, r0, #2
   8356a:	409c      	lsls	r4, r3
   8356c:	4294      	cmp	r4, r2
   8356e:	d87d      	bhi.n	8366c <_malloc_r+0x1d0>
   83570:	4214      	tst	r4, r2
   83572:	d106      	bne.n	83582 <_malloc_r+0xe6>
   83574:	f020 0003 	bic.w	r0, r0, #3
   83578:	0064      	lsls	r4, r4, #1
   8357a:	4214      	tst	r4, r2
   8357c:	f100 0004 	add.w	r0, r0, #4
   83580:	d0fa      	beq.n	83578 <_malloc_r+0xdc>
   83582:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   83586:	46cc      	mov	ip, r9
   83588:	4680      	mov	r8, r0
   8358a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8358e:	459c      	cmp	ip, r3
   83590:	d107      	bne.n	835a2 <_malloc_r+0x106>
   83592:	e15f      	b.n	83854 <_malloc_r+0x3b8>
   83594:	2a00      	cmp	r2, #0
   83596:	f280 816d 	bge.w	83874 <_malloc_r+0x3d8>
   8359a:	68db      	ldr	r3, [r3, #12]
   8359c:	459c      	cmp	ip, r3
   8359e:	f000 8159 	beq.w	83854 <_malloc_r+0x3b8>
   835a2:	6859      	ldr	r1, [r3, #4]
   835a4:	f021 0103 	bic.w	r1, r1, #3
   835a8:	1b8a      	subs	r2, r1, r6
   835aa:	2a0f      	cmp	r2, #15
   835ac:	ddf2      	ble.n	83594 <_malloc_r+0xf8>
   835ae:	68dc      	ldr	r4, [r3, #12]
   835b0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   835b4:	f046 0801 	orr.w	r8, r6, #1
   835b8:	4628      	mov	r0, r5
   835ba:	441e      	add	r6, r3
   835bc:	f042 0501 	orr.w	r5, r2, #1
   835c0:	f8c3 8004 	str.w	r8, [r3, #4]
   835c4:	f8cc 400c 	str.w	r4, [ip, #12]
   835c8:	f8c4 c008 	str.w	ip, [r4, #8]
   835cc:	617e      	str	r6, [r7, #20]
   835ce:	613e      	str	r6, [r7, #16]
   835d0:	f8c6 e00c 	str.w	lr, [r6, #12]
   835d4:	f8c6 e008 	str.w	lr, [r6, #8]
   835d8:	6075      	str	r5, [r6, #4]
   835da:	505a      	str	r2, [r3, r1]
   835dc:	9300      	str	r3, [sp, #0]
   835de:	f000 fb3b 	bl	83c58 <__malloc_unlock>
   835e2:	9b00      	ldr	r3, [sp, #0]
   835e4:	f103 0408 	add.w	r4, r3, #8
   835e8:	e01e      	b.n	83628 <_malloc_r+0x18c>
   835ea:	2910      	cmp	r1, #16
   835ec:	d820      	bhi.n	83630 <_malloc_r+0x194>
   835ee:	f000 fb2d 	bl	83c4c <__malloc_lock>
   835f2:	2610      	movs	r6, #16
   835f4:	2318      	movs	r3, #24
   835f6:	2002      	movs	r0, #2
   835f8:	4f72      	ldr	r7, [pc, #456]	; (837c4 <_malloc_r+0x328>)
   835fa:	443b      	add	r3, r7
   835fc:	685c      	ldr	r4, [r3, #4]
   835fe:	f1a3 0208 	sub.w	r2, r3, #8
   83602:	4294      	cmp	r4, r2
   83604:	f000 812f 	beq.w	83866 <_malloc_r+0x3ca>
   83608:	6863      	ldr	r3, [r4, #4]
   8360a:	68e1      	ldr	r1, [r4, #12]
   8360c:	f023 0303 	bic.w	r3, r3, #3
   83610:	4423      	add	r3, r4
   83612:	685a      	ldr	r2, [r3, #4]
   83614:	68a6      	ldr	r6, [r4, #8]
   83616:	f042 0201 	orr.w	r2, r2, #1
   8361a:	60f1      	str	r1, [r6, #12]
   8361c:	4628      	mov	r0, r5
   8361e:	608e      	str	r6, [r1, #8]
   83620:	605a      	str	r2, [r3, #4]
   83622:	f000 fb19 	bl	83c58 <__malloc_unlock>
   83626:	3408      	adds	r4, #8
   83628:	4620      	mov	r0, r4
   8362a:	b003      	add	sp, #12
   8362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83630:	2400      	movs	r4, #0
   83632:	230c      	movs	r3, #12
   83634:	4620      	mov	r0, r4
   83636:	602b      	str	r3, [r5, #0]
   83638:	b003      	add	sp, #12
   8363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8363e:	2040      	movs	r0, #64	; 0x40
   83640:	f44f 7100 	mov.w	r1, #512	; 0x200
   83644:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   83648:	e74a      	b.n	834e0 <_malloc_r+0x44>
   8364a:	4423      	add	r3, r4
   8364c:	685a      	ldr	r2, [r3, #4]
   8364e:	68e1      	ldr	r1, [r4, #12]
   83650:	e7e0      	b.n	83614 <_malloc_r+0x178>
   83652:	4423      	add	r3, r4
   83654:	685a      	ldr	r2, [r3, #4]
   83656:	4628      	mov	r0, r5
   83658:	f042 0201 	orr.w	r2, r2, #1
   8365c:	605a      	str	r2, [r3, #4]
   8365e:	3408      	adds	r4, #8
   83660:	f000 fafa 	bl	83c58 <__malloc_unlock>
   83664:	4620      	mov	r0, r4
   83666:	b003      	add	sp, #12
   83668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8366c:	68bc      	ldr	r4, [r7, #8]
   8366e:	6863      	ldr	r3, [r4, #4]
   83670:	f023 0803 	bic.w	r8, r3, #3
   83674:	45b0      	cmp	r8, r6
   83676:	d304      	bcc.n	83682 <_malloc_r+0x1e6>
   83678:	eba8 0306 	sub.w	r3, r8, r6
   8367c:	2b0f      	cmp	r3, #15
   8367e:	f300 8085 	bgt.w	8378c <_malloc_r+0x2f0>
   83682:	f8df 9158 	ldr.w	r9, [pc, #344]	; 837dc <_malloc_r+0x340>
   83686:	4b50      	ldr	r3, [pc, #320]	; (837c8 <_malloc_r+0x32c>)
   83688:	f8d9 2000 	ldr.w	r2, [r9]
   8368c:	681b      	ldr	r3, [r3, #0]
   8368e:	3201      	adds	r2, #1
   83690:	4433      	add	r3, r6
   83692:	eb04 0a08 	add.w	sl, r4, r8
   83696:	f000 8154 	beq.w	83942 <_malloc_r+0x4a6>
   8369a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8369e:	330f      	adds	r3, #15
   836a0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   836a4:	f02b 0b0f 	bic.w	fp, fp, #15
   836a8:	4659      	mov	r1, fp
   836aa:	4628      	mov	r0, r5
   836ac:	f000 fc90 	bl	83fd0 <_sbrk_r>
   836b0:	1c41      	adds	r1, r0, #1
   836b2:	4602      	mov	r2, r0
   836b4:	f000 80fb 	beq.w	838ae <_malloc_r+0x412>
   836b8:	4582      	cmp	sl, r0
   836ba:	f200 80f6 	bhi.w	838aa <_malloc_r+0x40e>
   836be:	4b43      	ldr	r3, [pc, #268]	; (837cc <_malloc_r+0x330>)
   836c0:	6819      	ldr	r1, [r3, #0]
   836c2:	4459      	add	r1, fp
   836c4:	6019      	str	r1, [r3, #0]
   836c6:	f000 814c 	beq.w	83962 <_malloc_r+0x4c6>
   836ca:	f8d9 0000 	ldr.w	r0, [r9]
   836ce:	3001      	adds	r0, #1
   836d0:	bf1b      	ittet	ne
   836d2:	eba2 0a0a 	subne.w	sl, r2, sl
   836d6:	4451      	addne	r1, sl
   836d8:	f8c9 2000 	streq.w	r2, [r9]
   836dc:	6019      	strne	r1, [r3, #0]
   836de:	f012 0107 	ands.w	r1, r2, #7
   836e2:	f000 8114 	beq.w	8390e <_malloc_r+0x472>
   836e6:	f1c1 0008 	rsb	r0, r1, #8
   836ea:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   836ee:	4402      	add	r2, r0
   836f0:	3108      	adds	r1, #8
   836f2:	eb02 090b 	add.w	r9, r2, fp
   836f6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   836fa:	eba1 0909 	sub.w	r9, r1, r9
   836fe:	4649      	mov	r1, r9
   83700:	4628      	mov	r0, r5
   83702:	9301      	str	r3, [sp, #4]
   83704:	9200      	str	r2, [sp, #0]
   83706:	f000 fc63 	bl	83fd0 <_sbrk_r>
   8370a:	1c43      	adds	r3, r0, #1
   8370c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83710:	f000 8142 	beq.w	83998 <_malloc_r+0x4fc>
   83714:	1a80      	subs	r0, r0, r2
   83716:	4448      	add	r0, r9
   83718:	f040 0001 	orr.w	r0, r0, #1
   8371c:	6819      	ldr	r1, [r3, #0]
   8371e:	42bc      	cmp	r4, r7
   83720:	4449      	add	r1, r9
   83722:	60ba      	str	r2, [r7, #8]
   83724:	6019      	str	r1, [r3, #0]
   83726:	6050      	str	r0, [r2, #4]
   83728:	d017      	beq.n	8375a <_malloc_r+0x2be>
   8372a:	f1b8 0f0f 	cmp.w	r8, #15
   8372e:	f240 80fa 	bls.w	83926 <_malloc_r+0x48a>
   83732:	f04f 0c05 	mov.w	ip, #5
   83736:	6862      	ldr	r2, [r4, #4]
   83738:	f1a8 000c 	sub.w	r0, r8, #12
   8373c:	f020 0007 	bic.w	r0, r0, #7
   83740:	f002 0201 	and.w	r2, r2, #1
   83744:	eb04 0e00 	add.w	lr, r4, r0
   83748:	4302      	orrs	r2, r0
   8374a:	280f      	cmp	r0, #15
   8374c:	6062      	str	r2, [r4, #4]
   8374e:	f8ce c004 	str.w	ip, [lr, #4]
   83752:	f8ce c008 	str.w	ip, [lr, #8]
   83756:	f200 8116 	bhi.w	83986 <_malloc_r+0x4ea>
   8375a:	4b1d      	ldr	r3, [pc, #116]	; (837d0 <_malloc_r+0x334>)
   8375c:	68bc      	ldr	r4, [r7, #8]
   8375e:	681a      	ldr	r2, [r3, #0]
   83760:	4291      	cmp	r1, r2
   83762:	bf88      	it	hi
   83764:	6019      	strhi	r1, [r3, #0]
   83766:	4b1b      	ldr	r3, [pc, #108]	; (837d4 <_malloc_r+0x338>)
   83768:	681a      	ldr	r2, [r3, #0]
   8376a:	4291      	cmp	r1, r2
   8376c:	6862      	ldr	r2, [r4, #4]
   8376e:	bf88      	it	hi
   83770:	6019      	strhi	r1, [r3, #0]
   83772:	f022 0203 	bic.w	r2, r2, #3
   83776:	4296      	cmp	r6, r2
   83778:	eba2 0306 	sub.w	r3, r2, r6
   8377c:	d801      	bhi.n	83782 <_malloc_r+0x2e6>
   8377e:	2b0f      	cmp	r3, #15
   83780:	dc04      	bgt.n	8378c <_malloc_r+0x2f0>
   83782:	4628      	mov	r0, r5
   83784:	f000 fa68 	bl	83c58 <__malloc_unlock>
   83788:	2400      	movs	r4, #0
   8378a:	e74d      	b.n	83628 <_malloc_r+0x18c>
   8378c:	f046 0201 	orr.w	r2, r6, #1
   83790:	f043 0301 	orr.w	r3, r3, #1
   83794:	4426      	add	r6, r4
   83796:	6062      	str	r2, [r4, #4]
   83798:	4628      	mov	r0, r5
   8379a:	60be      	str	r6, [r7, #8]
   8379c:	3408      	adds	r4, #8
   8379e:	6073      	str	r3, [r6, #4]
   837a0:	f000 fa5a 	bl	83c58 <__malloc_unlock>
   837a4:	4620      	mov	r0, r4
   837a6:	b003      	add	sp, #12
   837a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837ac:	2b14      	cmp	r3, #20
   837ae:	d970      	bls.n	83892 <_malloc_r+0x3f6>
   837b0:	2b54      	cmp	r3, #84	; 0x54
   837b2:	f200 80a2 	bhi.w	838fa <_malloc_r+0x45e>
   837b6:	0b33      	lsrs	r3, r6, #12
   837b8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   837bc:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   837c0:	00c1      	lsls	r1, r0, #3
   837c2:	e68d      	b.n	834e0 <_malloc_r+0x44>
   837c4:	200706e0 	.word	0x200706e0
   837c8:	20070c64 	.word	0x20070c64
   837cc:	20070c34 	.word	0x20070c34
   837d0:	20070c5c 	.word	0x20070c5c
   837d4:	20070c60 	.word	0x20070c60
   837d8:	200706e8 	.word	0x200706e8
   837dc:	20070ae8 	.word	0x20070ae8
   837e0:	0a5a      	lsrs	r2, r3, #9
   837e2:	2a04      	cmp	r2, #4
   837e4:	d95b      	bls.n	8389e <_malloc_r+0x402>
   837e6:	2a14      	cmp	r2, #20
   837e8:	f200 80ae 	bhi.w	83948 <_malloc_r+0x4ac>
   837ec:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   837f0:	00c9      	lsls	r1, r1, #3
   837f2:	325b      	adds	r2, #91	; 0x5b
   837f4:	eb07 0c01 	add.w	ip, r7, r1
   837f8:	5879      	ldr	r1, [r7, r1]
   837fa:	f1ac 0c08 	sub.w	ip, ip, #8
   837fe:	458c      	cmp	ip, r1
   83800:	f000 8088 	beq.w	83914 <_malloc_r+0x478>
   83804:	684a      	ldr	r2, [r1, #4]
   83806:	f022 0203 	bic.w	r2, r2, #3
   8380a:	4293      	cmp	r3, r2
   8380c:	d273      	bcs.n	838f6 <_malloc_r+0x45a>
   8380e:	6889      	ldr	r1, [r1, #8]
   83810:	458c      	cmp	ip, r1
   83812:	d1f7      	bne.n	83804 <_malloc_r+0x368>
   83814:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83818:	687a      	ldr	r2, [r7, #4]
   8381a:	60e3      	str	r3, [r4, #12]
   8381c:	f8c4 c008 	str.w	ip, [r4, #8]
   83820:	609c      	str	r4, [r3, #8]
   83822:	f8cc 400c 	str.w	r4, [ip, #12]
   83826:	e69e      	b.n	83566 <_malloc_r+0xca>
   83828:	f046 0c01 	orr.w	ip, r6, #1
   8382c:	f042 0101 	orr.w	r1, r2, #1
   83830:	4426      	add	r6, r4
   83832:	f8c4 c004 	str.w	ip, [r4, #4]
   83836:	4628      	mov	r0, r5
   83838:	617e      	str	r6, [r7, #20]
   8383a:	613e      	str	r6, [r7, #16]
   8383c:	f8c6 e00c 	str.w	lr, [r6, #12]
   83840:	f8c6 e008 	str.w	lr, [r6, #8]
   83844:	6071      	str	r1, [r6, #4]
   83846:	50e2      	str	r2, [r4, r3]
   83848:	f000 fa06 	bl	83c58 <__malloc_unlock>
   8384c:	3408      	adds	r4, #8
   8384e:	e6eb      	b.n	83628 <_malloc_r+0x18c>
   83850:	687a      	ldr	r2, [r7, #4]
   83852:	e688      	b.n	83566 <_malloc_r+0xca>
   83854:	f108 0801 	add.w	r8, r8, #1
   83858:	f018 0f03 	tst.w	r8, #3
   8385c:	f10c 0c08 	add.w	ip, ip, #8
   83860:	f47f ae93 	bne.w	8358a <_malloc_r+0xee>
   83864:	e02d      	b.n	838c2 <_malloc_r+0x426>
   83866:	68dc      	ldr	r4, [r3, #12]
   83868:	42a3      	cmp	r3, r4
   8386a:	bf08      	it	eq
   8386c:	3002      	addeq	r0, #2
   8386e:	f43f ae4b 	beq.w	83508 <_malloc_r+0x6c>
   83872:	e6c9      	b.n	83608 <_malloc_r+0x16c>
   83874:	461c      	mov	r4, r3
   83876:	4419      	add	r1, r3
   83878:	684a      	ldr	r2, [r1, #4]
   8387a:	68db      	ldr	r3, [r3, #12]
   8387c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83880:	f042 0201 	orr.w	r2, r2, #1
   83884:	604a      	str	r2, [r1, #4]
   83886:	4628      	mov	r0, r5
   83888:	60f3      	str	r3, [r6, #12]
   8388a:	609e      	str	r6, [r3, #8]
   8388c:	f000 f9e4 	bl	83c58 <__malloc_unlock>
   83890:	e6ca      	b.n	83628 <_malloc_r+0x18c>
   83892:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   83896:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8389a:	00c1      	lsls	r1, r0, #3
   8389c:	e620      	b.n	834e0 <_malloc_r+0x44>
   8389e:	099a      	lsrs	r2, r3, #6
   838a0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   838a4:	00c9      	lsls	r1, r1, #3
   838a6:	3238      	adds	r2, #56	; 0x38
   838a8:	e7a4      	b.n	837f4 <_malloc_r+0x358>
   838aa:	42bc      	cmp	r4, r7
   838ac:	d054      	beq.n	83958 <_malloc_r+0x4bc>
   838ae:	68bc      	ldr	r4, [r7, #8]
   838b0:	6862      	ldr	r2, [r4, #4]
   838b2:	f022 0203 	bic.w	r2, r2, #3
   838b6:	e75e      	b.n	83776 <_malloc_r+0x2da>
   838b8:	f859 3908 	ldr.w	r3, [r9], #-8
   838bc:	4599      	cmp	r9, r3
   838be:	f040 8086 	bne.w	839ce <_malloc_r+0x532>
   838c2:	f010 0f03 	tst.w	r0, #3
   838c6:	f100 30ff 	add.w	r0, r0, #4294967295
   838ca:	d1f5      	bne.n	838b8 <_malloc_r+0x41c>
   838cc:	687b      	ldr	r3, [r7, #4]
   838ce:	ea23 0304 	bic.w	r3, r3, r4
   838d2:	607b      	str	r3, [r7, #4]
   838d4:	0064      	lsls	r4, r4, #1
   838d6:	429c      	cmp	r4, r3
   838d8:	f63f aec8 	bhi.w	8366c <_malloc_r+0x1d0>
   838dc:	2c00      	cmp	r4, #0
   838de:	f43f aec5 	beq.w	8366c <_malloc_r+0x1d0>
   838e2:	421c      	tst	r4, r3
   838e4:	4640      	mov	r0, r8
   838e6:	f47f ae4c 	bne.w	83582 <_malloc_r+0xe6>
   838ea:	0064      	lsls	r4, r4, #1
   838ec:	421c      	tst	r4, r3
   838ee:	f100 0004 	add.w	r0, r0, #4
   838f2:	d0fa      	beq.n	838ea <_malloc_r+0x44e>
   838f4:	e645      	b.n	83582 <_malloc_r+0xe6>
   838f6:	468c      	mov	ip, r1
   838f8:	e78c      	b.n	83814 <_malloc_r+0x378>
   838fa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   838fe:	d815      	bhi.n	8392c <_malloc_r+0x490>
   83900:	0bf3      	lsrs	r3, r6, #15
   83902:	f103 0078 	add.w	r0, r3, #120	; 0x78
   83906:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8390a:	00c1      	lsls	r1, r0, #3
   8390c:	e5e8      	b.n	834e0 <_malloc_r+0x44>
   8390e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83912:	e6ee      	b.n	836f2 <_malloc_r+0x256>
   83914:	2101      	movs	r1, #1
   83916:	687b      	ldr	r3, [r7, #4]
   83918:	1092      	asrs	r2, r2, #2
   8391a:	fa01 f202 	lsl.w	r2, r1, r2
   8391e:	431a      	orrs	r2, r3
   83920:	607a      	str	r2, [r7, #4]
   83922:	4663      	mov	r3, ip
   83924:	e779      	b.n	8381a <_malloc_r+0x37e>
   83926:	2301      	movs	r3, #1
   83928:	6053      	str	r3, [r2, #4]
   8392a:	e72a      	b.n	83782 <_malloc_r+0x2e6>
   8392c:	f240 5254 	movw	r2, #1364	; 0x554
   83930:	4293      	cmp	r3, r2
   83932:	d822      	bhi.n	8397a <_malloc_r+0x4de>
   83934:	0cb3      	lsrs	r3, r6, #18
   83936:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8393a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8393e:	00c1      	lsls	r1, r0, #3
   83940:	e5ce      	b.n	834e0 <_malloc_r+0x44>
   83942:	f103 0b10 	add.w	fp, r3, #16
   83946:	e6af      	b.n	836a8 <_malloc_r+0x20c>
   83948:	2a54      	cmp	r2, #84	; 0x54
   8394a:	d829      	bhi.n	839a0 <_malloc_r+0x504>
   8394c:	0b1a      	lsrs	r2, r3, #12
   8394e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83952:	00c9      	lsls	r1, r1, #3
   83954:	326e      	adds	r2, #110	; 0x6e
   83956:	e74d      	b.n	837f4 <_malloc_r+0x358>
   83958:	4b20      	ldr	r3, [pc, #128]	; (839dc <_malloc_r+0x540>)
   8395a:	6819      	ldr	r1, [r3, #0]
   8395c:	4459      	add	r1, fp
   8395e:	6019      	str	r1, [r3, #0]
   83960:	e6b3      	b.n	836ca <_malloc_r+0x22e>
   83962:	f3ca 000b 	ubfx	r0, sl, #0, #12
   83966:	2800      	cmp	r0, #0
   83968:	f47f aeaf 	bne.w	836ca <_malloc_r+0x22e>
   8396c:	eb08 030b 	add.w	r3, r8, fp
   83970:	68ba      	ldr	r2, [r7, #8]
   83972:	f043 0301 	orr.w	r3, r3, #1
   83976:	6053      	str	r3, [r2, #4]
   83978:	e6ef      	b.n	8375a <_malloc_r+0x2be>
   8397a:	207f      	movs	r0, #127	; 0x7f
   8397c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83980:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83984:	e5ac      	b.n	834e0 <_malloc_r+0x44>
   83986:	f104 0108 	add.w	r1, r4, #8
   8398a:	4628      	mov	r0, r5
   8398c:	9300      	str	r3, [sp, #0]
   8398e:	f7ff fa67 	bl	82e60 <_free_r>
   83992:	9b00      	ldr	r3, [sp, #0]
   83994:	6819      	ldr	r1, [r3, #0]
   83996:	e6e0      	b.n	8375a <_malloc_r+0x2be>
   83998:	2001      	movs	r0, #1
   8399a:	f04f 0900 	mov.w	r9, #0
   8399e:	e6bd      	b.n	8371c <_malloc_r+0x280>
   839a0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   839a4:	d805      	bhi.n	839b2 <_malloc_r+0x516>
   839a6:	0bda      	lsrs	r2, r3, #15
   839a8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   839ac:	00c9      	lsls	r1, r1, #3
   839ae:	3277      	adds	r2, #119	; 0x77
   839b0:	e720      	b.n	837f4 <_malloc_r+0x358>
   839b2:	f240 5154 	movw	r1, #1364	; 0x554
   839b6:	428a      	cmp	r2, r1
   839b8:	d805      	bhi.n	839c6 <_malloc_r+0x52a>
   839ba:	0c9a      	lsrs	r2, r3, #18
   839bc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   839c0:	00c9      	lsls	r1, r1, #3
   839c2:	327c      	adds	r2, #124	; 0x7c
   839c4:	e716      	b.n	837f4 <_malloc_r+0x358>
   839c6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   839ca:	227e      	movs	r2, #126	; 0x7e
   839cc:	e712      	b.n	837f4 <_malloc_r+0x358>
   839ce:	687b      	ldr	r3, [r7, #4]
   839d0:	e780      	b.n	838d4 <_malloc_r+0x438>
   839d2:	08f0      	lsrs	r0, r6, #3
   839d4:	f106 0308 	add.w	r3, r6, #8
   839d8:	e60e      	b.n	835f8 <_malloc_r+0x15c>
   839da:	bf00      	nop
   839dc:	20070c34 	.word	0x20070c34

000839e0 <__ascii_mbtowc>:
   839e0:	b082      	sub	sp, #8
   839e2:	b149      	cbz	r1, 839f8 <__ascii_mbtowc+0x18>
   839e4:	b15a      	cbz	r2, 839fe <__ascii_mbtowc+0x1e>
   839e6:	b16b      	cbz	r3, 83a04 <__ascii_mbtowc+0x24>
   839e8:	7813      	ldrb	r3, [r2, #0]
   839ea:	600b      	str	r3, [r1, #0]
   839ec:	7812      	ldrb	r2, [r2, #0]
   839ee:	1c10      	adds	r0, r2, #0
   839f0:	bf18      	it	ne
   839f2:	2001      	movne	r0, #1
   839f4:	b002      	add	sp, #8
   839f6:	4770      	bx	lr
   839f8:	a901      	add	r1, sp, #4
   839fa:	2a00      	cmp	r2, #0
   839fc:	d1f3      	bne.n	839e6 <__ascii_mbtowc+0x6>
   839fe:	4610      	mov	r0, r2
   83a00:	b002      	add	sp, #8
   83a02:	4770      	bx	lr
   83a04:	f06f 0001 	mvn.w	r0, #1
   83a08:	e7f4      	b.n	839f4 <__ascii_mbtowc+0x14>
   83a0a:	bf00      	nop

00083a0c <memchr>:
   83a0c:	0783      	lsls	r3, r0, #30
   83a0e:	b470      	push	{r4, r5, r6}
   83a10:	b2cd      	uxtb	r5, r1
   83a12:	d03d      	beq.n	83a90 <memchr+0x84>
   83a14:	1e54      	subs	r4, r2, #1
   83a16:	b30a      	cbz	r2, 83a5c <memchr+0x50>
   83a18:	7803      	ldrb	r3, [r0, #0]
   83a1a:	42ab      	cmp	r3, r5
   83a1c:	d01f      	beq.n	83a5e <memchr+0x52>
   83a1e:	1c43      	adds	r3, r0, #1
   83a20:	e005      	b.n	83a2e <memchr+0x22>
   83a22:	f114 34ff 	adds.w	r4, r4, #4294967295
   83a26:	d319      	bcc.n	83a5c <memchr+0x50>
   83a28:	7802      	ldrb	r2, [r0, #0]
   83a2a:	42aa      	cmp	r2, r5
   83a2c:	d017      	beq.n	83a5e <memchr+0x52>
   83a2e:	f013 0f03 	tst.w	r3, #3
   83a32:	4618      	mov	r0, r3
   83a34:	f103 0301 	add.w	r3, r3, #1
   83a38:	d1f3      	bne.n	83a22 <memchr+0x16>
   83a3a:	2c03      	cmp	r4, #3
   83a3c:	d811      	bhi.n	83a62 <memchr+0x56>
   83a3e:	b34c      	cbz	r4, 83a94 <memchr+0x88>
   83a40:	7803      	ldrb	r3, [r0, #0]
   83a42:	42ab      	cmp	r3, r5
   83a44:	d00b      	beq.n	83a5e <memchr+0x52>
   83a46:	4404      	add	r4, r0
   83a48:	1c43      	adds	r3, r0, #1
   83a4a:	e002      	b.n	83a52 <memchr+0x46>
   83a4c:	7802      	ldrb	r2, [r0, #0]
   83a4e:	42aa      	cmp	r2, r5
   83a50:	d005      	beq.n	83a5e <memchr+0x52>
   83a52:	429c      	cmp	r4, r3
   83a54:	4618      	mov	r0, r3
   83a56:	f103 0301 	add.w	r3, r3, #1
   83a5a:	d1f7      	bne.n	83a4c <memchr+0x40>
   83a5c:	2000      	movs	r0, #0
   83a5e:	bc70      	pop	{r4, r5, r6}
   83a60:	4770      	bx	lr
   83a62:	0209      	lsls	r1, r1, #8
   83a64:	b289      	uxth	r1, r1
   83a66:	4329      	orrs	r1, r5
   83a68:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83a6c:	6803      	ldr	r3, [r0, #0]
   83a6e:	4606      	mov	r6, r0
   83a70:	404b      	eors	r3, r1
   83a72:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   83a76:	ea22 0303 	bic.w	r3, r2, r3
   83a7a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83a7e:	f100 0004 	add.w	r0, r0, #4
   83a82:	d103      	bne.n	83a8c <memchr+0x80>
   83a84:	3c04      	subs	r4, #4
   83a86:	2c03      	cmp	r4, #3
   83a88:	d8f0      	bhi.n	83a6c <memchr+0x60>
   83a8a:	e7d8      	b.n	83a3e <memchr+0x32>
   83a8c:	4630      	mov	r0, r6
   83a8e:	e7d7      	b.n	83a40 <memchr+0x34>
   83a90:	4614      	mov	r4, r2
   83a92:	e7d2      	b.n	83a3a <memchr+0x2e>
   83a94:	4620      	mov	r0, r4
   83a96:	e7e2      	b.n	83a5e <memchr+0x52>

00083a98 <memcpy>:
   83a98:	4684      	mov	ip, r0
   83a9a:	ea41 0300 	orr.w	r3, r1, r0
   83a9e:	f013 0303 	ands.w	r3, r3, #3
   83aa2:	d149      	bne.n	83b38 <memcpy+0xa0>
   83aa4:	3a40      	subs	r2, #64	; 0x40
   83aa6:	d323      	bcc.n	83af0 <memcpy+0x58>
   83aa8:	680b      	ldr	r3, [r1, #0]
   83aaa:	6003      	str	r3, [r0, #0]
   83aac:	684b      	ldr	r3, [r1, #4]
   83aae:	6043      	str	r3, [r0, #4]
   83ab0:	688b      	ldr	r3, [r1, #8]
   83ab2:	6083      	str	r3, [r0, #8]
   83ab4:	68cb      	ldr	r3, [r1, #12]
   83ab6:	60c3      	str	r3, [r0, #12]
   83ab8:	690b      	ldr	r3, [r1, #16]
   83aba:	6103      	str	r3, [r0, #16]
   83abc:	694b      	ldr	r3, [r1, #20]
   83abe:	6143      	str	r3, [r0, #20]
   83ac0:	698b      	ldr	r3, [r1, #24]
   83ac2:	6183      	str	r3, [r0, #24]
   83ac4:	69cb      	ldr	r3, [r1, #28]
   83ac6:	61c3      	str	r3, [r0, #28]
   83ac8:	6a0b      	ldr	r3, [r1, #32]
   83aca:	6203      	str	r3, [r0, #32]
   83acc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83ace:	6243      	str	r3, [r0, #36]	; 0x24
   83ad0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83ad2:	6283      	str	r3, [r0, #40]	; 0x28
   83ad4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83ad6:	62c3      	str	r3, [r0, #44]	; 0x2c
   83ad8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83ada:	6303      	str	r3, [r0, #48]	; 0x30
   83adc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83ade:	6343      	str	r3, [r0, #52]	; 0x34
   83ae0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83ae2:	6383      	str	r3, [r0, #56]	; 0x38
   83ae4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83ae6:	63c3      	str	r3, [r0, #60]	; 0x3c
   83ae8:	3040      	adds	r0, #64	; 0x40
   83aea:	3140      	adds	r1, #64	; 0x40
   83aec:	3a40      	subs	r2, #64	; 0x40
   83aee:	d2db      	bcs.n	83aa8 <memcpy+0x10>
   83af0:	3230      	adds	r2, #48	; 0x30
   83af2:	d30b      	bcc.n	83b0c <memcpy+0x74>
   83af4:	680b      	ldr	r3, [r1, #0]
   83af6:	6003      	str	r3, [r0, #0]
   83af8:	684b      	ldr	r3, [r1, #4]
   83afa:	6043      	str	r3, [r0, #4]
   83afc:	688b      	ldr	r3, [r1, #8]
   83afe:	6083      	str	r3, [r0, #8]
   83b00:	68cb      	ldr	r3, [r1, #12]
   83b02:	60c3      	str	r3, [r0, #12]
   83b04:	3010      	adds	r0, #16
   83b06:	3110      	adds	r1, #16
   83b08:	3a10      	subs	r2, #16
   83b0a:	d2f3      	bcs.n	83af4 <memcpy+0x5c>
   83b0c:	320c      	adds	r2, #12
   83b0e:	d305      	bcc.n	83b1c <memcpy+0x84>
   83b10:	f851 3b04 	ldr.w	r3, [r1], #4
   83b14:	f840 3b04 	str.w	r3, [r0], #4
   83b18:	3a04      	subs	r2, #4
   83b1a:	d2f9      	bcs.n	83b10 <memcpy+0x78>
   83b1c:	3204      	adds	r2, #4
   83b1e:	d008      	beq.n	83b32 <memcpy+0x9a>
   83b20:	07d2      	lsls	r2, r2, #31
   83b22:	bf1c      	itt	ne
   83b24:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83b28:	f800 3b01 	strbne.w	r3, [r0], #1
   83b2c:	d301      	bcc.n	83b32 <memcpy+0x9a>
   83b2e:	880b      	ldrh	r3, [r1, #0]
   83b30:	8003      	strh	r3, [r0, #0]
   83b32:	4660      	mov	r0, ip
   83b34:	4770      	bx	lr
   83b36:	bf00      	nop
   83b38:	2a08      	cmp	r2, #8
   83b3a:	d313      	bcc.n	83b64 <memcpy+0xcc>
   83b3c:	078b      	lsls	r3, r1, #30
   83b3e:	d0b1      	beq.n	83aa4 <memcpy+0xc>
   83b40:	f010 0303 	ands.w	r3, r0, #3
   83b44:	d0ae      	beq.n	83aa4 <memcpy+0xc>
   83b46:	f1c3 0304 	rsb	r3, r3, #4
   83b4a:	1ad2      	subs	r2, r2, r3
   83b4c:	07db      	lsls	r3, r3, #31
   83b4e:	bf1c      	itt	ne
   83b50:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83b54:	f800 3b01 	strbne.w	r3, [r0], #1
   83b58:	d3a4      	bcc.n	83aa4 <memcpy+0xc>
   83b5a:	f831 3b02 	ldrh.w	r3, [r1], #2
   83b5e:	f820 3b02 	strh.w	r3, [r0], #2
   83b62:	e79f      	b.n	83aa4 <memcpy+0xc>
   83b64:	3a04      	subs	r2, #4
   83b66:	d3d9      	bcc.n	83b1c <memcpy+0x84>
   83b68:	3a01      	subs	r2, #1
   83b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
   83b6e:	f800 3b01 	strb.w	r3, [r0], #1
   83b72:	d2f9      	bcs.n	83b68 <memcpy+0xd0>
   83b74:	780b      	ldrb	r3, [r1, #0]
   83b76:	7003      	strb	r3, [r0, #0]
   83b78:	784b      	ldrb	r3, [r1, #1]
   83b7a:	7043      	strb	r3, [r0, #1]
   83b7c:	788b      	ldrb	r3, [r1, #2]
   83b7e:	7083      	strb	r3, [r0, #2]
   83b80:	4660      	mov	r0, ip
   83b82:	4770      	bx	lr

00083b84 <memmove>:
   83b84:	4288      	cmp	r0, r1
   83b86:	b5f0      	push	{r4, r5, r6, r7, lr}
   83b88:	d90d      	bls.n	83ba6 <memmove+0x22>
   83b8a:	188b      	adds	r3, r1, r2
   83b8c:	4298      	cmp	r0, r3
   83b8e:	d20a      	bcs.n	83ba6 <memmove+0x22>
   83b90:	1884      	adds	r4, r0, r2
   83b92:	2a00      	cmp	r2, #0
   83b94:	d051      	beq.n	83c3a <memmove+0xb6>
   83b96:	4622      	mov	r2, r4
   83b98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83b9c:	4299      	cmp	r1, r3
   83b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83ba2:	d1f9      	bne.n	83b98 <memmove+0x14>
   83ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83ba6:	2a0f      	cmp	r2, #15
   83ba8:	d948      	bls.n	83c3c <memmove+0xb8>
   83baa:	ea41 0300 	orr.w	r3, r1, r0
   83bae:	079b      	lsls	r3, r3, #30
   83bb0:	d146      	bne.n	83c40 <memmove+0xbc>
   83bb2:	4615      	mov	r5, r2
   83bb4:	f100 0410 	add.w	r4, r0, #16
   83bb8:	f101 0310 	add.w	r3, r1, #16
   83bbc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83bc0:	3d10      	subs	r5, #16
   83bc2:	f844 6c10 	str.w	r6, [r4, #-16]
   83bc6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83bca:	2d0f      	cmp	r5, #15
   83bcc:	f844 6c0c 	str.w	r6, [r4, #-12]
   83bd0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83bd4:	f104 0410 	add.w	r4, r4, #16
   83bd8:	f844 6c18 	str.w	r6, [r4, #-24]
   83bdc:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83be0:	f103 0310 	add.w	r3, r3, #16
   83be4:	f844 6c14 	str.w	r6, [r4, #-20]
   83be8:	d8e8      	bhi.n	83bbc <memmove+0x38>
   83bea:	f1a2 0310 	sub.w	r3, r2, #16
   83bee:	f023 030f 	bic.w	r3, r3, #15
   83bf2:	f002 0e0f 	and.w	lr, r2, #15
   83bf6:	3310      	adds	r3, #16
   83bf8:	f1be 0f03 	cmp.w	lr, #3
   83bfc:	4419      	add	r1, r3
   83bfe:	4403      	add	r3, r0
   83c00:	d921      	bls.n	83c46 <memmove+0xc2>
   83c02:	460e      	mov	r6, r1
   83c04:	4674      	mov	r4, lr
   83c06:	1f1d      	subs	r5, r3, #4
   83c08:	f856 7b04 	ldr.w	r7, [r6], #4
   83c0c:	3c04      	subs	r4, #4
   83c0e:	2c03      	cmp	r4, #3
   83c10:	f845 7f04 	str.w	r7, [r5, #4]!
   83c14:	d8f8      	bhi.n	83c08 <memmove+0x84>
   83c16:	f1ae 0404 	sub.w	r4, lr, #4
   83c1a:	f024 0403 	bic.w	r4, r4, #3
   83c1e:	3404      	adds	r4, #4
   83c20:	4421      	add	r1, r4
   83c22:	4423      	add	r3, r4
   83c24:	f002 0203 	and.w	r2, r2, #3
   83c28:	b162      	cbz	r2, 83c44 <memmove+0xc0>
   83c2a:	3b01      	subs	r3, #1
   83c2c:	440a      	add	r2, r1
   83c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   83c32:	428a      	cmp	r2, r1
   83c34:	f803 4f01 	strb.w	r4, [r3, #1]!
   83c38:	d1f9      	bne.n	83c2e <memmove+0xaa>
   83c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c3c:	4603      	mov	r3, r0
   83c3e:	e7f3      	b.n	83c28 <memmove+0xa4>
   83c40:	4603      	mov	r3, r0
   83c42:	e7f2      	b.n	83c2a <memmove+0xa6>
   83c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c46:	4672      	mov	r2, lr
   83c48:	e7ee      	b.n	83c28 <memmove+0xa4>
   83c4a:	bf00      	nop

00083c4c <__malloc_lock>:
   83c4c:	4801      	ldr	r0, [pc, #4]	; (83c54 <__malloc_lock+0x8>)
   83c4e:	f7ff bba1 	b.w	83394 <__retarget_lock_acquire_recursive>
   83c52:	bf00      	nop
   83c54:	20070c84 	.word	0x20070c84

00083c58 <__malloc_unlock>:
   83c58:	4801      	ldr	r0, [pc, #4]	; (83c60 <__malloc_unlock+0x8>)
   83c5a:	f7ff bb9d 	b.w	83398 <__retarget_lock_release_recursive>
   83c5e:	bf00      	nop
   83c60:	20070c84 	.word	0x20070c84

00083c64 <_realloc_r>:
   83c64:	2900      	cmp	r1, #0
   83c66:	f000 8094 	beq.w	83d92 <_realloc_r+0x12e>
   83c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83c6e:	460c      	mov	r4, r1
   83c70:	4615      	mov	r5, r2
   83c72:	b083      	sub	sp, #12
   83c74:	4680      	mov	r8, r0
   83c76:	f105 060b 	add.w	r6, r5, #11
   83c7a:	f7ff ffe7 	bl	83c4c <__malloc_lock>
   83c7e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83c82:	2e16      	cmp	r6, #22
   83c84:	f02e 0703 	bic.w	r7, lr, #3
   83c88:	f1a4 0908 	sub.w	r9, r4, #8
   83c8c:	d83c      	bhi.n	83d08 <_realloc_r+0xa4>
   83c8e:	2210      	movs	r2, #16
   83c90:	4616      	mov	r6, r2
   83c92:	42b5      	cmp	r5, r6
   83c94:	d83d      	bhi.n	83d12 <_realloc_r+0xae>
   83c96:	4297      	cmp	r7, r2
   83c98:	da43      	bge.n	83d22 <_realloc_r+0xbe>
   83c9a:	4bc6      	ldr	r3, [pc, #792]	; (83fb4 <_realloc_r+0x350>)
   83c9c:	eb09 0007 	add.w	r0, r9, r7
   83ca0:	6899      	ldr	r1, [r3, #8]
   83ca2:	4288      	cmp	r0, r1
   83ca4:	f000 80c3 	beq.w	83e2e <_realloc_r+0x1ca>
   83ca8:	6843      	ldr	r3, [r0, #4]
   83caa:	f023 0101 	bic.w	r1, r3, #1
   83cae:	4401      	add	r1, r0
   83cb0:	6849      	ldr	r1, [r1, #4]
   83cb2:	07c9      	lsls	r1, r1, #31
   83cb4:	d54d      	bpl.n	83d52 <_realloc_r+0xee>
   83cb6:	f01e 0f01 	tst.w	lr, #1
   83cba:	f000 809b 	beq.w	83df4 <_realloc_r+0x190>
   83cbe:	4629      	mov	r1, r5
   83cc0:	4640      	mov	r0, r8
   83cc2:	f7ff fbeb 	bl	8349c <_malloc_r>
   83cc6:	4605      	mov	r5, r0
   83cc8:	2800      	cmp	r0, #0
   83cca:	d03b      	beq.n	83d44 <_realloc_r+0xe0>
   83ccc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83cd0:	f1a0 0208 	sub.w	r2, r0, #8
   83cd4:	f023 0301 	bic.w	r3, r3, #1
   83cd8:	444b      	add	r3, r9
   83cda:	429a      	cmp	r2, r3
   83cdc:	f000 812b 	beq.w	83f36 <_realloc_r+0x2d2>
   83ce0:	1f3a      	subs	r2, r7, #4
   83ce2:	2a24      	cmp	r2, #36	; 0x24
   83ce4:	f200 8118 	bhi.w	83f18 <_realloc_r+0x2b4>
   83ce8:	2a13      	cmp	r2, #19
   83cea:	f200 80eb 	bhi.w	83ec4 <_realloc_r+0x260>
   83cee:	4603      	mov	r3, r0
   83cf0:	4622      	mov	r2, r4
   83cf2:	6811      	ldr	r1, [r2, #0]
   83cf4:	6019      	str	r1, [r3, #0]
   83cf6:	6851      	ldr	r1, [r2, #4]
   83cf8:	6059      	str	r1, [r3, #4]
   83cfa:	6892      	ldr	r2, [r2, #8]
   83cfc:	609a      	str	r2, [r3, #8]
   83cfe:	4621      	mov	r1, r4
   83d00:	4640      	mov	r0, r8
   83d02:	f7ff f8ad 	bl	82e60 <_free_r>
   83d06:	e01d      	b.n	83d44 <_realloc_r+0xe0>
   83d08:	f026 0607 	bic.w	r6, r6, #7
   83d0c:	2e00      	cmp	r6, #0
   83d0e:	4632      	mov	r2, r6
   83d10:	dabf      	bge.n	83c92 <_realloc_r+0x2e>
   83d12:	2500      	movs	r5, #0
   83d14:	230c      	movs	r3, #12
   83d16:	4628      	mov	r0, r5
   83d18:	f8c8 3000 	str.w	r3, [r8]
   83d1c:	b003      	add	sp, #12
   83d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d22:	4625      	mov	r5, r4
   83d24:	1bbb      	subs	r3, r7, r6
   83d26:	2b0f      	cmp	r3, #15
   83d28:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83d2c:	d81d      	bhi.n	83d6a <_realloc_r+0x106>
   83d2e:	f002 0201 	and.w	r2, r2, #1
   83d32:	433a      	orrs	r2, r7
   83d34:	eb09 0107 	add.w	r1, r9, r7
   83d38:	f8c9 2004 	str.w	r2, [r9, #4]
   83d3c:	684b      	ldr	r3, [r1, #4]
   83d3e:	f043 0301 	orr.w	r3, r3, #1
   83d42:	604b      	str	r3, [r1, #4]
   83d44:	4640      	mov	r0, r8
   83d46:	f7ff ff87 	bl	83c58 <__malloc_unlock>
   83d4a:	4628      	mov	r0, r5
   83d4c:	b003      	add	sp, #12
   83d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d52:	f023 0303 	bic.w	r3, r3, #3
   83d56:	18f9      	adds	r1, r7, r3
   83d58:	4291      	cmp	r1, r2
   83d5a:	db1d      	blt.n	83d98 <_realloc_r+0x134>
   83d5c:	68c3      	ldr	r3, [r0, #12]
   83d5e:	6882      	ldr	r2, [r0, #8]
   83d60:	4625      	mov	r5, r4
   83d62:	60d3      	str	r3, [r2, #12]
   83d64:	460f      	mov	r7, r1
   83d66:	609a      	str	r2, [r3, #8]
   83d68:	e7dc      	b.n	83d24 <_realloc_r+0xc0>
   83d6a:	f002 0201 	and.w	r2, r2, #1
   83d6e:	eb09 0106 	add.w	r1, r9, r6
   83d72:	f043 0301 	orr.w	r3, r3, #1
   83d76:	4332      	orrs	r2, r6
   83d78:	f8c9 2004 	str.w	r2, [r9, #4]
   83d7c:	444f      	add	r7, r9
   83d7e:	604b      	str	r3, [r1, #4]
   83d80:	687b      	ldr	r3, [r7, #4]
   83d82:	3108      	adds	r1, #8
   83d84:	f043 0301 	orr.w	r3, r3, #1
   83d88:	607b      	str	r3, [r7, #4]
   83d8a:	4640      	mov	r0, r8
   83d8c:	f7ff f868 	bl	82e60 <_free_r>
   83d90:	e7d8      	b.n	83d44 <_realloc_r+0xe0>
   83d92:	4611      	mov	r1, r2
   83d94:	f7ff bb82 	b.w	8349c <_malloc_r>
   83d98:	f01e 0f01 	tst.w	lr, #1
   83d9c:	d18f      	bne.n	83cbe <_realloc_r+0x5a>
   83d9e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83da2:	eba9 0a01 	sub.w	sl, r9, r1
   83da6:	f8da 1004 	ldr.w	r1, [sl, #4]
   83daa:	f021 0103 	bic.w	r1, r1, #3
   83dae:	440b      	add	r3, r1
   83db0:	443b      	add	r3, r7
   83db2:	4293      	cmp	r3, r2
   83db4:	db26      	blt.n	83e04 <_realloc_r+0x1a0>
   83db6:	4655      	mov	r5, sl
   83db8:	68c1      	ldr	r1, [r0, #12]
   83dba:	6880      	ldr	r0, [r0, #8]
   83dbc:	1f3a      	subs	r2, r7, #4
   83dbe:	60c1      	str	r1, [r0, #12]
   83dc0:	6088      	str	r0, [r1, #8]
   83dc2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83dc6:	f8da 100c 	ldr.w	r1, [sl, #12]
   83dca:	2a24      	cmp	r2, #36	; 0x24
   83dcc:	60c1      	str	r1, [r0, #12]
   83dce:	6088      	str	r0, [r1, #8]
   83dd0:	d826      	bhi.n	83e20 <_realloc_r+0x1bc>
   83dd2:	2a13      	cmp	r2, #19
   83dd4:	f240 8081 	bls.w	83eda <_realloc_r+0x276>
   83dd8:	6821      	ldr	r1, [r4, #0]
   83dda:	2a1b      	cmp	r2, #27
   83ddc:	f8ca 1008 	str.w	r1, [sl, #8]
   83de0:	6861      	ldr	r1, [r4, #4]
   83de2:	f8ca 100c 	str.w	r1, [sl, #12]
   83de6:	f200 80ad 	bhi.w	83f44 <_realloc_r+0x2e0>
   83dea:	f104 0008 	add.w	r0, r4, #8
   83dee:	f10a 0210 	add.w	r2, sl, #16
   83df2:	e074      	b.n	83ede <_realloc_r+0x27a>
   83df4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83df8:	eba9 0a03 	sub.w	sl, r9, r3
   83dfc:	f8da 1004 	ldr.w	r1, [sl, #4]
   83e00:	f021 0103 	bic.w	r1, r1, #3
   83e04:	187b      	adds	r3, r7, r1
   83e06:	4293      	cmp	r3, r2
   83e08:	f6ff af59 	blt.w	83cbe <_realloc_r+0x5a>
   83e0c:	4655      	mov	r5, sl
   83e0e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83e12:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83e16:	1f3a      	subs	r2, r7, #4
   83e18:	2a24      	cmp	r2, #36	; 0x24
   83e1a:	60c1      	str	r1, [r0, #12]
   83e1c:	6088      	str	r0, [r1, #8]
   83e1e:	d9d8      	bls.n	83dd2 <_realloc_r+0x16e>
   83e20:	4621      	mov	r1, r4
   83e22:	4628      	mov	r0, r5
   83e24:	461f      	mov	r7, r3
   83e26:	46d1      	mov	r9, sl
   83e28:	f7ff feac 	bl	83b84 <memmove>
   83e2c:	e77a      	b.n	83d24 <_realloc_r+0xc0>
   83e2e:	6841      	ldr	r1, [r0, #4]
   83e30:	f106 0010 	add.w	r0, r6, #16
   83e34:	f021 0b03 	bic.w	fp, r1, #3
   83e38:	44bb      	add	fp, r7
   83e3a:	4583      	cmp	fp, r0
   83e3c:	da58      	bge.n	83ef0 <_realloc_r+0x28c>
   83e3e:	f01e 0f01 	tst.w	lr, #1
   83e42:	f47f af3c 	bne.w	83cbe <_realloc_r+0x5a>
   83e46:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83e4a:	eba9 0a01 	sub.w	sl, r9, r1
   83e4e:	f8da 1004 	ldr.w	r1, [sl, #4]
   83e52:	f021 0103 	bic.w	r1, r1, #3
   83e56:	448b      	add	fp, r1
   83e58:	4558      	cmp	r0, fp
   83e5a:	dcd3      	bgt.n	83e04 <_realloc_r+0x1a0>
   83e5c:	4655      	mov	r5, sl
   83e5e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83e62:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83e66:	1f3a      	subs	r2, r7, #4
   83e68:	2a24      	cmp	r2, #36	; 0x24
   83e6a:	60c1      	str	r1, [r0, #12]
   83e6c:	6088      	str	r0, [r1, #8]
   83e6e:	f200 808d 	bhi.w	83f8c <_realloc_r+0x328>
   83e72:	2a13      	cmp	r2, #19
   83e74:	f240 8087 	bls.w	83f86 <_realloc_r+0x322>
   83e78:	6821      	ldr	r1, [r4, #0]
   83e7a:	2a1b      	cmp	r2, #27
   83e7c:	f8ca 1008 	str.w	r1, [sl, #8]
   83e80:	6861      	ldr	r1, [r4, #4]
   83e82:	f8ca 100c 	str.w	r1, [sl, #12]
   83e86:	f200 8088 	bhi.w	83f9a <_realloc_r+0x336>
   83e8a:	f104 0108 	add.w	r1, r4, #8
   83e8e:	f10a 0210 	add.w	r2, sl, #16
   83e92:	6808      	ldr	r0, [r1, #0]
   83e94:	6010      	str	r0, [r2, #0]
   83e96:	6848      	ldr	r0, [r1, #4]
   83e98:	6050      	str	r0, [r2, #4]
   83e9a:	6889      	ldr	r1, [r1, #8]
   83e9c:	6091      	str	r1, [r2, #8]
   83e9e:	ebab 0206 	sub.w	r2, fp, r6
   83ea2:	eb0a 0106 	add.w	r1, sl, r6
   83ea6:	f042 0201 	orr.w	r2, r2, #1
   83eaa:	6099      	str	r1, [r3, #8]
   83eac:	604a      	str	r2, [r1, #4]
   83eae:	f8da 3004 	ldr.w	r3, [sl, #4]
   83eb2:	4640      	mov	r0, r8
   83eb4:	f003 0301 	and.w	r3, r3, #1
   83eb8:	431e      	orrs	r6, r3
   83eba:	f8ca 6004 	str.w	r6, [sl, #4]
   83ebe:	f7ff fecb 	bl	83c58 <__malloc_unlock>
   83ec2:	e742      	b.n	83d4a <_realloc_r+0xe6>
   83ec4:	6823      	ldr	r3, [r4, #0]
   83ec6:	2a1b      	cmp	r2, #27
   83ec8:	6003      	str	r3, [r0, #0]
   83eca:	6863      	ldr	r3, [r4, #4]
   83ecc:	6043      	str	r3, [r0, #4]
   83ece:	d827      	bhi.n	83f20 <_realloc_r+0x2bc>
   83ed0:	f100 0308 	add.w	r3, r0, #8
   83ed4:	f104 0208 	add.w	r2, r4, #8
   83ed8:	e70b      	b.n	83cf2 <_realloc_r+0x8e>
   83eda:	4620      	mov	r0, r4
   83edc:	462a      	mov	r2, r5
   83ede:	6801      	ldr	r1, [r0, #0]
   83ee0:	461f      	mov	r7, r3
   83ee2:	6011      	str	r1, [r2, #0]
   83ee4:	6841      	ldr	r1, [r0, #4]
   83ee6:	46d1      	mov	r9, sl
   83ee8:	6051      	str	r1, [r2, #4]
   83eea:	6883      	ldr	r3, [r0, #8]
   83eec:	6093      	str	r3, [r2, #8]
   83eee:	e719      	b.n	83d24 <_realloc_r+0xc0>
   83ef0:	ebab 0b06 	sub.w	fp, fp, r6
   83ef4:	eb09 0106 	add.w	r1, r9, r6
   83ef8:	f04b 0201 	orr.w	r2, fp, #1
   83efc:	6099      	str	r1, [r3, #8]
   83efe:	604a      	str	r2, [r1, #4]
   83f00:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83f04:	4640      	mov	r0, r8
   83f06:	f003 0301 	and.w	r3, r3, #1
   83f0a:	431e      	orrs	r6, r3
   83f0c:	f844 6c04 	str.w	r6, [r4, #-4]
   83f10:	f7ff fea2 	bl	83c58 <__malloc_unlock>
   83f14:	4625      	mov	r5, r4
   83f16:	e718      	b.n	83d4a <_realloc_r+0xe6>
   83f18:	4621      	mov	r1, r4
   83f1a:	f7ff fe33 	bl	83b84 <memmove>
   83f1e:	e6ee      	b.n	83cfe <_realloc_r+0x9a>
   83f20:	68a3      	ldr	r3, [r4, #8]
   83f22:	2a24      	cmp	r2, #36	; 0x24
   83f24:	6083      	str	r3, [r0, #8]
   83f26:	68e3      	ldr	r3, [r4, #12]
   83f28:	60c3      	str	r3, [r0, #12]
   83f2a:	d018      	beq.n	83f5e <_realloc_r+0x2fa>
   83f2c:	f100 0310 	add.w	r3, r0, #16
   83f30:	f104 0210 	add.w	r2, r4, #16
   83f34:	e6dd      	b.n	83cf2 <_realloc_r+0x8e>
   83f36:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83f3a:	4625      	mov	r5, r4
   83f3c:	f023 0303 	bic.w	r3, r3, #3
   83f40:	441f      	add	r7, r3
   83f42:	e6ef      	b.n	83d24 <_realloc_r+0xc0>
   83f44:	68a1      	ldr	r1, [r4, #8]
   83f46:	2a24      	cmp	r2, #36	; 0x24
   83f48:	f8ca 1010 	str.w	r1, [sl, #16]
   83f4c:	68e1      	ldr	r1, [r4, #12]
   83f4e:	f8ca 1014 	str.w	r1, [sl, #20]
   83f52:	d00d      	beq.n	83f70 <_realloc_r+0x30c>
   83f54:	f104 0010 	add.w	r0, r4, #16
   83f58:	f10a 0218 	add.w	r2, sl, #24
   83f5c:	e7bf      	b.n	83ede <_realloc_r+0x27a>
   83f5e:	6922      	ldr	r2, [r4, #16]
   83f60:	f100 0318 	add.w	r3, r0, #24
   83f64:	6102      	str	r2, [r0, #16]
   83f66:	6961      	ldr	r1, [r4, #20]
   83f68:	f104 0218 	add.w	r2, r4, #24
   83f6c:	6141      	str	r1, [r0, #20]
   83f6e:	e6c0      	b.n	83cf2 <_realloc_r+0x8e>
   83f70:	6922      	ldr	r2, [r4, #16]
   83f72:	f104 0018 	add.w	r0, r4, #24
   83f76:	f8ca 2018 	str.w	r2, [sl, #24]
   83f7a:	6961      	ldr	r1, [r4, #20]
   83f7c:	f10a 0220 	add.w	r2, sl, #32
   83f80:	f8ca 101c 	str.w	r1, [sl, #28]
   83f84:	e7ab      	b.n	83ede <_realloc_r+0x27a>
   83f86:	4621      	mov	r1, r4
   83f88:	462a      	mov	r2, r5
   83f8a:	e782      	b.n	83e92 <_realloc_r+0x22e>
   83f8c:	4621      	mov	r1, r4
   83f8e:	4628      	mov	r0, r5
   83f90:	9301      	str	r3, [sp, #4]
   83f92:	f7ff fdf7 	bl	83b84 <memmove>
   83f96:	9b01      	ldr	r3, [sp, #4]
   83f98:	e781      	b.n	83e9e <_realloc_r+0x23a>
   83f9a:	68a1      	ldr	r1, [r4, #8]
   83f9c:	2a24      	cmp	r2, #36	; 0x24
   83f9e:	f8ca 1010 	str.w	r1, [sl, #16]
   83fa2:	68e1      	ldr	r1, [r4, #12]
   83fa4:	f8ca 1014 	str.w	r1, [sl, #20]
   83fa8:	d006      	beq.n	83fb8 <_realloc_r+0x354>
   83faa:	f104 0110 	add.w	r1, r4, #16
   83fae:	f10a 0218 	add.w	r2, sl, #24
   83fb2:	e76e      	b.n	83e92 <_realloc_r+0x22e>
   83fb4:	200706e0 	.word	0x200706e0
   83fb8:	6922      	ldr	r2, [r4, #16]
   83fba:	f104 0118 	add.w	r1, r4, #24
   83fbe:	f8ca 2018 	str.w	r2, [sl, #24]
   83fc2:	6960      	ldr	r0, [r4, #20]
   83fc4:	f10a 0220 	add.w	r2, sl, #32
   83fc8:	f8ca 001c 	str.w	r0, [sl, #28]
   83fcc:	e761      	b.n	83e92 <_realloc_r+0x22e>
   83fce:	bf00      	nop

00083fd0 <_sbrk_r>:
   83fd0:	b538      	push	{r3, r4, r5, lr}
   83fd2:	2300      	movs	r3, #0
   83fd4:	4c06      	ldr	r4, [pc, #24]	; (83ff0 <_sbrk_r+0x20>)
   83fd6:	4605      	mov	r5, r0
   83fd8:	4608      	mov	r0, r1
   83fda:	6023      	str	r3, [r4, #0]
   83fdc:	f7fc ff60 	bl	80ea0 <_sbrk>
   83fe0:	1c43      	adds	r3, r0, #1
   83fe2:	d000      	beq.n	83fe6 <_sbrk_r+0x16>
   83fe4:	bd38      	pop	{r3, r4, r5, pc}
   83fe6:	6823      	ldr	r3, [r4, #0]
   83fe8:	2b00      	cmp	r3, #0
   83fea:	d0fb      	beq.n	83fe4 <_sbrk_r+0x14>
   83fec:	602b      	str	r3, [r5, #0]
   83fee:	bd38      	pop	{r3, r4, r5, pc}
   83ff0:	20070c98 	.word	0x20070c98

00083ff4 <__sread>:
   83ff4:	b510      	push	{r4, lr}
   83ff6:	460c      	mov	r4, r1
   83ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83ffc:	f000 fa22 	bl	84444 <_read_r>
   84000:	2800      	cmp	r0, #0
   84002:	db03      	blt.n	8400c <__sread+0x18>
   84004:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84006:	4403      	add	r3, r0
   84008:	6523      	str	r3, [r4, #80]	; 0x50
   8400a:	bd10      	pop	{r4, pc}
   8400c:	89a3      	ldrh	r3, [r4, #12]
   8400e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84012:	81a3      	strh	r3, [r4, #12]
   84014:	bd10      	pop	{r4, pc}
   84016:	bf00      	nop

00084018 <__swrite>:
   84018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8401c:	460c      	mov	r4, r1
   8401e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84022:	461f      	mov	r7, r3
   84024:	05cb      	lsls	r3, r1, #23
   84026:	4616      	mov	r6, r2
   84028:	4605      	mov	r5, r0
   8402a:	d507      	bpl.n	8403c <__swrite+0x24>
   8402c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84030:	2302      	movs	r3, #2
   84032:	2200      	movs	r2, #0
   84034:	f000 f9f0 	bl	84418 <_lseek_r>
   84038:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8403c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84040:	81a1      	strh	r1, [r4, #12]
   84042:	463b      	mov	r3, r7
   84044:	4632      	mov	r2, r6
   84046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8404a:	4628      	mov	r0, r5
   8404c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84050:	f000 b8d0 	b.w	841f4 <_write_r>

00084054 <__sseek>:
   84054:	b510      	push	{r4, lr}
   84056:	460c      	mov	r4, r1
   84058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8405c:	f000 f9dc 	bl	84418 <_lseek_r>
   84060:	89a3      	ldrh	r3, [r4, #12]
   84062:	1c42      	adds	r2, r0, #1
   84064:	bf0e      	itee	eq
   84066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8406a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8406e:	6520      	strne	r0, [r4, #80]	; 0x50
   84070:	81a3      	strh	r3, [r4, #12]
   84072:	bd10      	pop	{r4, pc}

00084074 <__sclose>:
   84074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84078:	f000 b934 	b.w	842e4 <_close_r>

0008407c <strlen>:
   8407c:	f020 0103 	bic.w	r1, r0, #3
   84080:	f010 0003 	ands.w	r0, r0, #3
   84084:	f1c0 0000 	rsb	r0, r0, #0
   84088:	f851 3b04 	ldr.w	r3, [r1], #4
   8408c:	f100 0c04 	add.w	ip, r0, #4
   84090:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84094:	f06f 0200 	mvn.w	r2, #0
   84098:	bf1c      	itt	ne
   8409a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8409e:	4313      	orrne	r3, r2
   840a0:	f04f 0c01 	mov.w	ip, #1
   840a4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   840a8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   840ac:	eba3 020c 	sub.w	r2, r3, ip
   840b0:	ea22 0203 	bic.w	r2, r2, r3
   840b4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   840b8:	bf04      	itt	eq
   840ba:	f851 3b04 	ldreq.w	r3, [r1], #4
   840be:	3004      	addeq	r0, #4
   840c0:	d0f4      	beq.n	840ac <strlen+0x30>
   840c2:	f1c2 0100 	rsb	r1, r2, #0
   840c6:	ea02 0201 	and.w	r2, r2, r1
   840ca:	fab2 f282 	clz	r2, r2
   840ce:	f1c2 021f 	rsb	r2, r2, #31
   840d2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   840d6:	4770      	bx	lr

000840d8 <__swbuf_r>:
   840d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   840da:	460d      	mov	r5, r1
   840dc:	4614      	mov	r4, r2
   840de:	4606      	mov	r6, r0
   840e0:	b110      	cbz	r0, 840e8 <__swbuf_r+0x10>
   840e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   840e4:	2b00      	cmp	r3, #0
   840e6:	d04b      	beq.n	84180 <__swbuf_r+0xa8>
   840e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   840ec:	69a3      	ldr	r3, [r4, #24]
   840ee:	b291      	uxth	r1, r2
   840f0:	0708      	lsls	r0, r1, #28
   840f2:	60a3      	str	r3, [r4, #8]
   840f4:	d539      	bpl.n	8416a <__swbuf_r+0x92>
   840f6:	6923      	ldr	r3, [r4, #16]
   840f8:	2b00      	cmp	r3, #0
   840fa:	d036      	beq.n	8416a <__swbuf_r+0x92>
   840fc:	b2ed      	uxtb	r5, r5
   840fe:	0489      	lsls	r1, r1, #18
   84100:	462f      	mov	r7, r5
   84102:	d515      	bpl.n	84130 <__swbuf_r+0x58>
   84104:	6822      	ldr	r2, [r4, #0]
   84106:	6961      	ldr	r1, [r4, #20]
   84108:	1ad3      	subs	r3, r2, r3
   8410a:	428b      	cmp	r3, r1
   8410c:	da1c      	bge.n	84148 <__swbuf_r+0x70>
   8410e:	3301      	adds	r3, #1
   84110:	68a1      	ldr	r1, [r4, #8]
   84112:	1c50      	adds	r0, r2, #1
   84114:	3901      	subs	r1, #1
   84116:	60a1      	str	r1, [r4, #8]
   84118:	6020      	str	r0, [r4, #0]
   8411a:	7015      	strb	r5, [r2, #0]
   8411c:	6962      	ldr	r2, [r4, #20]
   8411e:	429a      	cmp	r2, r3
   84120:	d01a      	beq.n	84158 <__swbuf_r+0x80>
   84122:	89a3      	ldrh	r3, [r4, #12]
   84124:	07db      	lsls	r3, r3, #31
   84126:	d501      	bpl.n	8412c <__swbuf_r+0x54>
   84128:	2d0a      	cmp	r5, #10
   8412a:	d015      	beq.n	84158 <__swbuf_r+0x80>
   8412c:	4638      	mov	r0, r7
   8412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84130:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84136:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8413a:	81a2      	strh	r2, [r4, #12]
   8413c:	6822      	ldr	r2, [r4, #0]
   8413e:	6661      	str	r1, [r4, #100]	; 0x64
   84140:	6961      	ldr	r1, [r4, #20]
   84142:	1ad3      	subs	r3, r2, r3
   84144:	428b      	cmp	r3, r1
   84146:	dbe2      	blt.n	8410e <__swbuf_r+0x36>
   84148:	4621      	mov	r1, r4
   8414a:	4630      	mov	r0, r6
   8414c:	f7fe fd0a 	bl	82b64 <_fflush_r>
   84150:	b940      	cbnz	r0, 84164 <__swbuf_r+0x8c>
   84152:	2301      	movs	r3, #1
   84154:	6822      	ldr	r2, [r4, #0]
   84156:	e7db      	b.n	84110 <__swbuf_r+0x38>
   84158:	4621      	mov	r1, r4
   8415a:	4630      	mov	r0, r6
   8415c:	f7fe fd02 	bl	82b64 <_fflush_r>
   84160:	2800      	cmp	r0, #0
   84162:	d0e3      	beq.n	8412c <__swbuf_r+0x54>
   84164:	f04f 37ff 	mov.w	r7, #4294967295
   84168:	e7e0      	b.n	8412c <__swbuf_r+0x54>
   8416a:	4621      	mov	r1, r4
   8416c:	4630      	mov	r0, r6
   8416e:	f7fe fbe9 	bl	82944 <__swsetup_r>
   84172:	2800      	cmp	r0, #0
   84174:	d1f6      	bne.n	84164 <__swbuf_r+0x8c>
   84176:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8417a:	6923      	ldr	r3, [r4, #16]
   8417c:	b291      	uxth	r1, r2
   8417e:	e7bd      	b.n	840fc <__swbuf_r+0x24>
   84180:	f7fe fd48 	bl	82c14 <__sinit>
   84184:	e7b0      	b.n	840e8 <__swbuf_r+0x10>
   84186:	bf00      	nop

00084188 <_wcrtomb_r>:
   84188:	b5f0      	push	{r4, r5, r6, r7, lr}
   8418a:	4606      	mov	r6, r0
   8418c:	b085      	sub	sp, #20
   8418e:	461f      	mov	r7, r3
   84190:	b189      	cbz	r1, 841b6 <_wcrtomb_r+0x2e>
   84192:	4c10      	ldr	r4, [pc, #64]	; (841d4 <_wcrtomb_r+0x4c>)
   84194:	4d10      	ldr	r5, [pc, #64]	; (841d8 <_wcrtomb_r+0x50>)
   84196:	6824      	ldr	r4, [r4, #0]
   84198:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8419a:	2c00      	cmp	r4, #0
   8419c:	bf08      	it	eq
   8419e:	462c      	moveq	r4, r5
   841a0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   841a4:	47a0      	blx	r4
   841a6:	1c43      	adds	r3, r0, #1
   841a8:	d103      	bne.n	841b2 <_wcrtomb_r+0x2a>
   841aa:	2200      	movs	r2, #0
   841ac:	238a      	movs	r3, #138	; 0x8a
   841ae:	603a      	str	r2, [r7, #0]
   841b0:	6033      	str	r3, [r6, #0]
   841b2:	b005      	add	sp, #20
   841b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   841b6:	460c      	mov	r4, r1
   841b8:	4a06      	ldr	r2, [pc, #24]	; (841d4 <_wcrtomb_r+0x4c>)
   841ba:	4d07      	ldr	r5, [pc, #28]	; (841d8 <_wcrtomb_r+0x50>)
   841bc:	6811      	ldr	r1, [r2, #0]
   841be:	4622      	mov	r2, r4
   841c0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   841c2:	a901      	add	r1, sp, #4
   841c4:	2c00      	cmp	r4, #0
   841c6:	bf08      	it	eq
   841c8:	462c      	moveq	r4, r5
   841ca:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   841ce:	47a0      	blx	r4
   841d0:	e7e9      	b.n	841a6 <_wcrtomb_r+0x1e>
   841d2:	bf00      	nop
   841d4:	20070140 	.word	0x20070140
   841d8:	20070574 	.word	0x20070574

000841dc <__ascii_wctomb>:
   841dc:	b119      	cbz	r1, 841e6 <__ascii_wctomb+0xa>
   841de:	2aff      	cmp	r2, #255	; 0xff
   841e0:	d803      	bhi.n	841ea <__ascii_wctomb+0xe>
   841e2:	700a      	strb	r2, [r1, #0]
   841e4:	2101      	movs	r1, #1
   841e6:	4608      	mov	r0, r1
   841e8:	4770      	bx	lr
   841ea:	238a      	movs	r3, #138	; 0x8a
   841ec:	f04f 31ff 	mov.w	r1, #4294967295
   841f0:	6003      	str	r3, [r0, #0]
   841f2:	e7f8      	b.n	841e6 <__ascii_wctomb+0xa>

000841f4 <_write_r>:
   841f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   841f6:	460e      	mov	r6, r1
   841f8:	2500      	movs	r5, #0
   841fa:	4c08      	ldr	r4, [pc, #32]	; (8421c <_write_r+0x28>)
   841fc:	4611      	mov	r1, r2
   841fe:	4607      	mov	r7, r0
   84200:	461a      	mov	r2, r3
   84202:	4630      	mov	r0, r6
   84204:	6025      	str	r5, [r4, #0]
   84206:	f7fc f9d9 	bl	805bc <_write>
   8420a:	1c43      	adds	r3, r0, #1
   8420c:	d000      	beq.n	84210 <_write_r+0x1c>
   8420e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84210:	6823      	ldr	r3, [r4, #0]
   84212:	2b00      	cmp	r3, #0
   84214:	d0fb      	beq.n	8420e <_write_r+0x1a>
   84216:	603b      	str	r3, [r7, #0]
   84218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8421a:	bf00      	nop
   8421c:	20070c98 	.word	0x20070c98

00084220 <__register_exitproc>:
   84220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84224:	4d2c      	ldr	r5, [pc, #176]	; (842d8 <__register_exitproc+0xb8>)
   84226:	4606      	mov	r6, r0
   84228:	6828      	ldr	r0, [r5, #0]
   8422a:	4698      	mov	r8, r3
   8422c:	460f      	mov	r7, r1
   8422e:	4691      	mov	r9, r2
   84230:	f7ff f8b0 	bl	83394 <__retarget_lock_acquire_recursive>
   84234:	4b29      	ldr	r3, [pc, #164]	; (842dc <__register_exitproc+0xbc>)
   84236:	681c      	ldr	r4, [r3, #0]
   84238:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8423c:	2b00      	cmp	r3, #0
   8423e:	d03e      	beq.n	842be <__register_exitproc+0x9e>
   84240:	685a      	ldr	r2, [r3, #4]
   84242:	2a1f      	cmp	r2, #31
   84244:	dc1c      	bgt.n	84280 <__register_exitproc+0x60>
   84246:	f102 0e01 	add.w	lr, r2, #1
   8424a:	b176      	cbz	r6, 8426a <__register_exitproc+0x4a>
   8424c:	2101      	movs	r1, #1
   8424e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84252:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84256:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8425a:	4091      	lsls	r1, r2
   8425c:	4308      	orrs	r0, r1
   8425e:	2e02      	cmp	r6, #2
   84260:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84264:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84268:	d023      	beq.n	842b2 <__register_exitproc+0x92>
   8426a:	3202      	adds	r2, #2
   8426c:	f8c3 e004 	str.w	lr, [r3, #4]
   84270:	6828      	ldr	r0, [r5, #0]
   84272:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84276:	f7ff f88f 	bl	83398 <__retarget_lock_release_recursive>
   8427a:	2000      	movs	r0, #0
   8427c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84280:	4b17      	ldr	r3, [pc, #92]	; (842e0 <__register_exitproc+0xc0>)
   84282:	b30b      	cbz	r3, 842c8 <__register_exitproc+0xa8>
   84284:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84288:	f7ff f900 	bl	8348c <malloc>
   8428c:	4603      	mov	r3, r0
   8428e:	b1d8      	cbz	r0, 842c8 <__register_exitproc+0xa8>
   84290:	2000      	movs	r0, #0
   84292:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84296:	f04f 0e01 	mov.w	lr, #1
   8429a:	6058      	str	r0, [r3, #4]
   8429c:	6019      	str	r1, [r3, #0]
   8429e:	4602      	mov	r2, r0
   842a0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   842a4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   842a8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   842ac:	2e00      	cmp	r6, #0
   842ae:	d0dc      	beq.n	8426a <__register_exitproc+0x4a>
   842b0:	e7cc      	b.n	8424c <__register_exitproc+0x2c>
   842b2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   842b6:	4301      	orrs	r1, r0
   842b8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   842bc:	e7d5      	b.n	8426a <__register_exitproc+0x4a>
   842be:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   842c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   842c6:	e7bb      	b.n	84240 <__register_exitproc+0x20>
   842c8:	6828      	ldr	r0, [r5, #0]
   842ca:	f7ff f865 	bl	83398 <__retarget_lock_release_recursive>
   842ce:	f04f 30ff 	mov.w	r0, #4294967295
   842d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   842d6:	bf00      	nop
   842d8:	20070570 	.word	0x20070570
   842dc:	000847d8 	.word	0x000847d8
   842e0:	0008348d 	.word	0x0008348d

000842e4 <_close_r>:
   842e4:	b538      	push	{r3, r4, r5, lr}
   842e6:	2300      	movs	r3, #0
   842e8:	4c06      	ldr	r4, [pc, #24]	; (84304 <_close_r+0x20>)
   842ea:	4605      	mov	r5, r0
   842ec:	4608      	mov	r0, r1
   842ee:	6023      	str	r3, [r4, #0]
   842f0:	f7fc fdf2 	bl	80ed8 <_close>
   842f4:	1c43      	adds	r3, r0, #1
   842f6:	d000      	beq.n	842fa <_close_r+0x16>
   842f8:	bd38      	pop	{r3, r4, r5, pc}
   842fa:	6823      	ldr	r3, [r4, #0]
   842fc:	2b00      	cmp	r3, #0
   842fe:	d0fb      	beq.n	842f8 <_close_r+0x14>
   84300:	602b      	str	r3, [r5, #0]
   84302:	bd38      	pop	{r3, r4, r5, pc}
   84304:	20070c98 	.word	0x20070c98

00084308 <_fclose_r>:
   84308:	b570      	push	{r4, r5, r6, lr}
   8430a:	b159      	cbz	r1, 84324 <_fclose_r+0x1c>
   8430c:	4605      	mov	r5, r0
   8430e:	460c      	mov	r4, r1
   84310:	b110      	cbz	r0, 84318 <_fclose_r+0x10>
   84312:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84314:	2b00      	cmp	r3, #0
   84316:	d03c      	beq.n	84392 <_fclose_r+0x8a>
   84318:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8431a:	07d8      	lsls	r0, r3, #31
   8431c:	d505      	bpl.n	8432a <_fclose_r+0x22>
   8431e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84322:	b92b      	cbnz	r3, 84330 <_fclose_r+0x28>
   84324:	2600      	movs	r6, #0
   84326:	4630      	mov	r0, r6
   84328:	bd70      	pop	{r4, r5, r6, pc}
   8432a:	89a3      	ldrh	r3, [r4, #12]
   8432c:	0599      	lsls	r1, r3, #22
   8432e:	d53c      	bpl.n	843aa <_fclose_r+0xa2>
   84330:	4621      	mov	r1, r4
   84332:	4628      	mov	r0, r5
   84334:	f7fe fb7a 	bl	82a2c <__sflush_r>
   84338:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8433a:	4606      	mov	r6, r0
   8433c:	b133      	cbz	r3, 8434c <_fclose_r+0x44>
   8433e:	69e1      	ldr	r1, [r4, #28]
   84340:	4628      	mov	r0, r5
   84342:	4798      	blx	r3
   84344:	2800      	cmp	r0, #0
   84346:	bfb8      	it	lt
   84348:	f04f 36ff 	movlt.w	r6, #4294967295
   8434c:	89a3      	ldrh	r3, [r4, #12]
   8434e:	061a      	lsls	r2, r3, #24
   84350:	d422      	bmi.n	84398 <_fclose_r+0x90>
   84352:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84354:	b141      	cbz	r1, 84368 <_fclose_r+0x60>
   84356:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8435a:	4299      	cmp	r1, r3
   8435c:	d002      	beq.n	84364 <_fclose_r+0x5c>
   8435e:	4628      	mov	r0, r5
   84360:	f7fe fd7e 	bl	82e60 <_free_r>
   84364:	2300      	movs	r3, #0
   84366:	6323      	str	r3, [r4, #48]	; 0x30
   84368:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8436a:	b121      	cbz	r1, 84376 <_fclose_r+0x6e>
   8436c:	4628      	mov	r0, r5
   8436e:	f7fe fd77 	bl	82e60 <_free_r>
   84372:	2300      	movs	r3, #0
   84374:	6463      	str	r3, [r4, #68]	; 0x44
   84376:	f7fe fc7d 	bl	82c74 <__sfp_lock_acquire>
   8437a:	2200      	movs	r2, #0
   8437c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8437e:	81a2      	strh	r2, [r4, #12]
   84380:	07db      	lsls	r3, r3, #31
   84382:	d50e      	bpl.n	843a2 <_fclose_r+0x9a>
   84384:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84386:	f7ff f803 	bl	83390 <__retarget_lock_close_recursive>
   8438a:	f7fe fc79 	bl	82c80 <__sfp_lock_release>
   8438e:	4630      	mov	r0, r6
   84390:	bd70      	pop	{r4, r5, r6, pc}
   84392:	f7fe fc3f 	bl	82c14 <__sinit>
   84396:	e7bf      	b.n	84318 <_fclose_r+0x10>
   84398:	6921      	ldr	r1, [r4, #16]
   8439a:	4628      	mov	r0, r5
   8439c:	f7fe fd60 	bl	82e60 <_free_r>
   843a0:	e7d7      	b.n	84352 <_fclose_r+0x4a>
   843a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   843a4:	f7fe fff8 	bl	83398 <__retarget_lock_release_recursive>
   843a8:	e7ec      	b.n	84384 <_fclose_r+0x7c>
   843aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   843ac:	f7fe fff2 	bl	83394 <__retarget_lock_acquire_recursive>
   843b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   843b4:	2b00      	cmp	r3, #0
   843b6:	d1bb      	bne.n	84330 <_fclose_r+0x28>
   843b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   843ba:	f016 0601 	ands.w	r6, r6, #1
   843be:	d1b1      	bne.n	84324 <_fclose_r+0x1c>
   843c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   843c2:	f7fe ffe9 	bl	83398 <__retarget_lock_release_recursive>
   843c6:	4630      	mov	r0, r6
   843c8:	bd70      	pop	{r4, r5, r6, pc}
   843ca:	bf00      	nop

000843cc <_fstat_r>:
   843cc:	b570      	push	{r4, r5, r6, lr}
   843ce:	460d      	mov	r5, r1
   843d0:	2300      	movs	r3, #0
   843d2:	4c07      	ldr	r4, [pc, #28]	; (843f0 <_fstat_r+0x24>)
   843d4:	4606      	mov	r6, r0
   843d6:	4611      	mov	r1, r2
   843d8:	4628      	mov	r0, r5
   843da:	6023      	str	r3, [r4, #0]
   843dc:	f7fc fd7f 	bl	80ede <_fstat>
   843e0:	1c43      	adds	r3, r0, #1
   843e2:	d000      	beq.n	843e6 <_fstat_r+0x1a>
   843e4:	bd70      	pop	{r4, r5, r6, pc}
   843e6:	6823      	ldr	r3, [r4, #0]
   843e8:	2b00      	cmp	r3, #0
   843ea:	d0fb      	beq.n	843e4 <_fstat_r+0x18>
   843ec:	6033      	str	r3, [r6, #0]
   843ee:	bd70      	pop	{r4, r5, r6, pc}
   843f0:	20070c98 	.word	0x20070c98

000843f4 <_isatty_r>:
   843f4:	b538      	push	{r3, r4, r5, lr}
   843f6:	2300      	movs	r3, #0
   843f8:	4c06      	ldr	r4, [pc, #24]	; (84414 <_isatty_r+0x20>)
   843fa:	4605      	mov	r5, r0
   843fc:	4608      	mov	r0, r1
   843fe:	6023      	str	r3, [r4, #0]
   84400:	f7fc fd72 	bl	80ee8 <_isatty>
   84404:	1c43      	adds	r3, r0, #1
   84406:	d000      	beq.n	8440a <_isatty_r+0x16>
   84408:	bd38      	pop	{r3, r4, r5, pc}
   8440a:	6823      	ldr	r3, [r4, #0]
   8440c:	2b00      	cmp	r3, #0
   8440e:	d0fb      	beq.n	84408 <_isatty_r+0x14>
   84410:	602b      	str	r3, [r5, #0]
   84412:	bd38      	pop	{r3, r4, r5, pc}
   84414:	20070c98 	.word	0x20070c98

00084418 <_lseek_r>:
   84418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8441a:	460e      	mov	r6, r1
   8441c:	2500      	movs	r5, #0
   8441e:	4c08      	ldr	r4, [pc, #32]	; (84440 <_lseek_r+0x28>)
   84420:	4611      	mov	r1, r2
   84422:	4607      	mov	r7, r0
   84424:	461a      	mov	r2, r3
   84426:	4630      	mov	r0, r6
   84428:	6025      	str	r5, [r4, #0]
   8442a:	f7fc fd5f 	bl	80eec <_lseek>
   8442e:	1c43      	adds	r3, r0, #1
   84430:	d000      	beq.n	84434 <_lseek_r+0x1c>
   84432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84434:	6823      	ldr	r3, [r4, #0]
   84436:	2b00      	cmp	r3, #0
   84438:	d0fb      	beq.n	84432 <_lseek_r+0x1a>
   8443a:	603b      	str	r3, [r7, #0]
   8443c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8443e:	bf00      	nop
   84440:	20070c98 	.word	0x20070c98

00084444 <_read_r>:
   84444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84446:	460e      	mov	r6, r1
   84448:	2500      	movs	r5, #0
   8444a:	4c08      	ldr	r4, [pc, #32]	; (8446c <_read_r+0x28>)
   8444c:	4611      	mov	r1, r2
   8444e:	4607      	mov	r7, r0
   84450:	461a      	mov	r2, r3
   84452:	4630      	mov	r0, r6
   84454:	6025      	str	r5, [r4, #0]
   84456:	f7fc f84d 	bl	804f4 <_read>
   8445a:	1c43      	adds	r3, r0, #1
   8445c:	d000      	beq.n	84460 <_read_r+0x1c>
   8445e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84460:	6823      	ldr	r3, [r4, #0]
   84462:	2b00      	cmp	r3, #0
   84464:	d0fb      	beq.n	8445e <_read_r+0x1a>
   84466:	603b      	str	r3, [r7, #0]
   84468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8446a:	bf00      	nop
   8446c:	20070c98 	.word	0x20070c98

00084470 <__aeabi_uldivmod>:
   84470:	b953      	cbnz	r3, 84488 <__aeabi_uldivmod+0x18>
   84472:	b94a      	cbnz	r2, 84488 <__aeabi_uldivmod+0x18>
   84474:	2900      	cmp	r1, #0
   84476:	bf08      	it	eq
   84478:	2800      	cmpeq	r0, #0
   8447a:	bf1c      	itt	ne
   8447c:	f04f 31ff 	movne.w	r1, #4294967295
   84480:	f04f 30ff 	movne.w	r0, #4294967295
   84484:	f000 b97a 	b.w	8477c <__aeabi_idiv0>
   84488:	f1ad 0c08 	sub.w	ip, sp, #8
   8448c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   84490:	f000 f806 	bl	844a0 <__udivmoddi4>
   84494:	f8dd e004 	ldr.w	lr, [sp, #4]
   84498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8449c:	b004      	add	sp, #16
   8449e:	4770      	bx	lr

000844a0 <__udivmoddi4>:
   844a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   844a4:	468c      	mov	ip, r1
   844a6:	460e      	mov	r6, r1
   844a8:	4604      	mov	r4, r0
   844aa:	9d08      	ldr	r5, [sp, #32]
   844ac:	2b00      	cmp	r3, #0
   844ae:	d150      	bne.n	84552 <__udivmoddi4+0xb2>
   844b0:	428a      	cmp	r2, r1
   844b2:	4617      	mov	r7, r2
   844b4:	d96c      	bls.n	84590 <__udivmoddi4+0xf0>
   844b6:	fab2 fe82 	clz	lr, r2
   844ba:	f1be 0f00 	cmp.w	lr, #0
   844be:	d00b      	beq.n	844d8 <__udivmoddi4+0x38>
   844c0:	f1ce 0c20 	rsb	ip, lr, #32
   844c4:	fa01 f60e 	lsl.w	r6, r1, lr
   844c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   844cc:	fa02 f70e 	lsl.w	r7, r2, lr
   844d0:	ea4c 0c06 	orr.w	ip, ip, r6
   844d4:	fa00 f40e 	lsl.w	r4, r0, lr
   844d8:	0c3a      	lsrs	r2, r7, #16
   844da:	fbbc f9f2 	udiv	r9, ip, r2
   844de:	b2bb      	uxth	r3, r7
   844e0:	fb02 cc19 	mls	ip, r2, r9, ip
   844e4:	fb09 fa03 	mul.w	sl, r9, r3
   844e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   844ec:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   844f0:	45b2      	cmp	sl, r6
   844f2:	d90a      	bls.n	8450a <__udivmoddi4+0x6a>
   844f4:	19f6      	adds	r6, r6, r7
   844f6:	f109 31ff 	add.w	r1, r9, #4294967295
   844fa:	f080 8125 	bcs.w	84748 <__udivmoddi4+0x2a8>
   844fe:	45b2      	cmp	sl, r6
   84500:	f240 8122 	bls.w	84748 <__udivmoddi4+0x2a8>
   84504:	f1a9 0902 	sub.w	r9, r9, #2
   84508:	443e      	add	r6, r7
   8450a:	eba6 060a 	sub.w	r6, r6, sl
   8450e:	fbb6 f0f2 	udiv	r0, r6, r2
   84512:	fb02 6610 	mls	r6, r2, r0, r6
   84516:	fb00 f303 	mul.w	r3, r0, r3
   8451a:	b2a4      	uxth	r4, r4
   8451c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   84520:	42a3      	cmp	r3, r4
   84522:	d909      	bls.n	84538 <__udivmoddi4+0x98>
   84524:	19e4      	adds	r4, r4, r7
   84526:	f100 32ff 	add.w	r2, r0, #4294967295
   8452a:	f080 810b 	bcs.w	84744 <__udivmoddi4+0x2a4>
   8452e:	42a3      	cmp	r3, r4
   84530:	f240 8108 	bls.w	84744 <__udivmoddi4+0x2a4>
   84534:	3802      	subs	r0, #2
   84536:	443c      	add	r4, r7
   84538:	2100      	movs	r1, #0
   8453a:	1ae4      	subs	r4, r4, r3
   8453c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84540:	2d00      	cmp	r5, #0
   84542:	d062      	beq.n	8460a <__udivmoddi4+0x16a>
   84544:	2300      	movs	r3, #0
   84546:	fa24 f40e 	lsr.w	r4, r4, lr
   8454a:	602c      	str	r4, [r5, #0]
   8454c:	606b      	str	r3, [r5, #4]
   8454e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84552:	428b      	cmp	r3, r1
   84554:	d907      	bls.n	84566 <__udivmoddi4+0xc6>
   84556:	2d00      	cmp	r5, #0
   84558:	d055      	beq.n	84606 <__udivmoddi4+0x166>
   8455a:	2100      	movs	r1, #0
   8455c:	e885 0041 	stmia.w	r5, {r0, r6}
   84560:	4608      	mov	r0, r1
   84562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84566:	fab3 f183 	clz	r1, r3
   8456a:	2900      	cmp	r1, #0
   8456c:	f040 808f 	bne.w	8468e <__udivmoddi4+0x1ee>
   84570:	42b3      	cmp	r3, r6
   84572:	d302      	bcc.n	8457a <__udivmoddi4+0xda>
   84574:	4282      	cmp	r2, r0
   84576:	f200 80fc 	bhi.w	84772 <__udivmoddi4+0x2d2>
   8457a:	1a84      	subs	r4, r0, r2
   8457c:	eb66 0603 	sbc.w	r6, r6, r3
   84580:	2001      	movs	r0, #1
   84582:	46b4      	mov	ip, r6
   84584:	2d00      	cmp	r5, #0
   84586:	d040      	beq.n	8460a <__udivmoddi4+0x16a>
   84588:	e885 1010 	stmia.w	r5, {r4, ip}
   8458c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84590:	b912      	cbnz	r2, 84598 <__udivmoddi4+0xf8>
   84592:	2701      	movs	r7, #1
   84594:	fbb7 f7f2 	udiv	r7, r7, r2
   84598:	fab7 fe87 	clz	lr, r7
   8459c:	f1be 0f00 	cmp.w	lr, #0
   845a0:	d135      	bne.n	8460e <__udivmoddi4+0x16e>
   845a2:	2101      	movs	r1, #1
   845a4:	1bf6      	subs	r6, r6, r7
   845a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   845aa:	fa1f f887 	uxth.w	r8, r7
   845ae:	fbb6 f2fc 	udiv	r2, r6, ip
   845b2:	fb0c 6612 	mls	r6, ip, r2, r6
   845b6:	fb08 f002 	mul.w	r0, r8, r2
   845ba:	0c23      	lsrs	r3, r4, #16
   845bc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   845c0:	42b0      	cmp	r0, r6
   845c2:	d907      	bls.n	845d4 <__udivmoddi4+0x134>
   845c4:	19f6      	adds	r6, r6, r7
   845c6:	f102 33ff 	add.w	r3, r2, #4294967295
   845ca:	d202      	bcs.n	845d2 <__udivmoddi4+0x132>
   845cc:	42b0      	cmp	r0, r6
   845ce:	f200 80d2 	bhi.w	84776 <__udivmoddi4+0x2d6>
   845d2:	461a      	mov	r2, r3
   845d4:	1a36      	subs	r6, r6, r0
   845d6:	fbb6 f0fc 	udiv	r0, r6, ip
   845da:	fb0c 6610 	mls	r6, ip, r0, r6
   845de:	fb08 f800 	mul.w	r8, r8, r0
   845e2:	b2a3      	uxth	r3, r4
   845e4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   845e8:	45a0      	cmp	r8, r4
   845ea:	d907      	bls.n	845fc <__udivmoddi4+0x15c>
   845ec:	19e4      	adds	r4, r4, r7
   845ee:	f100 33ff 	add.w	r3, r0, #4294967295
   845f2:	d202      	bcs.n	845fa <__udivmoddi4+0x15a>
   845f4:	45a0      	cmp	r8, r4
   845f6:	f200 80b9 	bhi.w	8476c <__udivmoddi4+0x2cc>
   845fa:	4618      	mov	r0, r3
   845fc:	eba4 0408 	sub.w	r4, r4, r8
   84600:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   84604:	e79c      	b.n	84540 <__udivmoddi4+0xa0>
   84606:	4629      	mov	r1, r5
   84608:	4628      	mov	r0, r5
   8460a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8460e:	fa07 f70e 	lsl.w	r7, r7, lr
   84612:	f1ce 0320 	rsb	r3, lr, #32
   84616:	fa26 f203 	lsr.w	r2, r6, r3
   8461a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8461e:	fbb2 f1fc 	udiv	r1, r2, ip
   84622:	fa1f f887 	uxth.w	r8, r7
   84626:	fb0c 2211 	mls	r2, ip, r1, r2
   8462a:	fa06 f60e 	lsl.w	r6, r6, lr
   8462e:	fa20 f303 	lsr.w	r3, r0, r3
   84632:	fb01 f908 	mul.w	r9, r1, r8
   84636:	4333      	orrs	r3, r6
   84638:	0c1e      	lsrs	r6, r3, #16
   8463a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8463e:	45b1      	cmp	r9, r6
   84640:	fa00 f40e 	lsl.w	r4, r0, lr
   84644:	d909      	bls.n	8465a <__udivmoddi4+0x1ba>
   84646:	19f6      	adds	r6, r6, r7
   84648:	f101 32ff 	add.w	r2, r1, #4294967295
   8464c:	f080 808c 	bcs.w	84768 <__udivmoddi4+0x2c8>
   84650:	45b1      	cmp	r9, r6
   84652:	f240 8089 	bls.w	84768 <__udivmoddi4+0x2c8>
   84656:	3902      	subs	r1, #2
   84658:	443e      	add	r6, r7
   8465a:	eba6 0609 	sub.w	r6, r6, r9
   8465e:	fbb6 f0fc 	udiv	r0, r6, ip
   84662:	fb0c 6210 	mls	r2, ip, r0, r6
   84666:	fb00 f908 	mul.w	r9, r0, r8
   8466a:	b29e      	uxth	r6, r3
   8466c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84670:	45b1      	cmp	r9, r6
   84672:	d907      	bls.n	84684 <__udivmoddi4+0x1e4>
   84674:	19f6      	adds	r6, r6, r7
   84676:	f100 33ff 	add.w	r3, r0, #4294967295
   8467a:	d271      	bcs.n	84760 <__udivmoddi4+0x2c0>
   8467c:	45b1      	cmp	r9, r6
   8467e:	d96f      	bls.n	84760 <__udivmoddi4+0x2c0>
   84680:	3802      	subs	r0, #2
   84682:	443e      	add	r6, r7
   84684:	eba6 0609 	sub.w	r6, r6, r9
   84688:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   8468c:	e78f      	b.n	845ae <__udivmoddi4+0x10e>
   8468e:	f1c1 0720 	rsb	r7, r1, #32
   84692:	fa22 f807 	lsr.w	r8, r2, r7
   84696:	408b      	lsls	r3, r1
   84698:	ea48 0303 	orr.w	r3, r8, r3
   8469c:	fa26 f407 	lsr.w	r4, r6, r7
   846a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   846a4:	fbb4 f9fe 	udiv	r9, r4, lr
   846a8:	fa1f fc83 	uxth.w	ip, r3
   846ac:	fb0e 4419 	mls	r4, lr, r9, r4
   846b0:	408e      	lsls	r6, r1
   846b2:	fa20 f807 	lsr.w	r8, r0, r7
   846b6:	fb09 fa0c 	mul.w	sl, r9, ip
   846ba:	ea48 0806 	orr.w	r8, r8, r6
   846be:	ea4f 4618 	mov.w	r6, r8, lsr #16
   846c2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   846c6:	45a2      	cmp	sl, r4
   846c8:	fa02 f201 	lsl.w	r2, r2, r1
   846cc:	fa00 f601 	lsl.w	r6, r0, r1
   846d0:	d908      	bls.n	846e4 <__udivmoddi4+0x244>
   846d2:	18e4      	adds	r4, r4, r3
   846d4:	f109 30ff 	add.w	r0, r9, #4294967295
   846d8:	d244      	bcs.n	84764 <__udivmoddi4+0x2c4>
   846da:	45a2      	cmp	sl, r4
   846dc:	d942      	bls.n	84764 <__udivmoddi4+0x2c4>
   846de:	f1a9 0902 	sub.w	r9, r9, #2
   846e2:	441c      	add	r4, r3
   846e4:	eba4 040a 	sub.w	r4, r4, sl
   846e8:	fbb4 f0fe 	udiv	r0, r4, lr
   846ec:	fb0e 4410 	mls	r4, lr, r0, r4
   846f0:	fb00 fc0c 	mul.w	ip, r0, ip
   846f4:	fa1f f888 	uxth.w	r8, r8
   846f8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   846fc:	45a4      	cmp	ip, r4
   846fe:	d907      	bls.n	84710 <__udivmoddi4+0x270>
   84700:	18e4      	adds	r4, r4, r3
   84702:	f100 3eff 	add.w	lr, r0, #4294967295
   84706:	d229      	bcs.n	8475c <__udivmoddi4+0x2bc>
   84708:	45a4      	cmp	ip, r4
   8470a:	d927      	bls.n	8475c <__udivmoddi4+0x2bc>
   8470c:	3802      	subs	r0, #2
   8470e:	441c      	add	r4, r3
   84710:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84714:	fba0 8902 	umull	r8, r9, r0, r2
   84718:	eba4 0c0c 	sub.w	ip, r4, ip
   8471c:	45cc      	cmp	ip, r9
   8471e:	46c2      	mov	sl, r8
   84720:	46ce      	mov	lr, r9
   84722:	d315      	bcc.n	84750 <__udivmoddi4+0x2b0>
   84724:	d012      	beq.n	8474c <__udivmoddi4+0x2ac>
   84726:	b155      	cbz	r5, 8473e <__udivmoddi4+0x29e>
   84728:	ebb6 030a 	subs.w	r3, r6, sl
   8472c:	eb6c 060e 	sbc.w	r6, ip, lr
   84730:	fa06 f707 	lsl.w	r7, r6, r7
   84734:	40cb      	lsrs	r3, r1
   84736:	431f      	orrs	r7, r3
   84738:	40ce      	lsrs	r6, r1
   8473a:	602f      	str	r7, [r5, #0]
   8473c:	606e      	str	r6, [r5, #4]
   8473e:	2100      	movs	r1, #0
   84740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84744:	4610      	mov	r0, r2
   84746:	e6f7      	b.n	84538 <__udivmoddi4+0x98>
   84748:	4689      	mov	r9, r1
   8474a:	e6de      	b.n	8450a <__udivmoddi4+0x6a>
   8474c:	4546      	cmp	r6, r8
   8474e:	d2ea      	bcs.n	84726 <__udivmoddi4+0x286>
   84750:	ebb8 0a02 	subs.w	sl, r8, r2
   84754:	eb69 0e03 	sbc.w	lr, r9, r3
   84758:	3801      	subs	r0, #1
   8475a:	e7e4      	b.n	84726 <__udivmoddi4+0x286>
   8475c:	4670      	mov	r0, lr
   8475e:	e7d7      	b.n	84710 <__udivmoddi4+0x270>
   84760:	4618      	mov	r0, r3
   84762:	e78f      	b.n	84684 <__udivmoddi4+0x1e4>
   84764:	4681      	mov	r9, r0
   84766:	e7bd      	b.n	846e4 <__udivmoddi4+0x244>
   84768:	4611      	mov	r1, r2
   8476a:	e776      	b.n	8465a <__udivmoddi4+0x1ba>
   8476c:	3802      	subs	r0, #2
   8476e:	443c      	add	r4, r7
   84770:	e744      	b.n	845fc <__udivmoddi4+0x15c>
   84772:	4608      	mov	r0, r1
   84774:	e706      	b.n	84584 <__udivmoddi4+0xe4>
   84776:	3a02      	subs	r2, #2
   84778:	443e      	add	r6, r7
   8477a:	e72b      	b.n	845d4 <__udivmoddi4+0x134>

0008477c <__aeabi_idiv0>:
   8477c:	4770      	bx	lr
   8477e:	bf00      	nop
   84780:	64724148 	.word	0x64724148
   84784:	75616620 	.word	0x75616620
   84788:	203a746c 	.word	0x203a746c
   8478c:	0a756c25 	.word	0x0a756c25
   84790:	00000000 	.word	0x00000000
   84794:	004a4548 	.word	0x004a4548
   84798:	204a4548 	.word	0x204a4548
   8479c:	6e656769 	.word	0x6e656769
   847a0:	00000000 	.word	0x00000000
   847a4:	736e6f43 	.word	0x736e6f43
   847a8:	20656c6f 	.word	0x20656c6f
   847ac:	64616572 	.word	0x64616572
   847b0:	00000a79 	.word	0x00000a79
   847b4:	3d3d3d3d 	.word	0x3d3d3d3d
   847b8:	3d3d3d3d 	.word	0x3d3d3d3d
   847bc:	3d3d3d3d 	.word	0x3d3d3d3d
   847c0:	00000a3d 	.word	0x00000a3d
   847c4:	20414843 	.word	0x20414843
   847c8:	6f746f4d 	.word	0x6f746f4d
   847cc:	656c2072 	.word	0x656c2072
   847d0:	203a7466 	.word	0x203a7466
   847d4:	00756c25 	.word	0x00756c25

000847d8 <_global_impure_ptr>:
   847d8:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   847e8:	46454443 00000000 33323130 37363534     CDEF....01234567
   847f8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84808:	0000296c                                l)..

0008480c <blanks.7217>:
   8480c:	20202020 20202020 20202020 20202020                     

0008481c <zeroes.7218>:
   8481c:	30303030 30303030 30303030 30303030     0000000000000000
   8482c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008483c <_ctype_>:
   8483c:	20202000 20202020 28282020 20282828     .         ((((( 
   8484c:	20202020 20202020 20202020 20202020                     
   8485c:	10108820 10101010 10101010 10101010      ...............
   8486c:	04040410 04040404 10040404 10101010     ................
   8487c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8488c:	01010101 01010101 01010101 10101010     ................
   8489c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   848ac:	02020202 02020202 02020202 10101010     ................
   848bc:	00000020 00000000 00000000 00000000      ...............
	...

00084940 <_init>:
   84940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84942:	bf00      	nop
   84944:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84946:	bc08      	pop	{r3}
   84948:	469e      	mov	lr, r3
   8494a:	4770      	bx	lr

0008494c <__init_array_start>:
   8494c:	00082a0d 	.word	0x00082a0d

00084950 <__frame_dummy_init_array_entry>:
   84950:	00080119                                ....

00084954 <_fini>:
   84954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84956:	bf00      	nop
   84958:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8495a:	bc08      	pop	{r3}
   8495c:	469e      	mov	lr, r3
   8495e:	4770      	bx	lr

00084960 <__fini_array_start>:
   84960:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <_impure_ptr>:
20070140:	20070148 00000000                       H.. ....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <__atexit_recursive_mutex>:
20070570:	20070c74                                t.. 

20070574 <__global_locale>:
20070574:	00000043 00000000 00000000 00000000     C...............
	...
20070594:	00000043 00000000 00000000 00000000     C...............
	...
200705b4:	00000043 00000000 00000000 00000000     C...............
	...
200705d4:	00000043 00000000 00000000 00000000     C...............
	...
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	000841dd 000839e1 00000000 0008483c     .A...9......<H..
20070664:	00084838 00084790 00084790 00084790     8H...G...G...G..
20070674:	00084790 00084790 00084790 00084790     .G...G...G...G..
20070684:	00084790 00084790 ffffffff ffffffff     .G...G..........
20070694:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706e0 <__malloc_av_>:
	...
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 

20070ae8 <__malloc_sbrk_base>:
20070ae8:	ffffffff                                ....

20070aec <__malloc_trim_threshold>:
20070aec:	00020000                                ....
