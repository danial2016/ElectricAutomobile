
ARCHER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e3c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084e3c  00084e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20070000  00084e44  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000108  20070af0  00085934  00020af0  2**2
                  ALLOC
  4 .stack        00002000  20070bf8  00085a3c  00020af0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020af0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b19  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017d14  00000000  00000000  00020b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000382e  00000000  00000000  00038886  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004225  00000000  00000000  0003c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ab8  00000000  00000000  000402d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000998  00000000  00000000  00040d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ad3f  00000000  00000000  00041729  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011574  00000000  00000000  0005c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00066e0e  00000000  00000000  0006d9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002584  00000000  00000000  000d47ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f8 2b 07 20 91 09 08 00 8d 09 08 00 bd 0c 08 00     .+. ............
   80010:	8d 09 08 00 8d 09 08 00 8d 09 08 00 00 00 00 00     ................
	...
   8002c:	8d 09 08 00 8d 09 08 00 00 00 00 00 8d 09 08 00     ................
   8003c:	5d 10 08 00 8d 09 08 00 8d 09 08 00 8d 09 08 00     ]...............
   8004c:	8d 09 08 00 8d 09 08 00 8d 09 08 00 8d 09 08 00     ................
   8005c:	8d 09 08 00 8d 09 08 00 8d 09 08 00 00 00 00 00     ................
   8006c:	11 08 08 00 25 08 08 00 39 08 08 00 4d 08 08 00     ....%...9...M...
	...
   80084:	8d 09 08 00 8d 09 08 00 8d 09 08 00 8d 09 08 00     ................
   80094:	8d 09 08 00 8d 09 08 00 8d 09 08 00 8d 09 08 00     ................
   800a4:	00 00 00 00 8d 09 08 00 8d 09 08 00 8d 09 08 00     ................
   800b4:	8d 09 08 00 4d 03 08 00 8d 09 08 00 8d 09 08 00     ....M...........
   800c4:	8d 09 08 00 8d 09 08 00 8d 09 08 00 8d 09 08 00     ................
   800d4:	8d 09 08 00 8d 09 08 00 8d 09 08 00 8d 09 08 00     ................
   800e4:	8d 09 08 00 8d 09 08 00 8d 09 08 00 8d 09 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070af0 	.word	0x20070af0
   80110:	00000000 	.word	0x00000000
   80114:	00084e44 	.word	0x00084e44

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00084e44 	.word	0x00084e44
   80154:	20070af4 	.word	0x20070af4
   80158:	00084e44 	.word	0x00084e44
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	20070bcc 	.word	0x20070bcc
   80198:	20070bc4 	.word	0x20070bc4

0008019c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8019c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8019e:	0189      	lsls	r1, r1, #6
   801a0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   801a2:	2402      	movs	r4, #2
   801a4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   801a6:	f04f 31ff 	mov.w	r1, #4294967295
   801aa:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   801ac:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   801ae:	605a      	str	r2, [r3, #4]
}
   801b0:	bc10      	pop	{r4}
   801b2:	4770      	bx	lr

000801b4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   801b4:	0189      	lsls	r1, r1, #6
   801b6:	2305      	movs	r3, #5
   801b8:	5043      	str	r3, [r0, r1]
   801ba:	4770      	bx	lr

000801bc <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   801bc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   801c0:	614a      	str	r2, [r1, #20]
   801c2:	4770      	bx	lr

000801c4 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   801c4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   801c8:	61ca      	str	r2, [r1, #28]
   801ca:	4770      	bx	lr

000801cc <pulse_init>:
 #include <asf.h>
 #include "pulse.h"
 #include "driving.h"
 
 void pulse_init(void)
 {
   801cc:	b570      	push	{r4, r5, r6, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   801ce:	200b      	movs	r0, #11
   801d0:	4c19      	ldr	r4, [pc, #100]	; (80238 <pulse_init+0x6c>)
   801d2:	47a0      	blx	r4
   801d4:	200c      	movs	r0, #12
   801d6:	47a0      	blx	r4
   801d8:	200d      	movs	r0, #13
   801da:	47a0      	blx	r4
   801dc:	200e      	movs	r0, #14
   801de:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   801e0:	4b16      	ldr	r3, [pc, #88]	; (8023c <pulse_init+0x70>)
   801e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   801e6:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   801e8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   801ea:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   801ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   801f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
   801f2:	4311      	orrs	r1, r2
   801f4:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   801f6:	605a      	str	r2, [r3, #4]
		base->PIO_PUER = mask;
   801f8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   801fc:	2204      	movs	r2, #4
   801fe:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_MDDR = mask;
   80200:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
   80202:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_SCIFSR = mask;
   80204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
   80208:	6f19      	ldr	r1, [r3, #112]	; 0x70
   8020a:	f021 0104 	bic.w	r1, r1, #4
   8020e:	6719      	str	r1, [r3, #112]	; 0x70
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   80210:	605a      	str	r2, [r3, #4]
	  */
	 ioport_set_pin_mode(PWM_pin_MotorA, IOPORT_MODE_MUX_B | IOPORT_MODE_PULLUP); // PB_25 (Digital pin 2) is PWM pin of Motor A
	 ioport_disable_pin(PWM_pin_MotorA);
	 ioport_set_pin_mode(PWM_pin_MotorB, IOPORT_MODE_MUX_A | IOPORT_MODE_PULLUP); // PA_2 (Analog IN 7) is PWM pin of Motor B
	 ioport_disable_pin(PWM_pin_MotorB);
	 pmc_set_writeprotect(false);
   80212:	2000      	movs	r0, #0
   80214:	4b0a      	ldr	r3, [pc, #40]	; (80240 <pulse_init+0x74>)
   80216:	4798      	blx	r3
	  * second link contains a nice table over the PMC id:s of every Timer Counter channel.
	  *    (1) https://github.com/ivanseidel/DueTimer/blob/master/TimerCounter.md
	  *    (2) http://ko7m.blogspot.com/2015/01/arduino-due-timers-part-1.html
	  */
	 // TIOA0 = PB_25 = Digital pin 2 on Arduino Due board, TC0 channel 0 (peripheral function B)
	 pmc_enable_periph_clk(ID_TC0); // PMC ID of TC0 ch0 = ID_TC0
   80218:	201b      	movs	r0, #27
   8021a:	47a0      	blx	r4
	 // TIOA1 = PA_2 = Analog In 2 on Arduino Due board, TC0 channel 1 (peripheral function A)
	 pmc_enable_periph_clk(ID_TC1); // PMC ID of TC0 ch1 = ID_TC1
   8021c:	201c      	movs	r0, #28
   8021e:	47a0      	blx	r4
	  * 
	  * In our case the PWM frequency = MCK/(RC * presc) = 84 MHz/(656 * 8) = 16 kHz
	  * Note: 16 kHz PWM fixed the whining audible noise from the motors
	  * 
	  */
	 tc_init(TC0, 0, TC_CMR_TCCLKS_TIMER_CLOCK2 
   80220:	4e08      	ldr	r6, [pc, #32]	; (80244 <pulse_init+0x78>)
   80222:	4d09      	ldr	r5, [pc, #36]	; (80248 <pulse_init+0x7c>)
   80224:	4632      	mov	r2, r6
   80226:	2100      	movs	r1, #0
   80228:	4628      	mov	r0, r5
   8022a:	4c08      	ldr	r4, [pc, #32]	; (8024c <pulse_init+0x80>)
   8022c:	47a0      	blx	r4
								| TC_CMR_WAVSEL_UP_RC 
								| TC_CMR_WAVE 
								| TC_CMR_ACPA_SET 
								| TC_CMR_ACPC_CLEAR); 
	tc_init(TC0, 1, TC_CMR_TCCLKS_TIMER_CLOCK2 
   8022e:	4632      	mov	r2, r6
   80230:	2101      	movs	r1, #1
   80232:	4628      	mov	r0, r5
   80234:	47a0      	blx	r4
   80236:	bd70      	pop	{r4, r5, r6, pc}
   80238:	00080949 	.word	0x00080949
   8023c:	400e1000 	.word	0x400e1000
   80240:	00080969 	.word	0x00080969
   80244:	0009c001 	.word	0x0009c001
   80248:	40080000 	.word	0x40080000
   8024c:	0008019d 	.word	0x0008019d

00080250 <pulse_set_duty_cycle_left>:
	pulse_set_duty_cycle_right(duty_cycle);
	tc_start(TC0, 1);
 }
 
 void pulse_set_duty_cycle_left(double duty_cycle)
 {
   80250:	b510      	push	{r4, lr}
	 double rc = 0, ra = 0;
	 rc = 656;
	 ra = rc * (1 - duty_cycle/100);
   80252:	2200      	movs	r2, #0
   80254:	4b0d      	ldr	r3, [pc, #52]	; (8028c <pulse_set_duty_cycle_left+0x3c>)
   80256:	4c0e      	ldr	r4, [pc, #56]	; (80290 <pulse_set_duty_cycle_left+0x40>)
   80258:	47a0      	blx	r4
   8025a:	4602      	mov	r2, r0
   8025c:	460b      	mov	r3, r1
   8025e:	2000      	movs	r0, #0
   80260:	490c      	ldr	r1, [pc, #48]	; (80294 <pulse_set_duty_cycle_left+0x44>)
   80262:	4c0d      	ldr	r4, [pc, #52]	; (80298 <pulse_set_duty_cycle_left+0x48>)
   80264:	47a0      	blx	r4
   80266:	2200      	movs	r2, #0
   80268:	4b0c      	ldr	r3, [pc, #48]	; (8029c <pulse_set_duty_cycle_left+0x4c>)
   8026a:	4c0d      	ldr	r4, [pc, #52]	; (802a0 <pulse_set_duty_cycle_left+0x50>)
   8026c:	47a0      	blx	r4
	 
	 /*
	  * RA Compare is used to control the TIOA/TIOB output. The value of RA will regulate the
	  * duty cycle. The signal will go high on RA compare and get cleared on RC compare.
	  */	
	tc_write_ra(TC0, 0, (uint32_t) ra);
   8026e:	4b0d      	ldr	r3, [pc, #52]	; (802a4 <pulse_set_duty_cycle_left+0x54>)
   80270:	4798      	blx	r3
   80272:	4c0d      	ldr	r4, [pc, #52]	; (802a8 <pulse_set_duty_cycle_left+0x58>)
   80274:	4602      	mov	r2, r0
   80276:	2100      	movs	r1, #0
   80278:	4620      	mov	r0, r4
   8027a:	4b0c      	ldr	r3, [pc, #48]	; (802ac <pulse_set_duty_cycle_left+0x5c>)
   8027c:	4798      	blx	r3
	tc_write_rc(TC0, 0, (uint32_t) rc);
   8027e:	f44f 7224 	mov.w	r2, #656	; 0x290
   80282:	2100      	movs	r1, #0
   80284:	4620      	mov	r0, r4
   80286:	4b0a      	ldr	r3, [pc, #40]	; (802b0 <pulse_set_duty_cycle_left+0x60>)
   80288:	4798      	blx	r3
   8028a:	bd10      	pop	{r4, pc}
   8028c:	40590000 	.word	0x40590000
   80290:	00081631 	.word	0x00081631
   80294:	3ff00000 	.word	0x3ff00000
   80298:	00081075 	.word	0x00081075
   8029c:	40848000 	.word	0x40848000
   802a0:	000813dd 	.word	0x000813dd
   802a4:	00081801 	.word	0x00081801
   802a8:	40080000 	.word	0x40080000
   802ac:	000801bd 	.word	0x000801bd
   802b0:	000801c5 	.word	0x000801c5

000802b4 <pulse_set_duty_cycle_right>:
	
 }
 
 void pulse_set_duty_cycle_right(double duty_cycle)
 {
   802b4:	b510      	push	{r4, lr}
	 double rc = 0, ra = 0;
	 rc = 656;
	 ra = rc * (1 - duty_cycle/100);
   802b6:	2200      	movs	r2, #0
   802b8:	4b0d      	ldr	r3, [pc, #52]	; (802f0 <pulse_set_duty_cycle_right+0x3c>)
   802ba:	4c0e      	ldr	r4, [pc, #56]	; (802f4 <pulse_set_duty_cycle_right+0x40>)
   802bc:	47a0      	blx	r4
   802be:	4602      	mov	r2, r0
   802c0:	460b      	mov	r3, r1
   802c2:	2000      	movs	r0, #0
   802c4:	490c      	ldr	r1, [pc, #48]	; (802f8 <pulse_set_duty_cycle_right+0x44>)
   802c6:	4c0d      	ldr	r4, [pc, #52]	; (802fc <pulse_set_duty_cycle_right+0x48>)
   802c8:	47a0      	blx	r4
   802ca:	2200      	movs	r2, #0
   802cc:	4b0c      	ldr	r3, [pc, #48]	; (80300 <pulse_set_duty_cycle_right+0x4c>)
   802ce:	4c0d      	ldr	r4, [pc, #52]	; (80304 <pulse_set_duty_cycle_right+0x50>)
   802d0:	47a0      	blx	r4
	 
	 tc_write_ra(TC0, 1, (uint32_t) ra);
   802d2:	4b0d      	ldr	r3, [pc, #52]	; (80308 <pulse_set_duty_cycle_right+0x54>)
   802d4:	4798      	blx	r3
   802d6:	4c0d      	ldr	r4, [pc, #52]	; (8030c <pulse_set_duty_cycle_right+0x58>)
   802d8:	4602      	mov	r2, r0
   802da:	2101      	movs	r1, #1
   802dc:	4620      	mov	r0, r4
   802de:	4b0c      	ldr	r3, [pc, #48]	; (80310 <pulse_set_duty_cycle_right+0x5c>)
   802e0:	4798      	blx	r3
	 tc_write_rc(TC0, 1, (uint32_t) rc);
   802e2:	f44f 7224 	mov.w	r2, #656	; 0x290
   802e6:	2101      	movs	r1, #1
   802e8:	4620      	mov	r0, r4
   802ea:	4b0a      	ldr	r3, [pc, #40]	; (80314 <pulse_set_duty_cycle_right+0x60>)
   802ec:	4798      	blx	r3
   802ee:	bd10      	pop	{r4, pc}
   802f0:	40590000 	.word	0x40590000
   802f4:	00081631 	.word	0x00081631
   802f8:	3ff00000 	.word	0x3ff00000
   802fc:	00081075 	.word	0x00081075
   80300:	40848000 	.word	0x40848000
   80304:	000813dd 	.word	0x000813dd
   80308:	00081801 	.word	0x00081801
   8030c:	40080000 	.word	0x40080000
   80310:	000801bd 	.word	0x000801bd
   80314:	000801c5 	.word	0x000801c5

00080318 <pulse_start>:
 {	
   80318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8031a:	4606      	mov	r6, r0
   8031c:	460f      	mov	r7, r1
	pulse_set_duty_cycle_left(duty_cycle);
   8031e:	4b07      	ldr	r3, [pc, #28]	; (8033c <pulse_start+0x24>)
   80320:	4798      	blx	r3
	tc_start(TC0, 0);
   80322:	4d07      	ldr	r5, [pc, #28]	; (80340 <pulse_start+0x28>)
   80324:	2100      	movs	r1, #0
   80326:	4628      	mov	r0, r5
   80328:	4c06      	ldr	r4, [pc, #24]	; (80344 <pulse_start+0x2c>)
   8032a:	47a0      	blx	r4
	pulse_set_duty_cycle_right(duty_cycle);
   8032c:	4630      	mov	r0, r6
   8032e:	4639      	mov	r1, r7
   80330:	4b05      	ldr	r3, [pc, #20]	; (80348 <pulse_start+0x30>)
   80332:	4798      	blx	r3
	tc_start(TC0, 1);
   80334:	2101      	movs	r1, #1
   80336:	4628      	mov	r0, r5
   80338:	47a0      	blx	r4
   8033a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8033c:	00080251 	.word	0x00080251
   80340:	40080000 	.word	0x40080000
   80344:	000801b5 	.word	0x000801b5
   80348:	000802b5 	.word	0x000802b5

0008034c <TC3_Handler>:


void TC3_Handler(void)
{
	// enters every 1 ms
	systicks++;
   8034c:	4a02      	ldr	r2, [pc, #8]	; (80358 <TC3_Handler+0xc>)
   8034e:	6813      	ldr	r3, [r2, #0]
   80350:	3301      	adds	r3, #1
   80352:	6013      	str	r3, [r2, #0]
   80354:	4770      	bx	lr
   80356:	bf00      	nop
   80358:	20070b0c 	.word	0x20070b0c

0008035c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8035c:	3801      	subs	r0, #1
   8035e:	2802      	cmp	r0, #2
   80360:	d815      	bhi.n	8038e <_write+0x32>
{
   80362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80366:	460e      	mov	r6, r1
   80368:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8036a:	b19a      	cbz	r2, 80394 <_write+0x38>
   8036c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8036e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 803a8 <_write+0x4c>
   80372:	4f0c      	ldr	r7, [pc, #48]	; (803a4 <_write+0x48>)
   80374:	f8d8 0000 	ldr.w	r0, [r8]
   80378:	f815 1b01 	ldrb.w	r1, [r5], #1
   8037c:	683b      	ldr	r3, [r7, #0]
   8037e:	4798      	blx	r3
   80380:	2800      	cmp	r0, #0
   80382:	db0a      	blt.n	8039a <_write+0x3e>
   80384:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80386:	3c01      	subs	r4, #1
   80388:	d1f4      	bne.n	80374 <_write+0x18>
   8038a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8038e:	f04f 30ff 	mov.w	r0, #4294967295
   80392:	4770      	bx	lr
	for (; len != 0; --len) {
   80394:	4610      	mov	r0, r2
   80396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8039a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8039e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803a2:	bf00      	nop
   803a4:	20070bc8 	.word	0x20070bc8
   803a8:	20070bcc 	.word	0x20070bcc

000803ac <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803ac:	6943      	ldr	r3, [r0, #20]
   803ae:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   803b2:	bf1d      	ittte	ne
   803b4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803b8:	61c1      	strne	r1, [r0, #28]
	return 0;
   803ba:	2000      	movne	r0, #0
		return 1;
   803bc:	2001      	moveq	r0, #1
}
   803be:	4770      	bx	lr

000803c0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   803c0:	6943      	ldr	r3, [r0, #20]
   803c2:	f013 0f01 	tst.w	r3, #1
   803c6:	d005      	beq.n	803d4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803c8:	6983      	ldr	r3, [r0, #24]
   803ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803ce:	600b      	str	r3, [r1, #0]

	return 0;
   803d0:	2000      	movs	r0, #0
   803d2:	4770      	bx	lr
		return 1;
   803d4:	2001      	movs	r0, #1
}
   803d6:	4770      	bx	lr

000803d8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803d8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803da:	23ac      	movs	r3, #172	; 0xac
   803dc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803de:	680b      	ldr	r3, [r1, #0]
   803e0:	684a      	ldr	r2, [r1, #4]
   803e2:	fbb3 f3f2 	udiv	r3, r3, r2
   803e6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   803e8:	1e5c      	subs	r4, r3, #1
   803ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   803ee:	4294      	cmp	r4, r2
   803f0:	d80b      	bhi.n	8040a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   803f2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   803f4:	688b      	ldr	r3, [r1, #8]
   803f6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   803f8:	f240 2302 	movw	r3, #514	; 0x202
   803fc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80400:	2350      	movs	r3, #80	; 0x50
   80402:	6003      	str	r3, [r0, #0]

	return 0;
   80404:	2000      	movs	r0, #0
}
   80406:	bc10      	pop	{r4}
   80408:	4770      	bx	lr
		return 1;
   8040a:	2001      	movs	r0, #1
   8040c:	e7fb      	b.n	80406 <uart_init+0x2e>

0008040e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8040e:	6943      	ldr	r3, [r0, #20]
   80410:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80414:	bf1a      	itte	ne
   80416:	61c1      	strne	r1, [r0, #28]
	return 0;
   80418:	2000      	movne	r0, #0
		return 1;
   8041a:	2001      	moveq	r0, #1
}
   8041c:	4770      	bx	lr

0008041e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8041e:	6943      	ldr	r3, [r0, #20]
   80420:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80424:	bf1d      	ittte	ne
   80426:	6983      	ldrne	r3, [r0, #24]
   80428:	700b      	strbne	r3, [r1, #0]
	return 0;
   8042a:	2000      	movne	r0, #0
		return 1;
   8042c:	2001      	moveq	r0, #1
}
   8042e:	4770      	bx	lr

00080430 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80430:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80432:	480e      	ldr	r0, [pc, #56]	; (8046c <sysclk_init+0x3c>)
   80434:	4b0e      	ldr	r3, [pc, #56]	; (80470 <sysclk_init+0x40>)
   80436:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80438:	213e      	movs	r1, #62	; 0x3e
   8043a:	2000      	movs	r0, #0
   8043c:	4b0d      	ldr	r3, [pc, #52]	; (80474 <sysclk_init+0x44>)
   8043e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80440:	4c0d      	ldr	r4, [pc, #52]	; (80478 <sysclk_init+0x48>)
   80442:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80444:	2800      	cmp	r0, #0
   80446:	d0fc      	beq.n	80442 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80448:	4b0c      	ldr	r3, [pc, #48]	; (8047c <sysclk_init+0x4c>)
   8044a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8044c:	4a0c      	ldr	r2, [pc, #48]	; (80480 <sysclk_init+0x50>)
   8044e:	4b0d      	ldr	r3, [pc, #52]	; (80484 <sysclk_init+0x54>)
   80450:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80452:	4c0d      	ldr	r4, [pc, #52]	; (80488 <sysclk_init+0x58>)
   80454:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80456:	2800      	cmp	r0, #0
   80458:	d0fc      	beq.n	80454 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8045a:	2010      	movs	r0, #16
   8045c:	4b0b      	ldr	r3, [pc, #44]	; (8048c <sysclk_init+0x5c>)
   8045e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80460:	4b0b      	ldr	r3, [pc, #44]	; (80490 <sysclk_init+0x60>)
   80462:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80464:	4801      	ldr	r0, [pc, #4]	; (8046c <sysclk_init+0x3c>)
   80466:	4b02      	ldr	r3, [pc, #8]	; (80470 <sysclk_init+0x40>)
   80468:	4798      	blx	r3
   8046a:	bd10      	pop	{r4, pc}
   8046c:	0501bd00 	.word	0x0501bd00
   80470:	200700b1 	.word	0x200700b1
   80474:	000808c5 	.word	0x000808c5
   80478:	00080919 	.word	0x00080919
   8047c:	00080929 	.word	0x00080929
   80480:	200d3f01 	.word	0x200d3f01
   80484:	400e0600 	.word	0x400e0600
   80488:	00080939 	.word	0x00080939
   8048c:	00080861 	.word	0x00080861
   80490:	00080a29 	.word	0x00080a29

00080494 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80494:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80496:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8049a:	4b16      	ldr	r3, [pc, #88]	; (804f4 <board_init+0x60>)
   8049c:	605a      	str	r2, [r3, #4]
   8049e:	200b      	movs	r0, #11
   804a0:	4c15      	ldr	r4, [pc, #84]	; (804f8 <board_init+0x64>)
   804a2:	47a0      	blx	r4
   804a4:	200c      	movs	r0, #12
   804a6:	47a0      	blx	r4
   804a8:	200d      	movs	r0, #13
   804aa:	47a0      	blx	r4
   804ac:	200e      	movs	r0, #14
   804ae:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   804b0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804b4:	203b      	movs	r0, #59	; 0x3b
   804b6:	4c11      	ldr	r4, [pc, #68]	; (804fc <board_init+0x68>)
   804b8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   804ba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804be:	2055      	movs	r0, #85	; 0x55
   804c0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   804c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804c6:	2056      	movs	r0, #86	; 0x56
   804c8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   804ca:	490d      	ldr	r1, [pc, #52]	; (80500 <board_init+0x6c>)
   804cc:	2068      	movs	r0, #104	; 0x68
   804ce:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   804d0:	490c      	ldr	r1, [pc, #48]	; (80504 <board_init+0x70>)
   804d2:	205c      	movs	r0, #92	; 0x5c
   804d4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   804d6:	4a0c      	ldr	r2, [pc, #48]	; (80508 <board_init+0x74>)
   804d8:	f44f 7140 	mov.w	r1, #768	; 0x300
   804dc:	480b      	ldr	r0, [pc, #44]	; (8050c <board_init+0x78>)
   804de:	4b0c      	ldr	r3, [pc, #48]	; (80510 <board_init+0x7c>)
   804e0:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   804e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804e6:	202b      	movs	r0, #43	; 0x2b
   804e8:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   804ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804ee:	202a      	movs	r0, #42	; 0x2a
   804f0:	47a0      	blx	r4
   804f2:	bd10      	pop	{r4, pc}
   804f4:	400e1a50 	.word	0x400e1a50
   804f8:	00080949 	.word	0x00080949
   804fc:	000805e5 	.word	0x000805e5
   80500:	28000079 	.word	0x28000079
   80504:	28000001 	.word	0x28000001
   80508:	08000001 	.word	0x08000001
   8050c:	400e0e00 	.word	0x400e0e00
   80510:	000806b5 	.word	0x000806b5

00080514 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80514:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80516:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8051a:	d016      	beq.n	8054a <pio_set_peripheral+0x36>
   8051c:	d80b      	bhi.n	80536 <pio_set_peripheral+0x22>
   8051e:	b149      	cbz	r1, 80534 <pio_set_peripheral+0x20>
   80520:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80524:	d105      	bne.n	80532 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80526:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80528:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8052a:	400b      	ands	r3, r1
   8052c:	ea23 0302 	bic.w	r3, r3, r2
   80530:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80532:	6042      	str	r2, [r0, #4]
   80534:	4770      	bx	lr
	switch (ul_type) {
   80536:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8053a:	d0fb      	beq.n	80534 <pio_set_peripheral+0x20>
   8053c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80540:	d0f8      	beq.n	80534 <pio_set_peripheral+0x20>
   80542:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80546:	d1f4      	bne.n	80532 <pio_set_peripheral+0x1e>
   80548:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8054a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8054c:	4313      	orrs	r3, r2
   8054e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80550:	e7ef      	b.n	80532 <pio_set_peripheral+0x1e>

00080552 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80552:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80554:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80558:	bf14      	ite	ne
   8055a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8055c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8055e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80562:	bf14      	ite	ne
   80564:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80566:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80568:	f012 0f02 	tst.w	r2, #2
   8056c:	d107      	bne.n	8057e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8056e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80572:	bf18      	it	ne
   80574:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80578:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8057a:	6001      	str	r1, [r0, #0]
   8057c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8057e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80582:	e7f9      	b.n	80578 <pio_set_input+0x26>

00080584 <pio_set_output>:
{
   80584:	b410      	push	{r4}
   80586:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80588:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8058a:	b944      	cbnz	r4, 8059e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8058c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8058e:	b143      	cbz	r3, 805a2 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80590:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80592:	b942      	cbnz	r2, 805a6 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80594:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80596:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80598:	6001      	str	r1, [r0, #0]
}
   8059a:	bc10      	pop	{r4}
   8059c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8059e:	6641      	str	r1, [r0, #100]	; 0x64
   805a0:	e7f5      	b.n	8058e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   805a2:	6541      	str	r1, [r0, #84]	; 0x54
   805a4:	e7f5      	b.n	80592 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   805a6:	6301      	str	r1, [r0, #48]	; 0x30
   805a8:	e7f5      	b.n	80596 <pio_set_output+0x12>

000805aa <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   805aa:	f012 0f10 	tst.w	r2, #16
   805ae:	d010      	beq.n	805d2 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   805b0:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   805b4:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   805b8:	bf14      	ite	ne
   805ba:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   805be:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   805c2:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   805c6:	bf14      	ite	ne
   805c8:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   805cc:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   805d0:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   805d2:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   805d6:	4770      	bx	lr

000805d8 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   805d8:	6401      	str	r1, [r0, #64]	; 0x40
   805da:	4770      	bx	lr

000805dc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   805dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   805de:	4770      	bx	lr

000805e0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   805e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   805e2:	4770      	bx	lr

000805e4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   805e4:	b570      	push	{r4, r5, r6, lr}
   805e6:	b082      	sub	sp, #8
   805e8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   805ea:	0943      	lsrs	r3, r0, #5
   805ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   805f0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   805f4:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   805f6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   805fa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   805fe:	d031      	beq.n	80664 <pio_configure_pin+0x80>
   80600:	d816      	bhi.n	80630 <pio_configure_pin+0x4c>
   80602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80606:	d01b      	beq.n	80640 <pio_configure_pin+0x5c>
   80608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8060c:	d116      	bne.n	8063c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8060e:	f000 001f 	and.w	r0, r0, #31
   80612:	2601      	movs	r6, #1
   80614:	4086      	lsls	r6, r0
   80616:	4632      	mov	r2, r6
   80618:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8061c:	4620      	mov	r0, r4
   8061e:	4b22      	ldr	r3, [pc, #136]	; (806a8 <pio_configure_pin+0xc4>)
   80620:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80622:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80626:	bf14      	ite	ne
   80628:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8062a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8062c:	2001      	movs	r0, #1
   8062e:	e017      	b.n	80660 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80630:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80634:	d021      	beq.n	8067a <pio_configure_pin+0x96>
   80636:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8063a:	d01e      	beq.n	8067a <pio_configure_pin+0x96>
		return 0;
   8063c:	2000      	movs	r0, #0
   8063e:	e00f      	b.n	80660 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80640:	f000 001f 	and.w	r0, r0, #31
   80644:	2601      	movs	r6, #1
   80646:	4086      	lsls	r6, r0
   80648:	4632      	mov	r2, r6
   8064a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8064e:	4620      	mov	r0, r4
   80650:	4b15      	ldr	r3, [pc, #84]	; (806a8 <pio_configure_pin+0xc4>)
   80652:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80654:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80658:	bf14      	ite	ne
   8065a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8065c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8065e:	2001      	movs	r0, #1
}
   80660:	b002      	add	sp, #8
   80662:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80664:	f000 011f 	and.w	r1, r0, #31
   80668:	2601      	movs	r6, #1
   8066a:	462a      	mov	r2, r5
   8066c:	fa06 f101 	lsl.w	r1, r6, r1
   80670:	4620      	mov	r0, r4
   80672:	4b0e      	ldr	r3, [pc, #56]	; (806ac <pio_configure_pin+0xc8>)
   80674:	4798      	blx	r3
	return 1;
   80676:	4630      	mov	r0, r6
		break;
   80678:	e7f2      	b.n	80660 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8067a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8067e:	f000 011f 	and.w	r1, r0, #31
   80682:	2601      	movs	r6, #1
   80684:	ea05 0306 	and.w	r3, r5, r6
   80688:	9300      	str	r3, [sp, #0]
   8068a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8068e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80692:	bf14      	ite	ne
   80694:	2200      	movne	r2, #0
   80696:	2201      	moveq	r2, #1
   80698:	fa06 f101 	lsl.w	r1, r6, r1
   8069c:	4620      	mov	r0, r4
   8069e:	4c04      	ldr	r4, [pc, #16]	; (806b0 <pio_configure_pin+0xcc>)
   806a0:	47a0      	blx	r4
	return 1;
   806a2:	4630      	mov	r0, r6
		break;
   806a4:	e7dc      	b.n	80660 <pio_configure_pin+0x7c>
   806a6:	bf00      	nop
   806a8:	00080515 	.word	0x00080515
   806ac:	00080553 	.word	0x00080553
   806b0:	00080585 	.word	0x00080585

000806b4 <pio_configure_pin_group>:
{
   806b4:	b570      	push	{r4, r5, r6, lr}
   806b6:	b082      	sub	sp, #8
   806b8:	4605      	mov	r5, r0
   806ba:	460e      	mov	r6, r1
   806bc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   806be:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   806c2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   806c6:	d027      	beq.n	80718 <pio_configure_pin_group+0x64>
   806c8:	d811      	bhi.n	806ee <pio_configure_pin_group+0x3a>
   806ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   806ce:	d016      	beq.n	806fe <pio_configure_pin_group+0x4a>
   806d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   806d4:	d111      	bne.n	806fa <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   806d6:	460a      	mov	r2, r1
   806d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   806dc:	4b19      	ldr	r3, [pc, #100]	; (80744 <pio_configure_pin_group+0x90>)
   806de:	4798      	blx	r3
	if (ul_pull_up_enable) {
   806e0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   806e4:	bf14      	ite	ne
   806e6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   806e8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   806ea:	2001      	movs	r0, #1
   806ec:	e012      	b.n	80714 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   806ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   806f2:	d015      	beq.n	80720 <pio_configure_pin_group+0x6c>
   806f4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   806f8:	d012      	beq.n	80720 <pio_configure_pin_group+0x6c>
		return 0;
   806fa:	2000      	movs	r0, #0
   806fc:	e00a      	b.n	80714 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   806fe:	460a      	mov	r2, r1
   80700:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80704:	4b0f      	ldr	r3, [pc, #60]	; (80744 <pio_configure_pin_group+0x90>)
   80706:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80708:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8070c:	bf14      	ite	ne
   8070e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80710:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80712:	2001      	movs	r0, #1
}
   80714:	b002      	add	sp, #8
   80716:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80718:	4b0b      	ldr	r3, [pc, #44]	; (80748 <pio_configure_pin_group+0x94>)
   8071a:	4798      	blx	r3
	return 1;
   8071c:	2001      	movs	r0, #1
		break;
   8071e:	e7f9      	b.n	80714 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80720:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80724:	f004 0301 	and.w	r3, r4, #1
   80728:	9300      	str	r3, [sp, #0]
   8072a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8072e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80732:	bf14      	ite	ne
   80734:	2200      	movne	r2, #0
   80736:	2201      	moveq	r2, #1
   80738:	4631      	mov	r1, r6
   8073a:	4628      	mov	r0, r5
   8073c:	4c03      	ldr	r4, [pc, #12]	; (8074c <pio_configure_pin_group+0x98>)
   8073e:	47a0      	blx	r4
	return 1;
   80740:	2001      	movs	r0, #1
		break;
   80742:	e7e7      	b.n	80714 <pio_configure_pin_group+0x60>
   80744:	00080515 	.word	0x00080515
   80748:	00080553 	.word	0x00080553
   8074c:	00080585 	.word	0x00080585

00080750 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80754:	4604      	mov	r4, r0
   80756:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80758:	4b0e      	ldr	r3, [pc, #56]	; (80794 <pio_handler_process+0x44>)
   8075a:	4798      	blx	r3
   8075c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8075e:	4620      	mov	r0, r4
   80760:	4b0d      	ldr	r3, [pc, #52]	; (80798 <pio_handler_process+0x48>)
   80762:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80764:	4005      	ands	r5, r0
   80766:	d013      	beq.n	80790 <pio_handler_process+0x40>
   80768:	4c0c      	ldr	r4, [pc, #48]	; (8079c <pio_handler_process+0x4c>)
   8076a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8076e:	e003      	b.n	80778 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80770:	42b4      	cmp	r4, r6
   80772:	d00d      	beq.n	80790 <pio_handler_process+0x40>
   80774:	3410      	adds	r4, #16
		while (status != 0) {
   80776:	b15d      	cbz	r5, 80790 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80778:	6820      	ldr	r0, [r4, #0]
   8077a:	4540      	cmp	r0, r8
   8077c:	d1f8      	bne.n	80770 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8077e:	6861      	ldr	r1, [r4, #4]
   80780:	4229      	tst	r1, r5
   80782:	d0f5      	beq.n	80770 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80784:	68e3      	ldr	r3, [r4, #12]
   80786:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80788:	6863      	ldr	r3, [r4, #4]
   8078a:	ea25 0503 	bic.w	r5, r5, r3
   8078e:	e7ef      	b.n	80770 <pio_handler_process+0x20>
   80790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80794:	000805dd 	.word	0x000805dd
   80798:	000805e1 	.word	0x000805e1
   8079c:	20070b10 	.word	0x20070b10

000807a0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   807a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   807a2:	4c18      	ldr	r4, [pc, #96]	; (80804 <pio_handler_set+0x64>)
   807a4:	6826      	ldr	r6, [r4, #0]
   807a6:	2e06      	cmp	r6, #6
   807a8:	d829      	bhi.n	807fe <pio_handler_set+0x5e>
   807aa:	f04f 0c00 	mov.w	ip, #0
   807ae:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   807b0:	4f15      	ldr	r7, [pc, #84]	; (80808 <pio_handler_set+0x68>)
   807b2:	e004      	b.n	807be <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   807b4:	3401      	adds	r4, #1
   807b6:	b2e4      	uxtb	r4, r4
   807b8:	46a4      	mov	ip, r4
   807ba:	42a6      	cmp	r6, r4
   807bc:	d309      	bcc.n	807d2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   807be:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   807c0:	0125      	lsls	r5, r4, #4
   807c2:	597d      	ldr	r5, [r7, r5]
   807c4:	428d      	cmp	r5, r1
   807c6:	d1f5      	bne.n	807b4 <pio_handler_set+0x14>
   807c8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   807cc:	686d      	ldr	r5, [r5, #4]
   807ce:	4295      	cmp	r5, r2
   807d0:	d1f0      	bne.n	807b4 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   807d2:	4d0d      	ldr	r5, [pc, #52]	; (80808 <pio_handler_set+0x68>)
   807d4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   807d8:	eb05 040e 	add.w	r4, r5, lr
   807dc:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   807e0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   807e2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   807e4:	9906      	ldr	r1, [sp, #24]
   807e6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   807e8:	3601      	adds	r6, #1
   807ea:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   807ec:	bf04      	itt	eq
   807ee:	4905      	ldreq	r1, [pc, #20]	; (80804 <pio_handler_set+0x64>)
   807f0:	600e      	streq	r6, [r1, #0]
   807f2:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   807f4:	461a      	mov	r2, r3
   807f6:	4b05      	ldr	r3, [pc, #20]	; (8080c <pio_handler_set+0x6c>)
   807f8:	4798      	blx	r3

	return 0;
   807fa:	2000      	movs	r0, #0
   807fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   807fe:	2001      	movs	r0, #1
}
   80800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80802:	bf00      	nop
   80804:	20070b80 	.word	0x20070b80
   80808:	20070b10 	.word	0x20070b10
   8080c:	000805ab 	.word	0x000805ab

00080810 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80810:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80812:	210b      	movs	r1, #11
   80814:	4801      	ldr	r0, [pc, #4]	; (8081c <PIOA_Handler+0xc>)
   80816:	4b02      	ldr	r3, [pc, #8]	; (80820 <PIOA_Handler+0x10>)
   80818:	4798      	blx	r3
   8081a:	bd08      	pop	{r3, pc}
   8081c:	400e0e00 	.word	0x400e0e00
   80820:	00080751 	.word	0x00080751

00080824 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80824:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80826:	210c      	movs	r1, #12
   80828:	4801      	ldr	r0, [pc, #4]	; (80830 <PIOB_Handler+0xc>)
   8082a:	4b02      	ldr	r3, [pc, #8]	; (80834 <PIOB_Handler+0x10>)
   8082c:	4798      	blx	r3
   8082e:	bd08      	pop	{r3, pc}
   80830:	400e1000 	.word	0x400e1000
   80834:	00080751 	.word	0x00080751

00080838 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80838:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8083a:	210d      	movs	r1, #13
   8083c:	4801      	ldr	r0, [pc, #4]	; (80844 <PIOC_Handler+0xc>)
   8083e:	4b02      	ldr	r3, [pc, #8]	; (80848 <PIOC_Handler+0x10>)
   80840:	4798      	blx	r3
   80842:	bd08      	pop	{r3, pc}
   80844:	400e1200 	.word	0x400e1200
   80848:	00080751 	.word	0x00080751

0008084c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8084c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8084e:	210e      	movs	r1, #14
   80850:	4801      	ldr	r0, [pc, #4]	; (80858 <PIOD_Handler+0xc>)
   80852:	4b02      	ldr	r3, [pc, #8]	; (8085c <PIOD_Handler+0x10>)
   80854:	4798      	blx	r3
   80856:	bd08      	pop	{r3, pc}
   80858:	400e1400 	.word	0x400e1400
   8085c:	00080751 	.word	0x00080751

00080860 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80860:	4a17      	ldr	r2, [pc, #92]	; (808c0 <pmc_switch_mck_to_pllack+0x60>)
   80862:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80868:	4318      	orrs	r0, r3
   8086a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8086c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8086e:	f013 0f08 	tst.w	r3, #8
   80872:	d10a      	bne.n	8088a <pmc_switch_mck_to_pllack+0x2a>
   80874:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80878:	4911      	ldr	r1, [pc, #68]	; (808c0 <pmc_switch_mck_to_pllack+0x60>)
   8087a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8087c:	f012 0f08 	tst.w	r2, #8
   80880:	d103      	bne.n	8088a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80882:	3b01      	subs	r3, #1
   80884:	d1f9      	bne.n	8087a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80886:	2001      	movs	r0, #1
   80888:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8088a:	4a0d      	ldr	r2, [pc, #52]	; (808c0 <pmc_switch_mck_to_pllack+0x60>)
   8088c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8088e:	f023 0303 	bic.w	r3, r3, #3
   80892:	f043 0302 	orr.w	r3, r3, #2
   80896:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80898:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8089a:	f013 0f08 	tst.w	r3, #8
   8089e:	d10a      	bne.n	808b6 <pmc_switch_mck_to_pllack+0x56>
   808a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808a4:	4906      	ldr	r1, [pc, #24]	; (808c0 <pmc_switch_mck_to_pllack+0x60>)
   808a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808a8:	f012 0f08 	tst.w	r2, #8
   808ac:	d105      	bne.n	808ba <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   808ae:	3b01      	subs	r3, #1
   808b0:	d1f9      	bne.n	808a6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   808b2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   808b4:	4770      	bx	lr
	return 0;
   808b6:	2000      	movs	r0, #0
   808b8:	4770      	bx	lr
   808ba:	2000      	movs	r0, #0
   808bc:	4770      	bx	lr
   808be:	bf00      	nop
   808c0:	400e0600 	.word	0x400e0600

000808c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   808c4:	b9c8      	cbnz	r0, 808fa <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   808c6:	4a11      	ldr	r2, [pc, #68]	; (8090c <pmc_switch_mainck_to_xtal+0x48>)
   808c8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   808ca:	0209      	lsls	r1, r1, #8
   808cc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   808ce:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   808d2:	f023 0303 	bic.w	r3, r3, #3
   808d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   808da:	f043 0301 	orr.w	r3, r3, #1
   808de:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   808e0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   808e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   808e4:	f013 0f01 	tst.w	r3, #1
   808e8:	d0fb      	beq.n	808e2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   808ea:	4a08      	ldr	r2, [pc, #32]	; (8090c <pmc_switch_mainck_to_xtal+0x48>)
   808ec:	6a13      	ldr	r3, [r2, #32]
   808ee:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   808f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808f6:	6213      	str	r3, [r2, #32]
   808f8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   808fa:	4904      	ldr	r1, [pc, #16]	; (8090c <pmc_switch_mainck_to_xtal+0x48>)
   808fc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   808fe:	4a04      	ldr	r2, [pc, #16]	; (80910 <pmc_switch_mainck_to_xtal+0x4c>)
   80900:	401a      	ands	r2, r3
   80902:	4b04      	ldr	r3, [pc, #16]	; (80914 <pmc_switch_mainck_to_xtal+0x50>)
   80904:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80906:	620b      	str	r3, [r1, #32]
   80908:	4770      	bx	lr
   8090a:	bf00      	nop
   8090c:	400e0600 	.word	0x400e0600
   80910:	fec8fffc 	.word	0xfec8fffc
   80914:	01370002 	.word	0x01370002

00080918 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80918:	4b02      	ldr	r3, [pc, #8]	; (80924 <pmc_osc_is_ready_mainck+0xc>)
   8091a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8091c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80920:	4770      	bx	lr
   80922:	bf00      	nop
   80924:	400e0600 	.word	0x400e0600

00080928 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80928:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8092c:	4b01      	ldr	r3, [pc, #4]	; (80934 <pmc_disable_pllack+0xc>)
   8092e:	629a      	str	r2, [r3, #40]	; 0x28
   80930:	4770      	bx	lr
   80932:	bf00      	nop
   80934:	400e0600 	.word	0x400e0600

00080938 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80938:	4b02      	ldr	r3, [pc, #8]	; (80944 <pmc_is_locked_pllack+0xc>)
   8093a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8093c:	f000 0002 	and.w	r0, r0, #2
   80940:	4770      	bx	lr
   80942:	bf00      	nop
   80944:	400e0600 	.word	0x400e0600

00080948 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   80948:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8094c:	4b05      	ldr	r3, [pc, #20]	; (80964 <pmc_enable_periph_clk+0x1c>)
   8094e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   80952:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   80956:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   8095a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   8095e:	2000      	movs	r0, #0
   80960:	4770      	bx	lr
   80962:	bf00      	nop
   80964:	400e0600 	.word	0x400e0600

00080968 <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   80968:	b920      	cbnz	r0, 80974 <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   8096a:	4a05      	ldr	r2, [pc, #20]	; (80980 <pmc_set_writeprotect+0x18>)
   8096c:	4b05      	ldr	r3, [pc, #20]	; (80984 <pmc_set_writeprotect+0x1c>)
   8096e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80972:	4770      	bx	lr
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   80974:	4a04      	ldr	r2, [pc, #16]	; (80988 <pmc_set_writeprotect+0x20>)
   80976:	4b03      	ldr	r3, [pc, #12]	; (80984 <pmc_set_writeprotect+0x1c>)
   80978:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   8097c:	4770      	bx	lr
   8097e:	bf00      	nop
   80980:	504d4300 	.word	0x504d4300
   80984:	400e0600 	.word	0x400e0600
   80988:	504d4301 	.word	0x504d4301

0008098c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8098c:	e7fe      	b.n	8098c <Dummy_Handler>
	...

00080990 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80990:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80992:	4b1c      	ldr	r3, [pc, #112]	; (80a04 <Reset_Handler+0x74>)
   80994:	4a1c      	ldr	r2, [pc, #112]	; (80a08 <Reset_Handler+0x78>)
   80996:	429a      	cmp	r2, r3
   80998:	d010      	beq.n	809bc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8099a:	4b1c      	ldr	r3, [pc, #112]	; (80a0c <Reset_Handler+0x7c>)
   8099c:	4a19      	ldr	r2, [pc, #100]	; (80a04 <Reset_Handler+0x74>)
   8099e:	429a      	cmp	r2, r3
   809a0:	d20c      	bcs.n	809bc <Reset_Handler+0x2c>
   809a2:	3b01      	subs	r3, #1
   809a4:	1a9b      	subs	r3, r3, r2
   809a6:	f023 0303 	bic.w	r3, r3, #3
   809aa:	3304      	adds	r3, #4
   809ac:	4413      	add	r3, r2
   809ae:	4916      	ldr	r1, [pc, #88]	; (80a08 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   809b0:	f851 0b04 	ldr.w	r0, [r1], #4
   809b4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   809b8:	429a      	cmp	r2, r3
   809ba:	d1f9      	bne.n	809b0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   809bc:	4b14      	ldr	r3, [pc, #80]	; (80a10 <Reset_Handler+0x80>)
   809be:	4a15      	ldr	r2, [pc, #84]	; (80a14 <Reset_Handler+0x84>)
   809c0:	429a      	cmp	r2, r3
   809c2:	d20a      	bcs.n	809da <Reset_Handler+0x4a>
   809c4:	3b01      	subs	r3, #1
   809c6:	1a9b      	subs	r3, r3, r2
   809c8:	f023 0303 	bic.w	r3, r3, #3
   809cc:	3304      	adds	r3, #4
   809ce:	4413      	add	r3, r2
		*pDest++ = 0;
   809d0:	2100      	movs	r1, #0
   809d2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   809d6:	4293      	cmp	r3, r2
   809d8:	d1fb      	bne.n	809d2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   809da:	4b0f      	ldr	r3, [pc, #60]	; (80a18 <Reset_Handler+0x88>)
   809dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   809e0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   809e4:	490d      	ldr	r1, [pc, #52]	; (80a1c <Reset_Handler+0x8c>)
   809e6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   809e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   809ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   809f0:	d203      	bcs.n	809fa <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   809f2:	688b      	ldr	r3, [r1, #8]
   809f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   809f8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   809fa:	4b09      	ldr	r3, [pc, #36]	; (80a20 <Reset_Handler+0x90>)
   809fc:	4798      	blx	r3

	/* Branch to main function */
	main();
   809fe:	4b09      	ldr	r3, [pc, #36]	; (80a24 <Reset_Handler+0x94>)
   80a00:	4798      	blx	r3
   80a02:	e7fe      	b.n	80a02 <Reset_Handler+0x72>
   80a04:	20070000 	.word	0x20070000
   80a08:	00084e44 	.word	0x00084e44
   80a0c:	20070af0 	.word	0x20070af0
   80a10:	20070bf8 	.word	0x20070bf8
   80a14:	20070af0 	.word	0x20070af0
   80a18:	00080000 	.word	0x00080000
   80a1c:	e000ed00 	.word	0xe000ed00
   80a20:	000820f9 	.word	0x000820f9
   80a24:	00080e19 	.word	0x00080e19

00080a28 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80a28:	4b3d      	ldr	r3, [pc, #244]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a2c:	f003 0303 	and.w	r3, r3, #3
   80a30:	2b03      	cmp	r3, #3
   80a32:	d80e      	bhi.n	80a52 <SystemCoreClockUpdate+0x2a>
   80a34:	e8df f003 	tbb	[pc, r3]
   80a38:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a3c:	4b39      	ldr	r3, [pc, #228]	; (80b24 <SystemCoreClockUpdate+0xfc>)
   80a3e:	695b      	ldr	r3, [r3, #20]
   80a40:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80a44:	bf14      	ite	ne
   80a46:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80a4a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80a4e:	4b36      	ldr	r3, [pc, #216]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80a50:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80a52:	4b33      	ldr	r3, [pc, #204]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a5a:	2b70      	cmp	r3, #112	; 0x70
   80a5c:	d057      	beq.n	80b0e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a5e:	4b30      	ldr	r3, [pc, #192]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a62:	4931      	ldr	r1, [pc, #196]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80a64:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80a68:	680b      	ldr	r3, [r1, #0]
   80a6a:	40d3      	lsrs	r3, r2
   80a6c:	600b      	str	r3, [r1, #0]
   80a6e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a70:	4b2b      	ldr	r3, [pc, #172]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80a72:	6a1b      	ldr	r3, [r3, #32]
   80a74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a78:	d003      	beq.n	80a82 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a7a:	4a2c      	ldr	r2, [pc, #176]	; (80b2c <SystemCoreClockUpdate+0x104>)
   80a7c:	4b2a      	ldr	r3, [pc, #168]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80a7e:	601a      	str	r2, [r3, #0]
   80a80:	e7e7      	b.n	80a52 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a82:	4a2b      	ldr	r2, [pc, #172]	; (80b30 <SystemCoreClockUpdate+0x108>)
   80a84:	4b28      	ldr	r3, [pc, #160]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80a86:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a88:	4b25      	ldr	r3, [pc, #148]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80a8a:	6a1b      	ldr	r3, [r3, #32]
   80a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a90:	2b10      	cmp	r3, #16
   80a92:	d005      	beq.n	80aa0 <SystemCoreClockUpdate+0x78>
   80a94:	2b20      	cmp	r3, #32
   80a96:	d1dc      	bne.n	80a52 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80a98:	4a24      	ldr	r2, [pc, #144]	; (80b2c <SystemCoreClockUpdate+0x104>)
   80a9a:	4b23      	ldr	r3, [pc, #140]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80a9c:	601a      	str	r2, [r3, #0]
				break;
   80a9e:	e7d8      	b.n	80a52 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80aa0:	4a24      	ldr	r2, [pc, #144]	; (80b34 <SystemCoreClockUpdate+0x10c>)
   80aa2:	4b21      	ldr	r3, [pc, #132]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80aa4:	601a      	str	r2, [r3, #0]
				break;
   80aa6:	e7d4      	b.n	80a52 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80aa8:	4b1d      	ldr	r3, [pc, #116]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80aaa:	6a1b      	ldr	r3, [r3, #32]
   80aac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ab0:	d00c      	beq.n	80acc <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ab2:	4a1e      	ldr	r2, [pc, #120]	; (80b2c <SystemCoreClockUpdate+0x104>)
   80ab4:	4b1c      	ldr	r3, [pc, #112]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80ab6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80ab8:	4b19      	ldr	r3, [pc, #100]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80abc:	f003 0303 	and.w	r3, r3, #3
   80ac0:	2b02      	cmp	r3, #2
   80ac2:	d016      	beq.n	80af2 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80ac4:	4a1c      	ldr	r2, [pc, #112]	; (80b38 <SystemCoreClockUpdate+0x110>)
   80ac6:	4b18      	ldr	r3, [pc, #96]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80ac8:	601a      	str	r2, [r3, #0]
   80aca:	e7c2      	b.n	80a52 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80acc:	4a18      	ldr	r2, [pc, #96]	; (80b30 <SystemCoreClockUpdate+0x108>)
   80ace:	4b16      	ldr	r3, [pc, #88]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80ad0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ad2:	4b13      	ldr	r3, [pc, #76]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80ad4:	6a1b      	ldr	r3, [r3, #32]
   80ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ada:	2b10      	cmp	r3, #16
   80adc:	d005      	beq.n	80aea <SystemCoreClockUpdate+0xc2>
   80ade:	2b20      	cmp	r3, #32
   80ae0:	d1ea      	bne.n	80ab8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80ae2:	4a12      	ldr	r2, [pc, #72]	; (80b2c <SystemCoreClockUpdate+0x104>)
   80ae4:	4b10      	ldr	r3, [pc, #64]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80ae6:	601a      	str	r2, [r3, #0]
				break;
   80ae8:	e7e6      	b.n	80ab8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80aea:	4a12      	ldr	r2, [pc, #72]	; (80b34 <SystemCoreClockUpdate+0x10c>)
   80aec:	4b0e      	ldr	r3, [pc, #56]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80aee:	601a      	str	r2, [r3, #0]
				break;
   80af0:	e7e2      	b.n	80ab8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80af2:	4a0b      	ldr	r2, [pc, #44]	; (80b20 <SystemCoreClockUpdate+0xf8>)
   80af4:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80af6:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80af8:	480b      	ldr	r0, [pc, #44]	; (80b28 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80afa:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80afe:	6803      	ldr	r3, [r0, #0]
   80b00:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b04:	b2d2      	uxtb	r2, r2
   80b06:	fbb3 f3f2 	udiv	r3, r3, r2
   80b0a:	6003      	str	r3, [r0, #0]
   80b0c:	e7a1      	b.n	80a52 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80b0e:	4a06      	ldr	r2, [pc, #24]	; (80b28 <SystemCoreClockUpdate+0x100>)
   80b10:	6813      	ldr	r3, [r2, #0]
   80b12:	490a      	ldr	r1, [pc, #40]	; (80b3c <SystemCoreClockUpdate+0x114>)
   80b14:	fba1 1303 	umull	r1, r3, r1, r3
   80b18:	085b      	lsrs	r3, r3, #1
   80b1a:	6013      	str	r3, [r2, #0]
   80b1c:	4770      	bx	lr
   80b1e:	bf00      	nop
   80b20:	400e0600 	.word	0x400e0600
   80b24:	400e1a10 	.word	0x400e1a10
   80b28:	2007013c 	.word	0x2007013c
   80b2c:	00b71b00 	.word	0x00b71b00
   80b30:	003d0900 	.word	0x003d0900
   80b34:	007a1200 	.word	0x007a1200
   80b38:	0e4e1c00 	.word	0x0e4e1c00
   80b3c:	aaaaaaab 	.word	0xaaaaaaab

00080b40 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80b40:	4b0a      	ldr	r3, [pc, #40]	; (80b6c <_sbrk+0x2c>)
   80b42:	681b      	ldr	r3, [r3, #0]
   80b44:	b153      	cbz	r3, 80b5c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80b46:	4b09      	ldr	r3, [pc, #36]	; (80b6c <_sbrk+0x2c>)
   80b48:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80b4a:	181a      	adds	r2, r3, r0
   80b4c:	4908      	ldr	r1, [pc, #32]	; (80b70 <_sbrk+0x30>)
   80b4e:	4291      	cmp	r1, r2
   80b50:	db08      	blt.n	80b64 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80b52:	4610      	mov	r0, r2
   80b54:	4a05      	ldr	r2, [pc, #20]	; (80b6c <_sbrk+0x2c>)
   80b56:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80b58:	4618      	mov	r0, r3
   80b5a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80b5c:	4a05      	ldr	r2, [pc, #20]	; (80b74 <_sbrk+0x34>)
   80b5e:	4b03      	ldr	r3, [pc, #12]	; (80b6c <_sbrk+0x2c>)
   80b60:	601a      	str	r2, [r3, #0]
   80b62:	e7f0      	b.n	80b46 <_sbrk+0x6>
		return (caddr_t) -1;	
   80b64:	f04f 30ff 	mov.w	r0, #4294967295
}
   80b68:	4770      	bx	lr
   80b6a:	bf00      	nop
   80b6c:	20070b84 	.word	0x20070b84
   80b70:	20087ffc 	.word	0x20087ffc
   80b74:	20072bf8 	.word	0x20072bf8

00080b78 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80b78:	f04f 30ff 	mov.w	r0, #4294967295
   80b7c:	4770      	bx	lr

00080b7e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80b82:	604b      	str	r3, [r1, #4]

	return 0;
}
   80b84:	2000      	movs	r0, #0
   80b86:	4770      	bx	lr

00080b88 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80b88:	2001      	movs	r0, #1
   80b8a:	4770      	bx	lr

00080b8c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80b8c:	2000      	movs	r0, #0
   80b8e:	4770      	bx	lr

00080b90 <init_motors>:

static void setup_direction_pin(void);
static void maintain_speed(int speed);

void init_motors(void)
{
   80b90:	b510      	push	{r4, lr}
   80b92:	200b      	movs	r0, #11
   80b94:	4c0c      	ldr	r4, [pc, #48]	; (80bc8 <init_motors+0x38>)
   80b96:	47a0      	blx	r4
   80b98:	200c      	movs	r0, #12
   80b9a:	47a0      	blx	r4
   80b9c:	200d      	movs	r0, #13
   80b9e:	47a0      	blx	r4
   80ba0:	200e      	movs	r0, #14
   80ba2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80ba4:	4b09      	ldr	r3, [pc, #36]	; (80bcc <init_motors+0x3c>)
   80ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80baa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80bac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80bb4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80bb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	setup_direction_pin();
	pulse_init();
   80bba:	4b05      	ldr	r3, [pc, #20]	; (80bd0 <init_motors+0x40>)
   80bbc:	4798      	blx	r3
	pulse_start(0);
   80bbe:	2000      	movs	r0, #0
   80bc0:	2100      	movs	r1, #0
   80bc2:	4b04      	ldr	r3, [pc, #16]	; (80bd4 <init_motors+0x44>)
   80bc4:	4798      	blx	r3
   80bc6:	bd10      	pop	{r4, pc}
   80bc8:	00080949 	.word	0x00080949
   80bcc:	400e1200 	.word	0x400e1200
   80bd0:	000801cd 	.word	0x000801cd
   80bd4:	00080319 	.word	0x00080319

00080bd8 <set_direction>:
}*/

// Sets motor direction, forward or left
void set_direction(int dir)
{
	if(dir == FORWARD)
   80bd8:	2801      	cmp	r0, #1
   80bda:	d008      	beq.n	80bee <set_direction+0x16>
	{
		// don't remember why they're opposites ...
		ioport_set_pin_level(DIR_pin_MotorA, 1);
		ioport_set_pin_level(DIR_pin_MotorB, 0);
	}
	if(dir == REVERSE)
   80bdc:	b930      	cbnz	r0, 80bec <set_direction+0x14>
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80bde:	4b08      	ldr	r3, [pc, #32]	; (80c00 <set_direction+0x28>)
   80be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80be4:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80be6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80bea:	631a      	str	r2, [r3, #48]	; 0x30
   80bec:	4770      	bx	lr
   80bee:	4b04      	ldr	r3, [pc, #16]	; (80c00 <set_direction+0x28>)
   80bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80bf4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80bfa:	635a      	str	r2, [r3, #52]	; 0x34
   80bfc:	4770      	bx	lr
   80bfe:	bf00      	nop
   80c00:	400e1200 	.word	0x400e1200

00080c04 <pulseCounter_handler_CHA_MOTOR_LEFT>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80c04:	4b04      	ldr	r3, [pc, #16]	; (80c18 <pulseCounter_handler_CHA_MOTOR_LEFT+0x14>)
   80c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
//uint32_t chB_motor_right = 0;


void pulseCounter_handler_CHA_MOTOR_LEFT(const uint32_t id, const uint32_t index)
{
	if (ioport_get_pin_level(CHA_PIN_MOTOR_LEFT))
   80c08:	f013 0f04 	tst.w	r3, #4
   80c0c:	d003      	beq.n	80c16 <pulseCounter_handler_CHA_MOTOR_LEFT+0x12>
	{
		chA_motor_left++;
   80c0e:	4a03      	ldr	r2, [pc, #12]	; (80c1c <pulseCounter_handler_CHA_MOTOR_LEFT+0x18>)
   80c10:	6813      	ldr	r3, [r2, #0]
   80c12:	3301      	adds	r3, #1
   80c14:	6013      	str	r3, [r2, #0]
   80c16:	4770      	bx	lr
   80c18:	400e1400 	.word	0x400e1400
   80c1c:	20070b88 	.word	0x20070b88

00080c20 <pulseCounter_handler_CHA_MOTOR_RIGHT>:
   80c20:	4b04      	ldr	r3, [pc, #16]	; (80c34 <pulseCounter_handler_CHA_MOTOR_RIGHT+0x14>)
   80c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}
}*/

void pulseCounter_handler_CHA_MOTOR_RIGHT(const uint32_t id, const uint32_t index)
{
	if (ioport_get_pin_level(CHA_PIN_MOTOR_RIGHT))
   80c24:	f413 7f80 	tst.w	r3, #256	; 0x100
   80c28:	d003      	beq.n	80c32 <pulseCounter_handler_CHA_MOTOR_RIGHT+0x12>
	{
		chA_motor_right++;
   80c2a:	4a03      	ldr	r2, [pc, #12]	; (80c38 <pulseCounter_handler_CHA_MOTOR_RIGHT+0x18>)
   80c2c:	6813      	ldr	r3, [r2, #0]
   80c2e:	3301      	adds	r3, #1
   80c30:	6013      	str	r3, [r2, #0]
   80c32:	4770      	bx	lr
   80c34:	400e1400 	.word	0x400e1400
   80c38:	20070b8c 	.word	0x20070b8c

00080c3c <pulseCounter_configInterrupt>:
	{
		chB_motor_right++;
	}
}*/

void pulseCounter_configInterrupt(void){
   80c3c:	b530      	push	{r4, r5, lr}
   80c3e:	b083      	sub	sp, #12
	pmc_set_writeprotect(false);
   80c40:	2000      	movs	r0, #0
   80c42:	4b15      	ldr	r3, [pc, #84]	; (80c98 <pulseCounter_configInterrupt+0x5c>)
   80c44:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   80c46:	200e      	movs	r0, #14
   80c48:	4b14      	ldr	r3, [pc, #80]	; (80c9c <pulseCounter_configInterrupt+0x60>)
   80c4a:	4798      	blx	r3
	pio_set_input(PIOD, PIO_PD1, PIO_PULLUP);
   80c4c:	4c14      	ldr	r4, [pc, #80]	; (80ca0 <pulseCounter_configInterrupt+0x64>)
   80c4e:	2201      	movs	r2, #1
   80c50:	2102      	movs	r1, #2
   80c52:	4620      	mov	r0, r4
   80c54:	4d13      	ldr	r5, [pc, #76]	; (80ca4 <pulseCounter_configInterrupt+0x68>)
   80c56:	47a8      	blx	r5
	//pio_set_input(PIOD, PIO_PD2, PIO_PULLUP);
	pio_set_input(PIOD, PIO_PD3, PIO_PULLUP);
   80c58:	2201      	movs	r2, #1
   80c5a:	2108      	movs	r1, #8
   80c5c:	4620      	mov	r0, r4
   80c5e:	47a8      	blx	r5
	//pio_set_input(PIOD, PIO_PD6, PIO_PULLUP);
	pio_handler_set(PIOD, ID_PIOD, PIO_PD1, PIO_IT_EDGE, pulseCounter_handler_CHA_MOTOR_LEFT);
   80c60:	4b11      	ldr	r3, [pc, #68]	; (80ca8 <pulseCounter_configInterrupt+0x6c>)
   80c62:	9300      	str	r3, [sp, #0]
   80c64:	2340      	movs	r3, #64	; 0x40
   80c66:	2202      	movs	r2, #2
   80c68:	210e      	movs	r1, #14
   80c6a:	4620      	mov	r0, r4
   80c6c:	4d0f      	ldr	r5, [pc, #60]	; (80cac <pulseCounter_configInterrupt+0x70>)
   80c6e:	47a8      	blx	r5
	//pio_handler_set(PIOD, ID_PIOD, PIO_PD2, PIO_IT_EDGE, pulseCounter_handler_CHB_MOTOR_LEFT);
	pio_handler_set(PIOD, ID_PIOD, PIO_PD3, PIO_IT_EDGE, pulseCounter_handler_CHA_MOTOR_RIGHT);
   80c70:	4b0f      	ldr	r3, [pc, #60]	; (80cb0 <pulseCounter_configInterrupt+0x74>)
   80c72:	9300      	str	r3, [sp, #0]
   80c74:	2340      	movs	r3, #64	; 0x40
   80c76:	2208      	movs	r2, #8
   80c78:	210e      	movs	r1, #14
   80c7a:	4620      	mov	r0, r4
   80c7c:	47a8      	blx	r5
	//pio_handler_set(PIOD, ID_PIOD, PIO_PD6, PIO_IT_EDGE, pulseCounter_handler_CHB_MOTOR_RIGHT);
	pio_enable_interrupt(PIOD, PIO_PD1);
   80c7e:	2102      	movs	r1, #2
   80c80:	4620      	mov	r0, r4
   80c82:	4d0c      	ldr	r5, [pc, #48]	; (80cb4 <pulseCounter_configInterrupt+0x78>)
   80c84:	47a8      	blx	r5
	//pio_enable_interrupt(PIOD, PIO_PD2);
	pio_enable_interrupt(PIOD, PIO_PD3);
   80c86:	2108      	movs	r1, #8
   80c88:	4620      	mov	r0, r4
   80c8a:	47a8      	blx	r5
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80c8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80c90:	4b09      	ldr	r3, [pc, #36]	; (80cb8 <pulseCounter_configInterrupt+0x7c>)
   80c92:	601a      	str	r2, [r3, #0]
	//pio_enable_interrupt(PIOD, PIO_PD6);
	NVIC_EnableIRQ(PIOD_IRQn);
}
   80c94:	b003      	add	sp, #12
   80c96:	bd30      	pop	{r4, r5, pc}
   80c98:	00080969 	.word	0x00080969
   80c9c:	00080949 	.word	0x00080949
   80ca0:	400e1400 	.word	0x400e1400
   80ca4:	00080553 	.word	0x00080553
   80ca8:	00080c05 	.word	0x00080c05
   80cac:	000807a1 	.word	0x000807a1
   80cb0:	00080c21 	.word	0x00080c21
   80cb4:	000805d9 	.word	0x000805d9
   80cb8:	e000e100 	.word	0xe000e100

00080cbc <HardFault_Handler>:

void HardFault_Handler  ( void )
{
   80cbc:	b508      	push	{r3, lr}
	printf("Hard fault");
   80cbe:	4802      	ldr	r0, [pc, #8]	; (80cc8 <HardFault_Handler+0xc>)
   80cc0:	4b02      	ldr	r3, [pc, #8]	; (80ccc <HardFault_Handler+0x10>)
   80cc2:	4798      	blx	r3
   80cc4:	bd08      	pop	{r3, pc}
   80cc6:	bf00      	nop
   80cc8:	00084c68 	.word	0x00084c68
   80ccc:	00082149 	.word	0x00082149

00080cd0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   80cd2:	b083      	sub	sp, #12
   80cd4:	4604      	mov	r4, r0
   80cd6:	460d      	mov	r5, r1
	uint32_t val = 0;
   80cd8:	2300      	movs	r3, #0
   80cda:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80cdc:	4b20      	ldr	r3, [pc, #128]	; (80d60 <usart_serial_getchar+0x90>)
   80cde:	4298      	cmp	r0, r3
   80ce0:	d00d      	beq.n	80cfe <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80ce2:	4b20      	ldr	r3, [pc, #128]	; (80d64 <usart_serial_getchar+0x94>)
   80ce4:	4298      	cmp	r0, r3
   80ce6:	d012      	beq.n	80d0e <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80ce8:	4b1f      	ldr	r3, [pc, #124]	; (80d68 <usart_serial_getchar+0x98>)
   80cea:	4298      	cmp	r0, r3
   80cec:	d019      	beq.n	80d22 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80cee:	4b1f      	ldr	r3, [pc, #124]	; (80d6c <usart_serial_getchar+0x9c>)
   80cf0:	429c      	cmp	r4, r3
   80cf2:	d020      	beq.n	80d36 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80cf4:	4b1e      	ldr	r3, [pc, #120]	; (80d70 <usart_serial_getchar+0xa0>)
   80cf6:	429c      	cmp	r4, r3
   80cf8:	d027      	beq.n	80d4a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80cfa:	b003      	add	sp, #12
   80cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80cfe:	461f      	mov	r7, r3
   80d00:	4e1c      	ldr	r6, [pc, #112]	; (80d74 <usart_serial_getchar+0xa4>)
   80d02:	4629      	mov	r1, r5
   80d04:	4638      	mov	r0, r7
   80d06:	47b0      	blx	r6
   80d08:	2800      	cmp	r0, #0
   80d0a:	d1fa      	bne.n	80d02 <usart_serial_getchar+0x32>
   80d0c:	e7ef      	b.n	80cee <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80d0e:	461f      	mov	r7, r3
   80d10:	4e19      	ldr	r6, [pc, #100]	; (80d78 <usart_serial_getchar+0xa8>)
   80d12:	a901      	add	r1, sp, #4
   80d14:	4638      	mov	r0, r7
   80d16:	47b0      	blx	r6
   80d18:	2800      	cmp	r0, #0
   80d1a:	d1fa      	bne.n	80d12 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80d1c:	9b01      	ldr	r3, [sp, #4]
   80d1e:	702b      	strb	r3, [r5, #0]
   80d20:	e7e8      	b.n	80cf4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80d22:	461e      	mov	r6, r3
   80d24:	4c14      	ldr	r4, [pc, #80]	; (80d78 <usart_serial_getchar+0xa8>)
   80d26:	a901      	add	r1, sp, #4
   80d28:	4630      	mov	r0, r6
   80d2a:	47a0      	blx	r4
   80d2c:	2800      	cmp	r0, #0
   80d2e:	d1fa      	bne.n	80d26 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80d30:	9b01      	ldr	r3, [sp, #4]
   80d32:	702b      	strb	r3, [r5, #0]
   80d34:	e7e1      	b.n	80cfa <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80d36:	461e      	mov	r6, r3
   80d38:	4c0f      	ldr	r4, [pc, #60]	; (80d78 <usart_serial_getchar+0xa8>)
   80d3a:	a901      	add	r1, sp, #4
   80d3c:	4630      	mov	r0, r6
   80d3e:	47a0      	blx	r4
   80d40:	2800      	cmp	r0, #0
   80d42:	d1fa      	bne.n	80d3a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80d44:	9b01      	ldr	r3, [sp, #4]
   80d46:	702b      	strb	r3, [r5, #0]
   80d48:	e7d7      	b.n	80cfa <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80d4a:	461e      	mov	r6, r3
   80d4c:	4c0a      	ldr	r4, [pc, #40]	; (80d78 <usart_serial_getchar+0xa8>)
   80d4e:	a901      	add	r1, sp, #4
   80d50:	4630      	mov	r0, r6
   80d52:	47a0      	blx	r4
   80d54:	2800      	cmp	r0, #0
   80d56:	d1fa      	bne.n	80d4e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80d58:	9b01      	ldr	r3, [sp, #4]
   80d5a:	702b      	strb	r3, [r5, #0]
}
   80d5c:	e7cd      	b.n	80cfa <usart_serial_getchar+0x2a>
   80d5e:	bf00      	nop
   80d60:	400e0800 	.word	0x400e0800
   80d64:	40098000 	.word	0x40098000
   80d68:	4009c000 	.word	0x4009c000
   80d6c:	400a0000 	.word	0x400a0000
   80d70:	400a4000 	.word	0x400a4000
   80d74:	0008041f 	.word	0x0008041f
   80d78:	000803c1 	.word	0x000803c1

00080d7c <usart_serial_putchar>:
{
   80d7c:	b570      	push	{r4, r5, r6, lr}
   80d7e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80d80:	4b1e      	ldr	r3, [pc, #120]	; (80dfc <usart_serial_putchar+0x80>)
   80d82:	4298      	cmp	r0, r3
   80d84:	d00d      	beq.n	80da2 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80d86:	4b1e      	ldr	r3, [pc, #120]	; (80e00 <usart_serial_putchar+0x84>)
   80d88:	4298      	cmp	r0, r3
   80d8a:	d013      	beq.n	80db4 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80d8c:	4b1d      	ldr	r3, [pc, #116]	; (80e04 <usart_serial_putchar+0x88>)
   80d8e:	4298      	cmp	r0, r3
   80d90:	d019      	beq.n	80dc6 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80d92:	4b1d      	ldr	r3, [pc, #116]	; (80e08 <usart_serial_putchar+0x8c>)
   80d94:	4298      	cmp	r0, r3
   80d96:	d01f      	beq.n	80dd8 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80d98:	4b1c      	ldr	r3, [pc, #112]	; (80e0c <usart_serial_putchar+0x90>)
   80d9a:	4298      	cmp	r0, r3
   80d9c:	d025      	beq.n	80dea <usart_serial_putchar+0x6e>
	return 0;
   80d9e:	2000      	movs	r0, #0
}
   80da0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80da2:	461e      	mov	r6, r3
   80da4:	4d1a      	ldr	r5, [pc, #104]	; (80e10 <usart_serial_putchar+0x94>)
   80da6:	4621      	mov	r1, r4
   80da8:	4630      	mov	r0, r6
   80daa:	47a8      	blx	r5
   80dac:	2800      	cmp	r0, #0
   80dae:	d1fa      	bne.n	80da6 <usart_serial_putchar+0x2a>
		return 1;
   80db0:	2001      	movs	r0, #1
   80db2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80db4:	461e      	mov	r6, r3
   80db6:	4d17      	ldr	r5, [pc, #92]	; (80e14 <usart_serial_putchar+0x98>)
   80db8:	4621      	mov	r1, r4
   80dba:	4630      	mov	r0, r6
   80dbc:	47a8      	blx	r5
   80dbe:	2800      	cmp	r0, #0
   80dc0:	d1fa      	bne.n	80db8 <usart_serial_putchar+0x3c>
		return 1;
   80dc2:	2001      	movs	r0, #1
   80dc4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80dc6:	461e      	mov	r6, r3
   80dc8:	4d12      	ldr	r5, [pc, #72]	; (80e14 <usart_serial_putchar+0x98>)
   80dca:	4621      	mov	r1, r4
   80dcc:	4630      	mov	r0, r6
   80dce:	47a8      	blx	r5
   80dd0:	2800      	cmp	r0, #0
   80dd2:	d1fa      	bne.n	80dca <usart_serial_putchar+0x4e>
		return 1;
   80dd4:	2001      	movs	r0, #1
   80dd6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80dd8:	461e      	mov	r6, r3
   80dda:	4d0e      	ldr	r5, [pc, #56]	; (80e14 <usart_serial_putchar+0x98>)
   80ddc:	4621      	mov	r1, r4
   80dde:	4630      	mov	r0, r6
   80de0:	47a8      	blx	r5
   80de2:	2800      	cmp	r0, #0
   80de4:	d1fa      	bne.n	80ddc <usart_serial_putchar+0x60>
		return 1;
   80de6:	2001      	movs	r0, #1
   80de8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80dea:	461e      	mov	r6, r3
   80dec:	4d09      	ldr	r5, [pc, #36]	; (80e14 <usart_serial_putchar+0x98>)
   80dee:	4621      	mov	r1, r4
   80df0:	4630      	mov	r0, r6
   80df2:	47a8      	blx	r5
   80df4:	2800      	cmp	r0, #0
   80df6:	d1fa      	bne.n	80dee <usart_serial_putchar+0x72>
		return 1;
   80df8:	2001      	movs	r0, #1
   80dfa:	bd70      	pop	{r4, r5, r6, pc}
   80dfc:	400e0800 	.word	0x400e0800
   80e00:	40098000 	.word	0x40098000
   80e04:	4009c000 	.word	0x4009c000
   80e08:	400a0000 	.word	0x400a0000
   80e0c:	400a4000 	.word	0x400a4000
   80e10:	0008040f 	.word	0x0008040f
   80e14:	000803ad 	.word	0x000803ad

00080e18 <main>:
	printf("Console ready\n");
	printf("=============\n");
}

int main (void)
{
   80e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e1c:	b08b      	sub	sp, #44	; 0x2c
	sysclk_init();
   80e1e:	4b68      	ldr	r3, [pc, #416]	; (80fc0 <main+0x1a8>)
   80e20:	4798      	blx	r3
	board_init();
   80e22:	4b68      	ldr	r3, [pc, #416]	; (80fc4 <main+0x1ac>)
   80e24:	4798      	blx	r3
   80e26:	2008      	movs	r0, #8
   80e28:	4d67      	ldr	r5, [pc, #412]	; (80fc8 <main+0x1b0>)
   80e2a:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80e2c:	4c67      	ldr	r4, [pc, #412]	; (80fcc <main+0x1b4>)
   80e2e:	4b68      	ldr	r3, [pc, #416]	; (80fd0 <main+0x1b8>)
   80e30:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80e32:	4a68      	ldr	r2, [pc, #416]	; (80fd4 <main+0x1bc>)
   80e34:	4b68      	ldr	r3, [pc, #416]	; (80fd8 <main+0x1c0>)
   80e36:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80e38:	4a68      	ldr	r2, [pc, #416]	; (80fdc <main+0x1c4>)
   80e3a:	4b69      	ldr	r3, [pc, #420]	; (80fe0 <main+0x1c8>)
   80e3c:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80e3e:	4b69      	ldr	r3, [pc, #420]	; (80fe4 <main+0x1cc>)
   80e40:	9307      	str	r3, [sp, #28]
	uart_settings.ul_baudrate = opt->baudrate;
   80e42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80e46:	9308      	str	r3, [sp, #32]
	uart_settings.ul_mode = opt->paritytype;
   80e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80e4c:	9309      	str	r3, [sp, #36]	; 0x24
   80e4e:	2008      	movs	r0, #8
   80e50:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80e52:	a907      	add	r1, sp, #28
   80e54:	4620      	mov	r0, r4
   80e56:	4b64      	ldr	r3, [pc, #400]	; (80fe8 <main+0x1d0>)
   80e58:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80e5a:	4d64      	ldr	r5, [pc, #400]	; (80fec <main+0x1d4>)
   80e5c:	682b      	ldr	r3, [r5, #0]
   80e5e:	2100      	movs	r1, #0
   80e60:	6898      	ldr	r0, [r3, #8]
   80e62:	4c63      	ldr	r4, [pc, #396]	; (80ff0 <main+0x1d8>)
   80e64:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80e66:	682b      	ldr	r3, [r5, #0]
   80e68:	2100      	movs	r1, #0
   80e6a:	6858      	ldr	r0, [r3, #4]
   80e6c:	47a0      	blx	r4
	printf("Console ready\n");
   80e6e:	4861      	ldr	r0, [pc, #388]	; (80ff4 <main+0x1dc>)
   80e70:	4c61      	ldr	r4, [pc, #388]	; (80ff8 <main+0x1e0>)
   80e72:	47a0      	blx	r4
	printf("=============\n");
   80e74:	4861      	ldr	r0, [pc, #388]	; (80ffc <main+0x1e4>)
   80e76:	47a0      	blx	r4
	configureConsole();
	init_motors();
   80e78:	4b61      	ldr	r3, [pc, #388]	; (81000 <main+0x1e8>)
   80e7a:	4798      	blx	r3
	pulseCounter_configInterrupt();
   80e7c:	4b61      	ldr	r3, [pc, #388]	; (81004 <main+0x1ec>)
   80e7e:	4798      	blx	r3
	cpu_irq_enable();
   80e80:	2001      	movs	r0, #1
   80e82:	4b61      	ldr	r3, [pc, #388]	; (81008 <main+0x1f0>)
   80e84:	7018      	strb	r0, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   80e86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80e8a:	b662      	cpsie	i
	uint32_t sec_left = 0, sec_right = 0;
	uint32_t start = 0, stop = 0, diff = 0;
	uint32_t Ts = 1000; // ms
	// Choose test case from test suite for any kind of robot testing
	//test_case_1(target_speed);
	set_direction(FORWARD);
   80e8c:	4b5f      	ldr	r3, [pc, #380]	; (8100c <main+0x1f4>)
   80e8e:	4798      	blx	r3
	One that maintains a steady output and constant speed! Not a 
	traditional PID, don't really know what to call it ...
	There has to be a start value. But this start value should be
	determined through fuzzy control instead.
	*/
	pulse_set_duty_cycle_left(u_start);
   80e90:	2400      	movs	r4, #0
   80e92:	4d5f      	ldr	r5, [pc, #380]	; (81010 <main+0x1f8>)
   80e94:	4620      	mov	r0, r4
   80e96:	4629      	mov	r1, r5
   80e98:	4b5e      	ldr	r3, [pc, #376]	; (81014 <main+0x1fc>)
   80e9a:	4798      	blx	r3
	pulse_set_duty_cycle_right(u_start);
   80e9c:	4620      	mov	r0, r4
   80e9e:	4629      	mov	r1, r5
   80ea0:	4b5d      	ldr	r3, [pc, #372]	; (81018 <main+0x200>)
   80ea2:	4798      	blx	r3
	u_left = u_start;
	u_right = u_start;
	delay_ms(2000);
   80ea4:	485d      	ldr	r0, [pc, #372]	; (8101c <main+0x204>)
   80ea6:	4b5e      	ldr	r3, [pc, #376]	; (81020 <main+0x208>)
   80ea8:	4798      	blx	r3
	uint32_t sec_left = 0, sec_right = 0;
   80eaa:	2100      	movs	r1, #0
	u_right = u_start;
   80eac:	4b5d      	ldr	r3, [pc, #372]	; (81024 <main+0x20c>)
   80eae:	9304      	str	r3, [sp, #16]
	u_left = u_start;
   80eb0:	9303      	str	r3, [sp, #12]
	while (1)
	{
		start = systicks;
   80eb2:	f8df a19c 	ldr.w	sl, [pc, #412]	; 81050 <main+0x238>
		printf("%lu. %lu  ----- %lu. %lu\n", sec_left++, chA_motor_left, sec_right++, chA_motor_right);
   80eb6:	4e5c      	ldr	r6, [pc, #368]	; (81028 <main+0x210>)
   80eb8:	4d5c      	ldr	r5, [pc, #368]	; (8102c <main+0x214>)
		u_left = Kp_left*u_left;
		
		Kp_right = (b/((float)chA_motor_right));
		u_right = Kp_right*u_right;
		
		if(u_left > 90)
   80eba:	f8df b198 	ldr.w	fp, [pc, #408]	; 81054 <main+0x23c>
   80ebe:	e034      	b.n	80f2a <main+0x112>
		{
			u_left = 90;
   80ec0:	4b5b      	ldr	r3, [pc, #364]	; (81030 <main+0x218>)
   80ec2:	9303      	str	r3, [sp, #12]
		else if (u_left < 0)
		{
			u_left = 0;
		}
		
		if(u_right > 90)
   80ec4:	495a      	ldr	r1, [pc, #360]	; (81030 <main+0x218>)
   80ec6:	9c04      	ldr	r4, [sp, #16]
   80ec8:	4620      	mov	r0, r4
   80eca:	47d8      	blx	fp
   80ecc:	b938      	cbnz	r0, 80ede <main+0xc6>
		{
			u_right = 90;
		}
		else if (u_right < 0)
   80ece:	2100      	movs	r1, #0
   80ed0:	4620      	mov	r0, r4
   80ed2:	4b58      	ldr	r3, [pc, #352]	; (81034 <main+0x21c>)
   80ed4:	4798      	blx	r3
   80ed6:	b120      	cbz	r0, 80ee2 <main+0xca>
		{
			u_right = 0;
   80ed8:	2300      	movs	r3, #0
   80eda:	9304      	str	r3, [sp, #16]
   80edc:	e001      	b.n	80ee2 <main+0xca>
			u_right = 90;
   80ede:	4b54      	ldr	r3, [pc, #336]	; (81030 <main+0x218>)
   80ee0:	9304      	str	r3, [sp, #16]
		}
		
		chA_motor_left = 0;
   80ee2:	2300      	movs	r3, #0
   80ee4:	6033      	str	r3, [r6, #0]
		chA_motor_right = 0;
   80ee6:	602b      	str	r3, [r5, #0]
		
		pulse_set_duty_cycle_left(u_left);
   80ee8:	4c53      	ldr	r4, [pc, #332]	; (81038 <main+0x220>)
   80eea:	9803      	ldr	r0, [sp, #12]
   80eec:	47a0      	blx	r4
   80eee:	4b49      	ldr	r3, [pc, #292]	; (81014 <main+0x1fc>)
   80ef0:	4798      	blx	r3
		pulse_set_duty_cycle_right(u_right);
   80ef2:	9804      	ldr	r0, [sp, #16]
   80ef4:	47a0      	blx	r4
   80ef6:	4b48      	ldr	r3, [pc, #288]	; (81018 <main+0x200>)
   80ef8:	4798      	blx	r3
		
		stop = systicks;
		diff = stop - start;
   80efa:	f8da 3000 	ldr.w	r3, [sl]
   80efe:	eba3 0909 	sub.w	r9, r3, r9
		if (diff < Ts)
   80f02:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
   80f06:	d244      	bcs.n	80f92 <main+0x17a>
		{
			delay_ms(Ts-diff);
   80f08:	d03f      	beq.n	80f8a <main+0x172>
   80f0a:	f5c9 797a 	rsb	r9, r9, #1000	; 0x3e8
   80f0e:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80f12:	2300      	movs	r3, #0
   80f14:	f243 60af 	movw	r0, #13999	; 0x36af
   80f18:	2100      	movs	r1, #0
   80f1a:	4c32      	ldr	r4, [pc, #200]	; (80fe4 <main+0x1cc>)
   80f1c:	fbe4 0109 	umlal	r0, r1, r4, r9
   80f20:	4c46      	ldr	r4, [pc, #280]	; (8103c <main+0x224>)
   80f22:	47a0      	blx	r4
   80f24:	4b3e      	ldr	r3, [pc, #248]	; (81020 <main+0x208>)
   80f26:	4798      	blx	r3
{
   80f28:	9905      	ldr	r1, [sp, #20]
		start = systicks;
   80f2a:	f8da 9000 	ldr.w	r9, [sl]
		printf("%lu. %lu  ----- %lu. %lu\n", sec_left++, chA_motor_left, sec_right++, chA_motor_right);
   80f2e:	1c4b      	adds	r3, r1, #1
   80f30:	9305      	str	r3, [sp, #20]
   80f32:	682b      	ldr	r3, [r5, #0]
   80f34:	9300      	str	r3, [sp, #0]
   80f36:	460b      	mov	r3, r1
   80f38:	6832      	ldr	r2, [r6, #0]
   80f3a:	4841      	ldr	r0, [pc, #260]	; (81040 <main+0x228>)
   80f3c:	4c2e      	ldr	r4, [pc, #184]	; (80ff8 <main+0x1e0>)
   80f3e:	47a0      	blx	r4
		Kp_left = (b/((float)chA_motor_left));
   80f40:	f8df 8114 	ldr.w	r8, [pc, #276]	; 81058 <main+0x240>
   80f44:	6830      	ldr	r0, [r6, #0]
   80f46:	47c0      	blx	r8
   80f48:	4f3e      	ldr	r7, [pc, #248]	; (81044 <main+0x22c>)
   80f4a:	4601      	mov	r1, r0
   80f4c:	483e      	ldr	r0, [pc, #248]	; (81048 <main+0x230>)
   80f4e:	47b8      	blx	r7
		u_left = Kp_left*u_left;
   80f50:	4c3e      	ldr	r4, [pc, #248]	; (8104c <main+0x234>)
   80f52:	4601      	mov	r1, r0
   80f54:	9803      	ldr	r0, [sp, #12]
   80f56:	47a0      	blx	r4
   80f58:	9003      	str	r0, [sp, #12]
		Kp_right = (b/((float)chA_motor_right));
   80f5a:	6828      	ldr	r0, [r5, #0]
   80f5c:	47c0      	blx	r8
   80f5e:	4601      	mov	r1, r0
   80f60:	4839      	ldr	r0, [pc, #228]	; (81048 <main+0x230>)
   80f62:	47b8      	blx	r7
		u_right = Kp_right*u_right;
   80f64:	4601      	mov	r1, r0
   80f66:	9804      	ldr	r0, [sp, #16]
   80f68:	47a0      	blx	r4
   80f6a:	9004      	str	r0, [sp, #16]
		if(u_left > 90)
   80f6c:	4930      	ldr	r1, [pc, #192]	; (81030 <main+0x218>)
   80f6e:	9c03      	ldr	r4, [sp, #12]
   80f70:	4620      	mov	r0, r4
   80f72:	47d8      	blx	fp
   80f74:	2800      	cmp	r0, #0
   80f76:	d1a3      	bne.n	80ec0 <main+0xa8>
		else if (u_left < 0)
   80f78:	2100      	movs	r1, #0
   80f7a:	4620      	mov	r0, r4
   80f7c:	4b2d      	ldr	r3, [pc, #180]	; (81034 <main+0x21c>)
   80f7e:	4798      	blx	r3
   80f80:	2800      	cmp	r0, #0
   80f82:	d09f      	beq.n	80ec4 <main+0xac>
			u_left = 0;
   80f84:	2300      	movs	r3, #0
   80f86:	9303      	str	r3, [sp, #12]
   80f88:	e79c      	b.n	80ec4 <main+0xac>
			delay_ms(Ts-diff);
   80f8a:	2006      	movs	r0, #6
   80f8c:	4b24      	ldr	r3, [pc, #144]	; (81020 <main+0x208>)
   80f8e:	4798      	blx	r3
   80f90:	e7ca      	b.n	80f28 <main+0x110>
		} 
		else
		{
			delay_ms(2*Ts-diff);
   80f92:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
   80f96:	d00f      	beq.n	80fb8 <main+0x1a0>
   80f98:	f5c9 69fa 	rsb	r9, r9, #2000	; 0x7d0
   80f9c:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80fa0:	2300      	movs	r3, #0
   80fa2:	f243 60af 	movw	r0, #13999	; 0x36af
   80fa6:	2100      	movs	r1, #0
   80fa8:	4c0e      	ldr	r4, [pc, #56]	; (80fe4 <main+0x1cc>)
   80faa:	fbe4 0109 	umlal	r0, r1, r4, r9
   80fae:	4c23      	ldr	r4, [pc, #140]	; (8103c <main+0x224>)
   80fb0:	47a0      	blx	r4
   80fb2:	4b1b      	ldr	r3, [pc, #108]	; (81020 <main+0x208>)
   80fb4:	4798      	blx	r3
   80fb6:	e7b7      	b.n	80f28 <main+0x110>
   80fb8:	2006      	movs	r0, #6
   80fba:	4b19      	ldr	r3, [pc, #100]	; (81020 <main+0x208>)
   80fbc:	4798      	blx	r3
   80fbe:	e7b3      	b.n	80f28 <main+0x110>
   80fc0:	00080431 	.word	0x00080431
   80fc4:	00080495 	.word	0x00080495
   80fc8:	00080949 	.word	0x00080949
   80fcc:	400e0800 	.word	0x400e0800
   80fd0:	20070bcc 	.word	0x20070bcc
   80fd4:	00080d7d 	.word	0x00080d7d
   80fd8:	20070bc8 	.word	0x20070bc8
   80fdc:	00080cd1 	.word	0x00080cd1
   80fe0:	20070bc4 	.word	0x20070bc4
   80fe4:	0501bd00 	.word	0x0501bd00
   80fe8:	000803d9 	.word	0x000803d9
   80fec:	20070140 	.word	0x20070140
   80ff0:	0008220d 	.word	0x0008220d
   80ff4:	00084c74 	.word	0x00084c74
   80ff8:	00082149 	.word	0x00082149
   80ffc:	00084c84 	.word	0x00084c84
   81000:	00080b91 	.word	0x00080b91
   81004:	00080c3d 	.word	0x00080c3d
   81008:	20070138 	.word	0x20070138
   8100c:	00080bd9 	.word	0x00080bd9
   81010:	403e0000 	.word	0x403e0000
   81014:	00080251 	.word	0x00080251
   81018:	000802b5 	.word	0x000802b5
   8101c:	00b71b00 	.word	0x00b71b00
   81020:	20070001 	.word	0x20070001
   81024:	41f00000 	.word	0x41f00000
   81028:	20070b88 	.word	0x20070b88
   8102c:	20070b8c 	.word	0x20070b8c
   81030:	42b40000 	.word	0x42b40000
   81034:	00081d99 	.word	0x00081d99
   81038:	00081335 	.word	0x00081335
   8103c:	00081de9 	.word	0x00081de9
   81040:	00084c94 	.word	0x00084c94
   81044:	00081bc5 	.word	0x00081bc5
   81048:	43960000 	.word	0x43960000
   8104c:	00081a5d 	.word	0x00081a5d
   81050:	20070b0c 	.word	0x20070b0c
   81054:	00081dd5 	.word	0x00081dd5
   81058:	000819ad 	.word	0x000819ad

0008105c <SysTick_Handler>:

void SysTick_Handler(void)
{
	/* SysTick interrupt handler counts from 84000 to 0 in 1 ms, 
		so the variable gets incremented every 1 ms. Period has been confirmed using oscilloscope. */
	systicks++;
   8105c:	4a02      	ldr	r2, [pc, #8]	; (81068 <SysTick_Handler+0xc>)
   8105e:	6813      	ldr	r3, [r2, #0]
   81060:	3301      	adds	r3, #1
   81062:	6013      	str	r3, [r2, #0]
   81064:	4770      	bx	lr
   81066:	bf00      	nop
   81068:	20070b0c 	.word	0x20070b0c

0008106c <__aeabi_drsub>:
   8106c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81070:	e002      	b.n	81078 <__adddf3>
   81072:	bf00      	nop

00081074 <__aeabi_dsub>:
   81074:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081078 <__adddf3>:
   81078:	b530      	push	{r4, r5, lr}
   8107a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8107e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81082:	ea94 0f05 	teq	r4, r5
   81086:	bf08      	it	eq
   81088:	ea90 0f02 	teqeq	r0, r2
   8108c:	bf1f      	itttt	ne
   8108e:	ea54 0c00 	orrsne.w	ip, r4, r0
   81092:	ea55 0c02 	orrsne.w	ip, r5, r2
   81096:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8109a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8109e:	f000 80e2 	beq.w	81266 <__adddf3+0x1ee>
   810a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   810a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   810aa:	bfb8      	it	lt
   810ac:	426d      	neglt	r5, r5
   810ae:	dd0c      	ble.n	810ca <__adddf3+0x52>
   810b0:	442c      	add	r4, r5
   810b2:	ea80 0202 	eor.w	r2, r0, r2
   810b6:	ea81 0303 	eor.w	r3, r1, r3
   810ba:	ea82 0000 	eor.w	r0, r2, r0
   810be:	ea83 0101 	eor.w	r1, r3, r1
   810c2:	ea80 0202 	eor.w	r2, r0, r2
   810c6:	ea81 0303 	eor.w	r3, r1, r3
   810ca:	2d36      	cmp	r5, #54	; 0x36
   810cc:	bf88      	it	hi
   810ce:	bd30      	pophi	{r4, r5, pc}
   810d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   810d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   810d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   810dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   810e0:	d002      	beq.n	810e8 <__adddf3+0x70>
   810e2:	4240      	negs	r0, r0
   810e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   810e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   810ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   810f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   810f4:	d002      	beq.n	810fc <__adddf3+0x84>
   810f6:	4252      	negs	r2, r2
   810f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   810fc:	ea94 0f05 	teq	r4, r5
   81100:	f000 80a7 	beq.w	81252 <__adddf3+0x1da>
   81104:	f1a4 0401 	sub.w	r4, r4, #1
   81108:	f1d5 0e20 	rsbs	lr, r5, #32
   8110c:	db0d      	blt.n	8112a <__adddf3+0xb2>
   8110e:	fa02 fc0e 	lsl.w	ip, r2, lr
   81112:	fa22 f205 	lsr.w	r2, r2, r5
   81116:	1880      	adds	r0, r0, r2
   81118:	f141 0100 	adc.w	r1, r1, #0
   8111c:	fa03 f20e 	lsl.w	r2, r3, lr
   81120:	1880      	adds	r0, r0, r2
   81122:	fa43 f305 	asr.w	r3, r3, r5
   81126:	4159      	adcs	r1, r3
   81128:	e00e      	b.n	81148 <__adddf3+0xd0>
   8112a:	f1a5 0520 	sub.w	r5, r5, #32
   8112e:	f10e 0e20 	add.w	lr, lr, #32
   81132:	2a01      	cmp	r2, #1
   81134:	fa03 fc0e 	lsl.w	ip, r3, lr
   81138:	bf28      	it	cs
   8113a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8113e:	fa43 f305 	asr.w	r3, r3, r5
   81142:	18c0      	adds	r0, r0, r3
   81144:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81148:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8114c:	d507      	bpl.n	8115e <__adddf3+0xe6>
   8114e:	f04f 0e00 	mov.w	lr, #0
   81152:	f1dc 0c00 	rsbs	ip, ip, #0
   81156:	eb7e 0000 	sbcs.w	r0, lr, r0
   8115a:	eb6e 0101 	sbc.w	r1, lr, r1
   8115e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81162:	d31b      	bcc.n	8119c <__adddf3+0x124>
   81164:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81168:	d30c      	bcc.n	81184 <__adddf3+0x10c>
   8116a:	0849      	lsrs	r1, r1, #1
   8116c:	ea5f 0030 	movs.w	r0, r0, rrx
   81170:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81174:	f104 0401 	add.w	r4, r4, #1
   81178:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8117c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81180:	f080 809a 	bcs.w	812b8 <__adddf3+0x240>
   81184:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81188:	bf08      	it	eq
   8118a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8118e:	f150 0000 	adcs.w	r0, r0, #0
   81192:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81196:	ea41 0105 	orr.w	r1, r1, r5
   8119a:	bd30      	pop	{r4, r5, pc}
   8119c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   811a0:	4140      	adcs	r0, r0
   811a2:	eb41 0101 	adc.w	r1, r1, r1
   811a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   811aa:	f1a4 0401 	sub.w	r4, r4, #1
   811ae:	d1e9      	bne.n	81184 <__adddf3+0x10c>
   811b0:	f091 0f00 	teq	r1, #0
   811b4:	bf04      	itt	eq
   811b6:	4601      	moveq	r1, r0
   811b8:	2000      	moveq	r0, #0
   811ba:	fab1 f381 	clz	r3, r1
   811be:	bf08      	it	eq
   811c0:	3320      	addeq	r3, #32
   811c2:	f1a3 030b 	sub.w	r3, r3, #11
   811c6:	f1b3 0220 	subs.w	r2, r3, #32
   811ca:	da0c      	bge.n	811e6 <__adddf3+0x16e>
   811cc:	320c      	adds	r2, #12
   811ce:	dd08      	ble.n	811e2 <__adddf3+0x16a>
   811d0:	f102 0c14 	add.w	ip, r2, #20
   811d4:	f1c2 020c 	rsb	r2, r2, #12
   811d8:	fa01 f00c 	lsl.w	r0, r1, ip
   811dc:	fa21 f102 	lsr.w	r1, r1, r2
   811e0:	e00c      	b.n	811fc <__adddf3+0x184>
   811e2:	f102 0214 	add.w	r2, r2, #20
   811e6:	bfd8      	it	le
   811e8:	f1c2 0c20 	rsble	ip, r2, #32
   811ec:	fa01 f102 	lsl.w	r1, r1, r2
   811f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   811f4:	bfdc      	itt	le
   811f6:	ea41 010c 	orrle.w	r1, r1, ip
   811fa:	4090      	lslle	r0, r2
   811fc:	1ae4      	subs	r4, r4, r3
   811fe:	bfa2      	ittt	ge
   81200:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81204:	4329      	orrge	r1, r5
   81206:	bd30      	popge	{r4, r5, pc}
   81208:	ea6f 0404 	mvn.w	r4, r4
   8120c:	3c1f      	subs	r4, #31
   8120e:	da1c      	bge.n	8124a <__adddf3+0x1d2>
   81210:	340c      	adds	r4, #12
   81212:	dc0e      	bgt.n	81232 <__adddf3+0x1ba>
   81214:	f104 0414 	add.w	r4, r4, #20
   81218:	f1c4 0220 	rsb	r2, r4, #32
   8121c:	fa20 f004 	lsr.w	r0, r0, r4
   81220:	fa01 f302 	lsl.w	r3, r1, r2
   81224:	ea40 0003 	orr.w	r0, r0, r3
   81228:	fa21 f304 	lsr.w	r3, r1, r4
   8122c:	ea45 0103 	orr.w	r1, r5, r3
   81230:	bd30      	pop	{r4, r5, pc}
   81232:	f1c4 040c 	rsb	r4, r4, #12
   81236:	f1c4 0220 	rsb	r2, r4, #32
   8123a:	fa20 f002 	lsr.w	r0, r0, r2
   8123e:	fa01 f304 	lsl.w	r3, r1, r4
   81242:	ea40 0003 	orr.w	r0, r0, r3
   81246:	4629      	mov	r1, r5
   81248:	bd30      	pop	{r4, r5, pc}
   8124a:	fa21 f004 	lsr.w	r0, r1, r4
   8124e:	4629      	mov	r1, r5
   81250:	bd30      	pop	{r4, r5, pc}
   81252:	f094 0f00 	teq	r4, #0
   81256:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8125a:	bf06      	itte	eq
   8125c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81260:	3401      	addeq	r4, #1
   81262:	3d01      	subne	r5, #1
   81264:	e74e      	b.n	81104 <__adddf3+0x8c>
   81266:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8126a:	bf18      	it	ne
   8126c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81270:	d029      	beq.n	812c6 <__adddf3+0x24e>
   81272:	ea94 0f05 	teq	r4, r5
   81276:	bf08      	it	eq
   81278:	ea90 0f02 	teqeq	r0, r2
   8127c:	d005      	beq.n	8128a <__adddf3+0x212>
   8127e:	ea54 0c00 	orrs.w	ip, r4, r0
   81282:	bf04      	itt	eq
   81284:	4619      	moveq	r1, r3
   81286:	4610      	moveq	r0, r2
   81288:	bd30      	pop	{r4, r5, pc}
   8128a:	ea91 0f03 	teq	r1, r3
   8128e:	bf1e      	ittt	ne
   81290:	2100      	movne	r1, #0
   81292:	2000      	movne	r0, #0
   81294:	bd30      	popne	{r4, r5, pc}
   81296:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8129a:	d105      	bne.n	812a8 <__adddf3+0x230>
   8129c:	0040      	lsls	r0, r0, #1
   8129e:	4149      	adcs	r1, r1
   812a0:	bf28      	it	cs
   812a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   812a6:	bd30      	pop	{r4, r5, pc}
   812a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   812ac:	bf3c      	itt	cc
   812ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   812b2:	bd30      	popcc	{r4, r5, pc}
   812b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   812b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   812bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   812c0:	f04f 0000 	mov.w	r0, #0
   812c4:	bd30      	pop	{r4, r5, pc}
   812c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   812ca:	bf1a      	itte	ne
   812cc:	4619      	movne	r1, r3
   812ce:	4610      	movne	r0, r2
   812d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   812d4:	bf1c      	itt	ne
   812d6:	460b      	movne	r3, r1
   812d8:	4602      	movne	r2, r0
   812da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   812de:	bf06      	itte	eq
   812e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   812e4:	ea91 0f03 	teqeq	r1, r3
   812e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   812ec:	bd30      	pop	{r4, r5, pc}
   812ee:	bf00      	nop

000812f0 <__aeabi_ui2d>:
   812f0:	f090 0f00 	teq	r0, #0
   812f4:	bf04      	itt	eq
   812f6:	2100      	moveq	r1, #0
   812f8:	4770      	bxeq	lr
   812fa:	b530      	push	{r4, r5, lr}
   812fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81300:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81304:	f04f 0500 	mov.w	r5, #0
   81308:	f04f 0100 	mov.w	r1, #0
   8130c:	e750      	b.n	811b0 <__adddf3+0x138>
   8130e:	bf00      	nop

00081310 <__aeabi_i2d>:
   81310:	f090 0f00 	teq	r0, #0
   81314:	bf04      	itt	eq
   81316:	2100      	moveq	r1, #0
   81318:	4770      	bxeq	lr
   8131a:	b530      	push	{r4, r5, lr}
   8131c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81320:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81324:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81328:	bf48      	it	mi
   8132a:	4240      	negmi	r0, r0
   8132c:	f04f 0100 	mov.w	r1, #0
   81330:	e73e      	b.n	811b0 <__adddf3+0x138>
   81332:	bf00      	nop

00081334 <__aeabi_f2d>:
   81334:	0042      	lsls	r2, r0, #1
   81336:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8133a:	ea4f 0131 	mov.w	r1, r1, rrx
   8133e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81342:	bf1f      	itttt	ne
   81344:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81348:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8134c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81350:	4770      	bxne	lr
   81352:	f092 0f00 	teq	r2, #0
   81356:	bf14      	ite	ne
   81358:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8135c:	4770      	bxeq	lr
   8135e:	b530      	push	{r4, r5, lr}
   81360:	f44f 7460 	mov.w	r4, #896	; 0x380
   81364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81368:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8136c:	e720      	b.n	811b0 <__adddf3+0x138>
   8136e:	bf00      	nop

00081370 <__aeabi_ul2d>:
   81370:	ea50 0201 	orrs.w	r2, r0, r1
   81374:	bf08      	it	eq
   81376:	4770      	bxeq	lr
   81378:	b530      	push	{r4, r5, lr}
   8137a:	f04f 0500 	mov.w	r5, #0
   8137e:	e00a      	b.n	81396 <__aeabi_l2d+0x16>

00081380 <__aeabi_l2d>:
   81380:	ea50 0201 	orrs.w	r2, r0, r1
   81384:	bf08      	it	eq
   81386:	4770      	bxeq	lr
   81388:	b530      	push	{r4, r5, lr}
   8138a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8138e:	d502      	bpl.n	81396 <__aeabi_l2d+0x16>
   81390:	4240      	negs	r0, r0
   81392:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81396:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8139a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8139e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   813a2:	f43f aedc 	beq.w	8115e <__adddf3+0xe6>
   813a6:	f04f 0203 	mov.w	r2, #3
   813aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   813ae:	bf18      	it	ne
   813b0:	3203      	addne	r2, #3
   813b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   813b6:	bf18      	it	ne
   813b8:	3203      	addne	r2, #3
   813ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   813be:	f1c2 0320 	rsb	r3, r2, #32
   813c2:	fa00 fc03 	lsl.w	ip, r0, r3
   813c6:	fa20 f002 	lsr.w	r0, r0, r2
   813ca:	fa01 fe03 	lsl.w	lr, r1, r3
   813ce:	ea40 000e 	orr.w	r0, r0, lr
   813d2:	fa21 f102 	lsr.w	r1, r1, r2
   813d6:	4414      	add	r4, r2
   813d8:	e6c1      	b.n	8115e <__adddf3+0xe6>
   813da:	bf00      	nop

000813dc <__aeabi_dmul>:
   813dc:	b570      	push	{r4, r5, r6, lr}
   813de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   813e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   813ea:	bf1d      	ittte	ne
   813ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   813f0:	ea94 0f0c 	teqne	r4, ip
   813f4:	ea95 0f0c 	teqne	r5, ip
   813f8:	f000 f8de 	bleq	815b8 <__aeabi_dmul+0x1dc>
   813fc:	442c      	add	r4, r5
   813fe:	ea81 0603 	eor.w	r6, r1, r3
   81402:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81406:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8140a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8140e:	bf18      	it	ne
   81410:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81414:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8141c:	d038      	beq.n	81490 <__aeabi_dmul+0xb4>
   8141e:	fba0 ce02 	umull	ip, lr, r0, r2
   81422:	f04f 0500 	mov.w	r5, #0
   81426:	fbe1 e502 	umlal	lr, r5, r1, r2
   8142a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8142e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81432:	f04f 0600 	mov.w	r6, #0
   81436:	fbe1 5603 	umlal	r5, r6, r1, r3
   8143a:	f09c 0f00 	teq	ip, #0
   8143e:	bf18      	it	ne
   81440:	f04e 0e01 	orrne.w	lr, lr, #1
   81444:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81448:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8144c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81450:	d204      	bcs.n	8145c <__aeabi_dmul+0x80>
   81452:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81456:	416d      	adcs	r5, r5
   81458:	eb46 0606 	adc.w	r6, r6, r6
   8145c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81460:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81464:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81468:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8146c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81470:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81474:	bf88      	it	hi
   81476:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8147a:	d81e      	bhi.n	814ba <__aeabi_dmul+0xde>
   8147c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81480:	bf08      	it	eq
   81482:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81486:	f150 0000 	adcs.w	r0, r0, #0
   8148a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8148e:	bd70      	pop	{r4, r5, r6, pc}
   81490:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81494:	ea46 0101 	orr.w	r1, r6, r1
   81498:	ea40 0002 	orr.w	r0, r0, r2
   8149c:	ea81 0103 	eor.w	r1, r1, r3
   814a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   814a4:	bfc2      	ittt	gt
   814a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   814aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   814ae:	bd70      	popgt	{r4, r5, r6, pc}
   814b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   814b4:	f04f 0e00 	mov.w	lr, #0
   814b8:	3c01      	subs	r4, #1
   814ba:	f300 80ab 	bgt.w	81614 <__aeabi_dmul+0x238>
   814be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   814c2:	bfde      	ittt	le
   814c4:	2000      	movle	r0, #0
   814c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   814ca:	bd70      	pople	{r4, r5, r6, pc}
   814cc:	f1c4 0400 	rsb	r4, r4, #0
   814d0:	3c20      	subs	r4, #32
   814d2:	da35      	bge.n	81540 <__aeabi_dmul+0x164>
   814d4:	340c      	adds	r4, #12
   814d6:	dc1b      	bgt.n	81510 <__aeabi_dmul+0x134>
   814d8:	f104 0414 	add.w	r4, r4, #20
   814dc:	f1c4 0520 	rsb	r5, r4, #32
   814e0:	fa00 f305 	lsl.w	r3, r0, r5
   814e4:	fa20 f004 	lsr.w	r0, r0, r4
   814e8:	fa01 f205 	lsl.w	r2, r1, r5
   814ec:	ea40 0002 	orr.w	r0, r0, r2
   814f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   814f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   814f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   814fc:	fa21 f604 	lsr.w	r6, r1, r4
   81500:	eb42 0106 	adc.w	r1, r2, r6
   81504:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81508:	bf08      	it	eq
   8150a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8150e:	bd70      	pop	{r4, r5, r6, pc}
   81510:	f1c4 040c 	rsb	r4, r4, #12
   81514:	f1c4 0520 	rsb	r5, r4, #32
   81518:	fa00 f304 	lsl.w	r3, r0, r4
   8151c:	fa20 f005 	lsr.w	r0, r0, r5
   81520:	fa01 f204 	lsl.w	r2, r1, r4
   81524:	ea40 0002 	orr.w	r0, r0, r2
   81528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8152c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81530:	f141 0100 	adc.w	r1, r1, #0
   81534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81538:	bf08      	it	eq
   8153a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8153e:	bd70      	pop	{r4, r5, r6, pc}
   81540:	f1c4 0520 	rsb	r5, r4, #32
   81544:	fa00 f205 	lsl.w	r2, r0, r5
   81548:	ea4e 0e02 	orr.w	lr, lr, r2
   8154c:	fa20 f304 	lsr.w	r3, r0, r4
   81550:	fa01 f205 	lsl.w	r2, r1, r5
   81554:	ea43 0302 	orr.w	r3, r3, r2
   81558:	fa21 f004 	lsr.w	r0, r1, r4
   8155c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81560:	fa21 f204 	lsr.w	r2, r1, r4
   81564:	ea20 0002 	bic.w	r0, r0, r2
   81568:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8156c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81570:	bf08      	it	eq
   81572:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81576:	bd70      	pop	{r4, r5, r6, pc}
   81578:	f094 0f00 	teq	r4, #0
   8157c:	d10f      	bne.n	8159e <__aeabi_dmul+0x1c2>
   8157e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81582:	0040      	lsls	r0, r0, #1
   81584:	eb41 0101 	adc.w	r1, r1, r1
   81588:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8158c:	bf08      	it	eq
   8158e:	3c01      	subeq	r4, #1
   81590:	d0f7      	beq.n	81582 <__aeabi_dmul+0x1a6>
   81592:	ea41 0106 	orr.w	r1, r1, r6
   81596:	f095 0f00 	teq	r5, #0
   8159a:	bf18      	it	ne
   8159c:	4770      	bxne	lr
   8159e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   815a2:	0052      	lsls	r2, r2, #1
   815a4:	eb43 0303 	adc.w	r3, r3, r3
   815a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   815ac:	bf08      	it	eq
   815ae:	3d01      	subeq	r5, #1
   815b0:	d0f7      	beq.n	815a2 <__aeabi_dmul+0x1c6>
   815b2:	ea43 0306 	orr.w	r3, r3, r6
   815b6:	4770      	bx	lr
   815b8:	ea94 0f0c 	teq	r4, ip
   815bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   815c0:	bf18      	it	ne
   815c2:	ea95 0f0c 	teqne	r5, ip
   815c6:	d00c      	beq.n	815e2 <__aeabi_dmul+0x206>
   815c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815cc:	bf18      	it	ne
   815ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815d2:	d1d1      	bne.n	81578 <__aeabi_dmul+0x19c>
   815d4:	ea81 0103 	eor.w	r1, r1, r3
   815d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   815dc:	f04f 0000 	mov.w	r0, #0
   815e0:	bd70      	pop	{r4, r5, r6, pc}
   815e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815e6:	bf06      	itte	eq
   815e8:	4610      	moveq	r0, r2
   815ea:	4619      	moveq	r1, r3
   815ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815f0:	d019      	beq.n	81626 <__aeabi_dmul+0x24a>
   815f2:	ea94 0f0c 	teq	r4, ip
   815f6:	d102      	bne.n	815fe <__aeabi_dmul+0x222>
   815f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   815fc:	d113      	bne.n	81626 <__aeabi_dmul+0x24a>
   815fe:	ea95 0f0c 	teq	r5, ip
   81602:	d105      	bne.n	81610 <__aeabi_dmul+0x234>
   81604:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81608:	bf1c      	itt	ne
   8160a:	4610      	movne	r0, r2
   8160c:	4619      	movne	r1, r3
   8160e:	d10a      	bne.n	81626 <__aeabi_dmul+0x24a>
   81610:	ea81 0103 	eor.w	r1, r1, r3
   81614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81618:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8161c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81620:	f04f 0000 	mov.w	r0, #0
   81624:	bd70      	pop	{r4, r5, r6, pc}
   81626:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8162a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8162e:	bd70      	pop	{r4, r5, r6, pc}

00081630 <__aeabi_ddiv>:
   81630:	b570      	push	{r4, r5, r6, lr}
   81632:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8163a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8163e:	bf1d      	ittte	ne
   81640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81644:	ea94 0f0c 	teqne	r4, ip
   81648:	ea95 0f0c 	teqne	r5, ip
   8164c:	f000 f8a7 	bleq	8179e <__aeabi_ddiv+0x16e>
   81650:	eba4 0405 	sub.w	r4, r4, r5
   81654:	ea81 0e03 	eor.w	lr, r1, r3
   81658:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8165c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81660:	f000 8088 	beq.w	81774 <__aeabi_ddiv+0x144>
   81664:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81668:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8166c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81670:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81674:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81678:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8167c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81680:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81684:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81688:	429d      	cmp	r5, r3
   8168a:	bf08      	it	eq
   8168c:	4296      	cmpeq	r6, r2
   8168e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81692:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81696:	d202      	bcs.n	8169e <__aeabi_ddiv+0x6e>
   81698:	085b      	lsrs	r3, r3, #1
   8169a:	ea4f 0232 	mov.w	r2, r2, rrx
   8169e:	1ab6      	subs	r6, r6, r2
   816a0:	eb65 0503 	sbc.w	r5, r5, r3
   816a4:	085b      	lsrs	r3, r3, #1
   816a6:	ea4f 0232 	mov.w	r2, r2, rrx
   816aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   816ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   816b2:	ebb6 0e02 	subs.w	lr, r6, r2
   816b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   816ba:	bf22      	ittt	cs
   816bc:	1ab6      	subcs	r6, r6, r2
   816be:	4675      	movcs	r5, lr
   816c0:	ea40 000c 	orrcs.w	r0, r0, ip
   816c4:	085b      	lsrs	r3, r3, #1
   816c6:	ea4f 0232 	mov.w	r2, r2, rrx
   816ca:	ebb6 0e02 	subs.w	lr, r6, r2
   816ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   816d2:	bf22      	ittt	cs
   816d4:	1ab6      	subcs	r6, r6, r2
   816d6:	4675      	movcs	r5, lr
   816d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   816dc:	085b      	lsrs	r3, r3, #1
   816de:	ea4f 0232 	mov.w	r2, r2, rrx
   816e2:	ebb6 0e02 	subs.w	lr, r6, r2
   816e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   816ea:	bf22      	ittt	cs
   816ec:	1ab6      	subcs	r6, r6, r2
   816ee:	4675      	movcs	r5, lr
   816f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   816f4:	085b      	lsrs	r3, r3, #1
   816f6:	ea4f 0232 	mov.w	r2, r2, rrx
   816fa:	ebb6 0e02 	subs.w	lr, r6, r2
   816fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   81702:	bf22      	ittt	cs
   81704:	1ab6      	subcs	r6, r6, r2
   81706:	4675      	movcs	r5, lr
   81708:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8170c:	ea55 0e06 	orrs.w	lr, r5, r6
   81710:	d018      	beq.n	81744 <__aeabi_ddiv+0x114>
   81712:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81716:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8171a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8171e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81722:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81726:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8172a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8172e:	d1c0      	bne.n	816b2 <__aeabi_ddiv+0x82>
   81730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81734:	d10b      	bne.n	8174e <__aeabi_ddiv+0x11e>
   81736:	ea41 0100 	orr.w	r1, r1, r0
   8173a:	f04f 0000 	mov.w	r0, #0
   8173e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81742:	e7b6      	b.n	816b2 <__aeabi_ddiv+0x82>
   81744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81748:	bf04      	itt	eq
   8174a:	4301      	orreq	r1, r0
   8174c:	2000      	moveq	r0, #0
   8174e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81752:	bf88      	it	hi
   81754:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81758:	f63f aeaf 	bhi.w	814ba <__aeabi_dmul+0xde>
   8175c:	ebb5 0c03 	subs.w	ip, r5, r3
   81760:	bf04      	itt	eq
   81762:	ebb6 0c02 	subseq.w	ip, r6, r2
   81766:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8176a:	f150 0000 	adcs.w	r0, r0, #0
   8176e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81772:	bd70      	pop	{r4, r5, r6, pc}
   81774:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81778:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8177c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81780:	bfc2      	ittt	gt
   81782:	ebd4 050c 	rsbsgt	r5, r4, ip
   81786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8178a:	bd70      	popgt	{r4, r5, r6, pc}
   8178c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81790:	f04f 0e00 	mov.w	lr, #0
   81794:	3c01      	subs	r4, #1
   81796:	e690      	b.n	814ba <__aeabi_dmul+0xde>
   81798:	ea45 0e06 	orr.w	lr, r5, r6
   8179c:	e68d      	b.n	814ba <__aeabi_dmul+0xde>
   8179e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   817a2:	ea94 0f0c 	teq	r4, ip
   817a6:	bf08      	it	eq
   817a8:	ea95 0f0c 	teqeq	r5, ip
   817ac:	f43f af3b 	beq.w	81626 <__aeabi_dmul+0x24a>
   817b0:	ea94 0f0c 	teq	r4, ip
   817b4:	d10a      	bne.n	817cc <__aeabi_ddiv+0x19c>
   817b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   817ba:	f47f af34 	bne.w	81626 <__aeabi_dmul+0x24a>
   817be:	ea95 0f0c 	teq	r5, ip
   817c2:	f47f af25 	bne.w	81610 <__aeabi_dmul+0x234>
   817c6:	4610      	mov	r0, r2
   817c8:	4619      	mov	r1, r3
   817ca:	e72c      	b.n	81626 <__aeabi_dmul+0x24a>
   817cc:	ea95 0f0c 	teq	r5, ip
   817d0:	d106      	bne.n	817e0 <__aeabi_ddiv+0x1b0>
   817d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   817d6:	f43f aefd 	beq.w	815d4 <__aeabi_dmul+0x1f8>
   817da:	4610      	mov	r0, r2
   817dc:	4619      	mov	r1, r3
   817de:	e722      	b.n	81626 <__aeabi_dmul+0x24a>
   817e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   817e4:	bf18      	it	ne
   817e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   817ea:	f47f aec5 	bne.w	81578 <__aeabi_dmul+0x19c>
   817ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   817f2:	f47f af0d 	bne.w	81610 <__aeabi_dmul+0x234>
   817f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   817fa:	f47f aeeb 	bne.w	815d4 <__aeabi_dmul+0x1f8>
   817fe:	e712      	b.n	81626 <__aeabi_dmul+0x24a>

00081800 <__aeabi_d2uiz>:
   81800:	004a      	lsls	r2, r1, #1
   81802:	d211      	bcs.n	81828 <__aeabi_d2uiz+0x28>
   81804:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81808:	d211      	bcs.n	8182e <__aeabi_d2uiz+0x2e>
   8180a:	d50d      	bpl.n	81828 <__aeabi_d2uiz+0x28>
   8180c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81810:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81814:	d40e      	bmi.n	81834 <__aeabi_d2uiz+0x34>
   81816:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8181a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8181e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81822:	fa23 f002 	lsr.w	r0, r3, r2
   81826:	4770      	bx	lr
   81828:	f04f 0000 	mov.w	r0, #0
   8182c:	4770      	bx	lr
   8182e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81832:	d102      	bne.n	8183a <__aeabi_d2uiz+0x3a>
   81834:	f04f 30ff 	mov.w	r0, #4294967295
   81838:	4770      	bx	lr
   8183a:	f04f 0000 	mov.w	r0, #0
   8183e:	4770      	bx	lr

00081840 <__aeabi_frsub>:
   81840:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81844:	e002      	b.n	8184c <__addsf3>
   81846:	bf00      	nop

00081848 <__aeabi_fsub>:
   81848:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0008184c <__addsf3>:
   8184c:	0042      	lsls	r2, r0, #1
   8184e:	bf1f      	itttt	ne
   81850:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81854:	ea92 0f03 	teqne	r2, r3
   81858:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   8185c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81860:	d06a      	beq.n	81938 <__addsf3+0xec>
   81862:	ea4f 6212 	mov.w	r2, r2, lsr #24
   81866:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8186a:	bfc1      	itttt	gt
   8186c:	18d2      	addgt	r2, r2, r3
   8186e:	4041      	eorgt	r1, r0
   81870:	4048      	eorgt	r0, r1
   81872:	4041      	eorgt	r1, r0
   81874:	bfb8      	it	lt
   81876:	425b      	neglt	r3, r3
   81878:	2b19      	cmp	r3, #25
   8187a:	bf88      	it	hi
   8187c:	4770      	bxhi	lr
   8187e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81882:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81886:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8188a:	bf18      	it	ne
   8188c:	4240      	negne	r0, r0
   8188e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81892:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81896:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8189a:	bf18      	it	ne
   8189c:	4249      	negne	r1, r1
   8189e:	ea92 0f03 	teq	r2, r3
   818a2:	d03f      	beq.n	81924 <__addsf3+0xd8>
   818a4:	f1a2 0201 	sub.w	r2, r2, #1
   818a8:	fa41 fc03 	asr.w	ip, r1, r3
   818ac:	eb10 000c 	adds.w	r0, r0, ip
   818b0:	f1c3 0320 	rsb	r3, r3, #32
   818b4:	fa01 f103 	lsl.w	r1, r1, r3
   818b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   818bc:	d502      	bpl.n	818c4 <__addsf3+0x78>
   818be:	4249      	negs	r1, r1
   818c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   818c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   818c8:	d313      	bcc.n	818f2 <__addsf3+0xa6>
   818ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   818ce:	d306      	bcc.n	818de <__addsf3+0x92>
   818d0:	0840      	lsrs	r0, r0, #1
   818d2:	ea4f 0131 	mov.w	r1, r1, rrx
   818d6:	f102 0201 	add.w	r2, r2, #1
   818da:	2afe      	cmp	r2, #254	; 0xfe
   818dc:	d251      	bcs.n	81982 <__addsf3+0x136>
   818de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   818e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   818e6:	bf08      	it	eq
   818e8:	f020 0001 	biceq.w	r0, r0, #1
   818ec:	ea40 0003 	orr.w	r0, r0, r3
   818f0:	4770      	bx	lr
   818f2:	0049      	lsls	r1, r1, #1
   818f4:	eb40 0000 	adc.w	r0, r0, r0
   818f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   818fc:	f1a2 0201 	sub.w	r2, r2, #1
   81900:	d1ed      	bne.n	818de <__addsf3+0x92>
   81902:	fab0 fc80 	clz	ip, r0
   81906:	f1ac 0c08 	sub.w	ip, ip, #8
   8190a:	ebb2 020c 	subs.w	r2, r2, ip
   8190e:	fa00 f00c 	lsl.w	r0, r0, ip
   81912:	bfaa      	itet	ge
   81914:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81918:	4252      	neglt	r2, r2
   8191a:	4318      	orrge	r0, r3
   8191c:	bfbc      	itt	lt
   8191e:	40d0      	lsrlt	r0, r2
   81920:	4318      	orrlt	r0, r3
   81922:	4770      	bx	lr
   81924:	f092 0f00 	teq	r2, #0
   81928:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   8192c:	bf06      	itte	eq
   8192e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81932:	3201      	addeq	r2, #1
   81934:	3b01      	subne	r3, #1
   81936:	e7b5      	b.n	818a4 <__addsf3+0x58>
   81938:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8193c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81940:	bf18      	it	ne
   81942:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81946:	d021      	beq.n	8198c <__addsf3+0x140>
   81948:	ea92 0f03 	teq	r2, r3
   8194c:	d004      	beq.n	81958 <__addsf3+0x10c>
   8194e:	f092 0f00 	teq	r2, #0
   81952:	bf08      	it	eq
   81954:	4608      	moveq	r0, r1
   81956:	4770      	bx	lr
   81958:	ea90 0f01 	teq	r0, r1
   8195c:	bf1c      	itt	ne
   8195e:	2000      	movne	r0, #0
   81960:	4770      	bxne	lr
   81962:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81966:	d104      	bne.n	81972 <__addsf3+0x126>
   81968:	0040      	lsls	r0, r0, #1
   8196a:	bf28      	it	cs
   8196c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81970:	4770      	bx	lr
   81972:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81976:	bf3c      	itt	cc
   81978:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   8197c:	4770      	bxcc	lr
   8197e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81982:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8198a:	4770      	bx	lr
   8198c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   81990:	bf16      	itet	ne
   81992:	4608      	movne	r0, r1
   81994:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81998:	4601      	movne	r1, r0
   8199a:	0242      	lsls	r2, r0, #9
   8199c:	bf06      	itte	eq
   8199e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   819a2:	ea90 0f01 	teqeq	r0, r1
   819a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   819aa:	4770      	bx	lr

000819ac <__aeabi_ui2f>:
   819ac:	f04f 0300 	mov.w	r3, #0
   819b0:	e004      	b.n	819bc <__aeabi_i2f+0x8>
   819b2:	bf00      	nop

000819b4 <__aeabi_i2f>:
   819b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   819b8:	bf48      	it	mi
   819ba:	4240      	negmi	r0, r0
   819bc:	ea5f 0c00 	movs.w	ip, r0
   819c0:	bf08      	it	eq
   819c2:	4770      	bxeq	lr
   819c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   819c8:	4601      	mov	r1, r0
   819ca:	f04f 0000 	mov.w	r0, #0
   819ce:	e01c      	b.n	81a0a <__aeabi_l2f+0x2a>

000819d0 <__aeabi_ul2f>:
   819d0:	ea50 0201 	orrs.w	r2, r0, r1
   819d4:	bf08      	it	eq
   819d6:	4770      	bxeq	lr
   819d8:	f04f 0300 	mov.w	r3, #0
   819dc:	e00a      	b.n	819f4 <__aeabi_l2f+0x14>
   819de:	bf00      	nop

000819e0 <__aeabi_l2f>:
   819e0:	ea50 0201 	orrs.w	r2, r0, r1
   819e4:	bf08      	it	eq
   819e6:	4770      	bxeq	lr
   819e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   819ec:	d502      	bpl.n	819f4 <__aeabi_l2f+0x14>
   819ee:	4240      	negs	r0, r0
   819f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   819f4:	ea5f 0c01 	movs.w	ip, r1
   819f8:	bf02      	ittt	eq
   819fa:	4684      	moveq	ip, r0
   819fc:	4601      	moveq	r1, r0
   819fe:	2000      	moveq	r0, #0
   81a00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81a04:	bf08      	it	eq
   81a06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81a0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81a0e:	fabc f28c 	clz	r2, ip
   81a12:	3a08      	subs	r2, #8
   81a14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81a18:	db10      	blt.n	81a3c <__aeabi_l2f+0x5c>
   81a1a:	fa01 fc02 	lsl.w	ip, r1, r2
   81a1e:	4463      	add	r3, ip
   81a20:	fa00 fc02 	lsl.w	ip, r0, r2
   81a24:	f1c2 0220 	rsb	r2, r2, #32
   81a28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81a2c:	fa20 f202 	lsr.w	r2, r0, r2
   81a30:	eb43 0002 	adc.w	r0, r3, r2
   81a34:	bf08      	it	eq
   81a36:	f020 0001 	biceq.w	r0, r0, #1
   81a3a:	4770      	bx	lr
   81a3c:	f102 0220 	add.w	r2, r2, #32
   81a40:	fa01 fc02 	lsl.w	ip, r1, r2
   81a44:	f1c2 0220 	rsb	r2, r2, #32
   81a48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81a4c:	fa21 f202 	lsr.w	r2, r1, r2
   81a50:	eb43 0002 	adc.w	r0, r3, r2
   81a54:	bf08      	it	eq
   81a56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81a5a:	4770      	bx	lr

00081a5c <__aeabi_fmul>:
   81a5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81a60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81a64:	bf1e      	ittt	ne
   81a66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81a6a:	ea92 0f0c 	teqne	r2, ip
   81a6e:	ea93 0f0c 	teqne	r3, ip
   81a72:	d06f      	beq.n	81b54 <__aeabi_fmul+0xf8>
   81a74:	441a      	add	r2, r3
   81a76:	ea80 0c01 	eor.w	ip, r0, r1
   81a7a:	0240      	lsls	r0, r0, #9
   81a7c:	bf18      	it	ne
   81a7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   81a82:	d01e      	beq.n	81ac2 <__aeabi_fmul+0x66>
   81a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81a88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81a8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81a90:	fba0 3101 	umull	r3, r1, r0, r1
   81a94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81a98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81a9c:	bf3e      	ittt	cc
   81a9e:	0049      	lslcc	r1, r1, #1
   81aa0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81aa4:	005b      	lslcc	r3, r3, #1
   81aa6:	ea40 0001 	orr.w	r0, r0, r1
   81aaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   81aae:	2afd      	cmp	r2, #253	; 0xfd
   81ab0:	d81d      	bhi.n	81aee <__aeabi_fmul+0x92>
   81ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81aba:	bf08      	it	eq
   81abc:	f020 0001 	biceq.w	r0, r0, #1
   81ac0:	4770      	bx	lr
   81ac2:	f090 0f00 	teq	r0, #0
   81ac6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81aca:	bf08      	it	eq
   81acc:	0249      	lsleq	r1, r1, #9
   81ace:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81ad2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81ad6:	3a7f      	subs	r2, #127	; 0x7f
   81ad8:	bfc2      	ittt	gt
   81ada:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81ade:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81ae2:	4770      	bxgt	lr
   81ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81ae8:	f04f 0300 	mov.w	r3, #0
   81aec:	3a01      	subs	r2, #1
   81aee:	dc5d      	bgt.n	81bac <__aeabi_fmul+0x150>
   81af0:	f112 0f19 	cmn.w	r2, #25
   81af4:	bfdc      	itt	le
   81af6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81afa:	4770      	bxle	lr
   81afc:	f1c2 0200 	rsb	r2, r2, #0
   81b00:	0041      	lsls	r1, r0, #1
   81b02:	fa21 f102 	lsr.w	r1, r1, r2
   81b06:	f1c2 0220 	rsb	r2, r2, #32
   81b0a:	fa00 fc02 	lsl.w	ip, r0, r2
   81b0e:	ea5f 0031 	movs.w	r0, r1, rrx
   81b12:	f140 0000 	adc.w	r0, r0, #0
   81b16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81b1a:	bf08      	it	eq
   81b1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81b20:	4770      	bx	lr
   81b22:	f092 0f00 	teq	r2, #0
   81b26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81b2a:	bf02      	ittt	eq
   81b2c:	0040      	lsleq	r0, r0, #1
   81b2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81b32:	3a01      	subeq	r2, #1
   81b34:	d0f9      	beq.n	81b2a <__aeabi_fmul+0xce>
   81b36:	ea40 000c 	orr.w	r0, r0, ip
   81b3a:	f093 0f00 	teq	r3, #0
   81b3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81b42:	bf02      	ittt	eq
   81b44:	0049      	lsleq	r1, r1, #1
   81b46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81b4a:	3b01      	subeq	r3, #1
   81b4c:	d0f9      	beq.n	81b42 <__aeabi_fmul+0xe6>
   81b4e:	ea41 010c 	orr.w	r1, r1, ip
   81b52:	e78f      	b.n	81a74 <__aeabi_fmul+0x18>
   81b54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81b58:	ea92 0f0c 	teq	r2, ip
   81b5c:	bf18      	it	ne
   81b5e:	ea93 0f0c 	teqne	r3, ip
   81b62:	d00a      	beq.n	81b7a <__aeabi_fmul+0x11e>
   81b64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81b68:	bf18      	it	ne
   81b6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81b6e:	d1d8      	bne.n	81b22 <__aeabi_fmul+0xc6>
   81b70:	ea80 0001 	eor.w	r0, r0, r1
   81b74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81b78:	4770      	bx	lr
   81b7a:	f090 0f00 	teq	r0, #0
   81b7e:	bf17      	itett	ne
   81b80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81b84:	4608      	moveq	r0, r1
   81b86:	f091 0f00 	teqne	r1, #0
   81b8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81b8e:	d014      	beq.n	81bba <__aeabi_fmul+0x15e>
   81b90:	ea92 0f0c 	teq	r2, ip
   81b94:	d101      	bne.n	81b9a <__aeabi_fmul+0x13e>
   81b96:	0242      	lsls	r2, r0, #9
   81b98:	d10f      	bne.n	81bba <__aeabi_fmul+0x15e>
   81b9a:	ea93 0f0c 	teq	r3, ip
   81b9e:	d103      	bne.n	81ba8 <__aeabi_fmul+0x14c>
   81ba0:	024b      	lsls	r3, r1, #9
   81ba2:	bf18      	it	ne
   81ba4:	4608      	movne	r0, r1
   81ba6:	d108      	bne.n	81bba <__aeabi_fmul+0x15e>
   81ba8:	ea80 0001 	eor.w	r0, r0, r1
   81bac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81bb8:	4770      	bx	lr
   81bba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81bbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81bc2:	4770      	bx	lr

00081bc4 <__aeabi_fdiv>:
   81bc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81bc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81bcc:	bf1e      	ittt	ne
   81bce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81bd2:	ea92 0f0c 	teqne	r2, ip
   81bd6:	ea93 0f0c 	teqne	r3, ip
   81bda:	d069      	beq.n	81cb0 <__aeabi_fdiv+0xec>
   81bdc:	eba2 0203 	sub.w	r2, r2, r3
   81be0:	ea80 0c01 	eor.w	ip, r0, r1
   81be4:	0249      	lsls	r1, r1, #9
   81be6:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81bea:	d037      	beq.n	81c5c <__aeabi_fdiv+0x98>
   81bec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81bf0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81bf4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81bf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81bfc:	428b      	cmp	r3, r1
   81bfe:	bf38      	it	cc
   81c00:	005b      	lslcc	r3, r3, #1
   81c02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81c06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81c0a:	428b      	cmp	r3, r1
   81c0c:	bf24      	itt	cs
   81c0e:	1a5b      	subcs	r3, r3, r1
   81c10:	ea40 000c 	orrcs.w	r0, r0, ip
   81c14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81c18:	bf24      	itt	cs
   81c1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81c1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81c22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81c26:	bf24      	itt	cs
   81c28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81c2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81c30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81c34:	bf24      	itt	cs
   81c36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81c3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81c3e:	011b      	lsls	r3, r3, #4
   81c40:	bf18      	it	ne
   81c42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81c46:	d1e0      	bne.n	81c0a <__aeabi_fdiv+0x46>
   81c48:	2afd      	cmp	r2, #253	; 0xfd
   81c4a:	f63f af50 	bhi.w	81aee <__aeabi_fmul+0x92>
   81c4e:	428b      	cmp	r3, r1
   81c50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81c54:	bf08      	it	eq
   81c56:	f020 0001 	biceq.w	r0, r0, #1
   81c5a:	4770      	bx	lr
   81c5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81c60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81c64:	327f      	adds	r2, #127	; 0x7f
   81c66:	bfc2      	ittt	gt
   81c68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81c6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81c70:	4770      	bxgt	lr
   81c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81c76:	f04f 0300 	mov.w	r3, #0
   81c7a:	3a01      	subs	r2, #1
   81c7c:	e737      	b.n	81aee <__aeabi_fmul+0x92>
   81c7e:	f092 0f00 	teq	r2, #0
   81c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81c86:	bf02      	ittt	eq
   81c88:	0040      	lsleq	r0, r0, #1
   81c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81c8e:	3a01      	subeq	r2, #1
   81c90:	d0f9      	beq.n	81c86 <__aeabi_fdiv+0xc2>
   81c92:	ea40 000c 	orr.w	r0, r0, ip
   81c96:	f093 0f00 	teq	r3, #0
   81c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81c9e:	bf02      	ittt	eq
   81ca0:	0049      	lsleq	r1, r1, #1
   81ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81ca6:	3b01      	subeq	r3, #1
   81ca8:	d0f9      	beq.n	81c9e <__aeabi_fdiv+0xda>
   81caa:	ea41 010c 	orr.w	r1, r1, ip
   81cae:	e795      	b.n	81bdc <__aeabi_fdiv+0x18>
   81cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81cb4:	ea92 0f0c 	teq	r2, ip
   81cb8:	d108      	bne.n	81ccc <__aeabi_fdiv+0x108>
   81cba:	0242      	lsls	r2, r0, #9
   81cbc:	f47f af7d 	bne.w	81bba <__aeabi_fmul+0x15e>
   81cc0:	ea93 0f0c 	teq	r3, ip
   81cc4:	f47f af70 	bne.w	81ba8 <__aeabi_fmul+0x14c>
   81cc8:	4608      	mov	r0, r1
   81cca:	e776      	b.n	81bba <__aeabi_fmul+0x15e>
   81ccc:	ea93 0f0c 	teq	r3, ip
   81cd0:	d104      	bne.n	81cdc <__aeabi_fdiv+0x118>
   81cd2:	024b      	lsls	r3, r1, #9
   81cd4:	f43f af4c 	beq.w	81b70 <__aeabi_fmul+0x114>
   81cd8:	4608      	mov	r0, r1
   81cda:	e76e      	b.n	81bba <__aeabi_fmul+0x15e>
   81cdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81ce0:	bf18      	it	ne
   81ce2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81ce6:	d1ca      	bne.n	81c7e <__aeabi_fdiv+0xba>
   81ce8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81cec:	f47f af5c 	bne.w	81ba8 <__aeabi_fmul+0x14c>
   81cf0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81cf4:	f47f af3c 	bne.w	81b70 <__aeabi_fmul+0x114>
   81cf8:	e75f      	b.n	81bba <__aeabi_fmul+0x15e>
   81cfa:	bf00      	nop

00081cfc <__gesf2>:
   81cfc:	f04f 3cff 	mov.w	ip, #4294967295
   81d00:	e006      	b.n	81d10 <__cmpsf2+0x4>
   81d02:	bf00      	nop

00081d04 <__lesf2>:
   81d04:	f04f 0c01 	mov.w	ip, #1
   81d08:	e002      	b.n	81d10 <__cmpsf2+0x4>
   81d0a:	bf00      	nop

00081d0c <__cmpsf2>:
   81d0c:	f04f 0c01 	mov.w	ip, #1
   81d10:	f84d cd04 	str.w	ip, [sp, #-4]!
   81d14:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81d18:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81d1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81d20:	bf18      	it	ne
   81d22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81d26:	d011      	beq.n	81d4c <__cmpsf2+0x40>
   81d28:	b001      	add	sp, #4
   81d2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81d2e:	bf18      	it	ne
   81d30:	ea90 0f01 	teqne	r0, r1
   81d34:	bf58      	it	pl
   81d36:	ebb2 0003 	subspl.w	r0, r2, r3
   81d3a:	bf88      	it	hi
   81d3c:	17c8      	asrhi	r0, r1, #31
   81d3e:	bf38      	it	cc
   81d40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81d44:	bf18      	it	ne
   81d46:	f040 0001 	orrne.w	r0, r0, #1
   81d4a:	4770      	bx	lr
   81d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81d50:	d102      	bne.n	81d58 <__cmpsf2+0x4c>
   81d52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81d56:	d105      	bne.n	81d64 <__cmpsf2+0x58>
   81d58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81d5c:	d1e4      	bne.n	81d28 <__cmpsf2+0x1c>
   81d5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81d62:	d0e1      	beq.n	81d28 <__cmpsf2+0x1c>
   81d64:	f85d 0b04 	ldr.w	r0, [sp], #4
   81d68:	4770      	bx	lr
   81d6a:	bf00      	nop

00081d6c <__aeabi_cfrcmple>:
   81d6c:	4684      	mov	ip, r0
   81d6e:	4608      	mov	r0, r1
   81d70:	4661      	mov	r1, ip
   81d72:	e7ff      	b.n	81d74 <__aeabi_cfcmpeq>

00081d74 <__aeabi_cfcmpeq>:
   81d74:	b50f      	push	{r0, r1, r2, r3, lr}
   81d76:	f7ff ffc9 	bl	81d0c <__cmpsf2>
   81d7a:	2800      	cmp	r0, #0
   81d7c:	bf48      	it	mi
   81d7e:	f110 0f00 	cmnmi.w	r0, #0
   81d82:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081d84 <__aeabi_fcmpeq>:
   81d84:	f84d ed08 	str.w	lr, [sp, #-8]!
   81d88:	f7ff fff4 	bl	81d74 <__aeabi_cfcmpeq>
   81d8c:	bf0c      	ite	eq
   81d8e:	2001      	moveq	r0, #1
   81d90:	2000      	movne	r0, #0
   81d92:	f85d fb08 	ldr.w	pc, [sp], #8
   81d96:	bf00      	nop

00081d98 <__aeabi_fcmplt>:
   81d98:	f84d ed08 	str.w	lr, [sp, #-8]!
   81d9c:	f7ff ffea 	bl	81d74 <__aeabi_cfcmpeq>
   81da0:	bf34      	ite	cc
   81da2:	2001      	movcc	r0, #1
   81da4:	2000      	movcs	r0, #0
   81da6:	f85d fb08 	ldr.w	pc, [sp], #8
   81daa:	bf00      	nop

00081dac <__aeabi_fcmple>:
   81dac:	f84d ed08 	str.w	lr, [sp, #-8]!
   81db0:	f7ff ffe0 	bl	81d74 <__aeabi_cfcmpeq>
   81db4:	bf94      	ite	ls
   81db6:	2001      	movls	r0, #1
   81db8:	2000      	movhi	r0, #0
   81dba:	f85d fb08 	ldr.w	pc, [sp], #8
   81dbe:	bf00      	nop

00081dc0 <__aeabi_fcmpge>:
   81dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81dc4:	f7ff ffd2 	bl	81d6c <__aeabi_cfrcmple>
   81dc8:	bf94      	ite	ls
   81dca:	2001      	movls	r0, #1
   81dcc:	2000      	movhi	r0, #0
   81dce:	f85d fb08 	ldr.w	pc, [sp], #8
   81dd2:	bf00      	nop

00081dd4 <__aeabi_fcmpgt>:
   81dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81dd8:	f7ff ffc8 	bl	81d6c <__aeabi_cfrcmple>
   81ddc:	bf34      	ite	cc
   81dde:	2001      	movcc	r0, #1
   81de0:	2000      	movcs	r0, #0
   81de2:	f85d fb08 	ldr.w	pc, [sp], #8
   81de6:	bf00      	nop

00081de8 <__aeabi_uldivmod>:
   81de8:	b953      	cbnz	r3, 81e00 <__aeabi_uldivmod+0x18>
   81dea:	b94a      	cbnz	r2, 81e00 <__aeabi_uldivmod+0x18>
   81dec:	2900      	cmp	r1, #0
   81dee:	bf08      	it	eq
   81df0:	2800      	cmpeq	r0, #0
   81df2:	bf1c      	itt	ne
   81df4:	f04f 31ff 	movne.w	r1, #4294967295
   81df8:	f04f 30ff 	movne.w	r0, #4294967295
   81dfc:	f000 b97a 	b.w	820f4 <__aeabi_idiv0>
   81e00:	f1ad 0c08 	sub.w	ip, sp, #8
   81e04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   81e08:	f000 f806 	bl	81e18 <__udivmoddi4>
   81e0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   81e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   81e14:	b004      	add	sp, #16
   81e16:	4770      	bx	lr

00081e18 <__udivmoddi4>:
   81e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e1c:	468c      	mov	ip, r1
   81e1e:	460e      	mov	r6, r1
   81e20:	4604      	mov	r4, r0
   81e22:	9d08      	ldr	r5, [sp, #32]
   81e24:	2b00      	cmp	r3, #0
   81e26:	d150      	bne.n	81eca <__udivmoddi4+0xb2>
   81e28:	428a      	cmp	r2, r1
   81e2a:	4617      	mov	r7, r2
   81e2c:	d96c      	bls.n	81f08 <__udivmoddi4+0xf0>
   81e2e:	fab2 fe82 	clz	lr, r2
   81e32:	f1be 0f00 	cmp.w	lr, #0
   81e36:	d00b      	beq.n	81e50 <__udivmoddi4+0x38>
   81e38:	f1ce 0c20 	rsb	ip, lr, #32
   81e3c:	fa01 f60e 	lsl.w	r6, r1, lr
   81e40:	fa20 fc0c 	lsr.w	ip, r0, ip
   81e44:	fa02 f70e 	lsl.w	r7, r2, lr
   81e48:	ea4c 0c06 	orr.w	ip, ip, r6
   81e4c:	fa00 f40e 	lsl.w	r4, r0, lr
   81e50:	0c3a      	lsrs	r2, r7, #16
   81e52:	fbbc f9f2 	udiv	r9, ip, r2
   81e56:	b2bb      	uxth	r3, r7
   81e58:	fb02 cc19 	mls	ip, r2, r9, ip
   81e5c:	fb09 fa03 	mul.w	sl, r9, r3
   81e60:	ea4f 4814 	mov.w	r8, r4, lsr #16
   81e64:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   81e68:	45b2      	cmp	sl, r6
   81e6a:	d90a      	bls.n	81e82 <__udivmoddi4+0x6a>
   81e6c:	19f6      	adds	r6, r6, r7
   81e6e:	f109 31ff 	add.w	r1, r9, #4294967295
   81e72:	f080 8125 	bcs.w	820c0 <__udivmoddi4+0x2a8>
   81e76:	45b2      	cmp	sl, r6
   81e78:	f240 8122 	bls.w	820c0 <__udivmoddi4+0x2a8>
   81e7c:	f1a9 0902 	sub.w	r9, r9, #2
   81e80:	443e      	add	r6, r7
   81e82:	eba6 060a 	sub.w	r6, r6, sl
   81e86:	fbb6 f0f2 	udiv	r0, r6, r2
   81e8a:	fb02 6610 	mls	r6, r2, r0, r6
   81e8e:	fb00 f303 	mul.w	r3, r0, r3
   81e92:	b2a4      	uxth	r4, r4
   81e94:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   81e98:	42a3      	cmp	r3, r4
   81e9a:	d909      	bls.n	81eb0 <__udivmoddi4+0x98>
   81e9c:	19e4      	adds	r4, r4, r7
   81e9e:	f100 32ff 	add.w	r2, r0, #4294967295
   81ea2:	f080 810b 	bcs.w	820bc <__udivmoddi4+0x2a4>
   81ea6:	42a3      	cmp	r3, r4
   81ea8:	f240 8108 	bls.w	820bc <__udivmoddi4+0x2a4>
   81eac:	3802      	subs	r0, #2
   81eae:	443c      	add	r4, r7
   81eb0:	2100      	movs	r1, #0
   81eb2:	1ae4      	subs	r4, r4, r3
   81eb4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   81eb8:	2d00      	cmp	r5, #0
   81eba:	d062      	beq.n	81f82 <__udivmoddi4+0x16a>
   81ebc:	2300      	movs	r3, #0
   81ebe:	fa24 f40e 	lsr.w	r4, r4, lr
   81ec2:	602c      	str	r4, [r5, #0]
   81ec4:	606b      	str	r3, [r5, #4]
   81ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81eca:	428b      	cmp	r3, r1
   81ecc:	d907      	bls.n	81ede <__udivmoddi4+0xc6>
   81ece:	2d00      	cmp	r5, #0
   81ed0:	d055      	beq.n	81f7e <__udivmoddi4+0x166>
   81ed2:	2100      	movs	r1, #0
   81ed4:	e885 0041 	stmia.w	r5, {r0, r6}
   81ed8:	4608      	mov	r0, r1
   81eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81ede:	fab3 f183 	clz	r1, r3
   81ee2:	2900      	cmp	r1, #0
   81ee4:	f040 808f 	bne.w	82006 <__udivmoddi4+0x1ee>
   81ee8:	42b3      	cmp	r3, r6
   81eea:	d302      	bcc.n	81ef2 <__udivmoddi4+0xda>
   81eec:	4282      	cmp	r2, r0
   81eee:	f200 80fc 	bhi.w	820ea <__udivmoddi4+0x2d2>
   81ef2:	1a84      	subs	r4, r0, r2
   81ef4:	eb66 0603 	sbc.w	r6, r6, r3
   81ef8:	2001      	movs	r0, #1
   81efa:	46b4      	mov	ip, r6
   81efc:	2d00      	cmp	r5, #0
   81efe:	d040      	beq.n	81f82 <__udivmoddi4+0x16a>
   81f00:	e885 1010 	stmia.w	r5, {r4, ip}
   81f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f08:	b912      	cbnz	r2, 81f10 <__udivmoddi4+0xf8>
   81f0a:	2701      	movs	r7, #1
   81f0c:	fbb7 f7f2 	udiv	r7, r7, r2
   81f10:	fab7 fe87 	clz	lr, r7
   81f14:	f1be 0f00 	cmp.w	lr, #0
   81f18:	d135      	bne.n	81f86 <__udivmoddi4+0x16e>
   81f1a:	2101      	movs	r1, #1
   81f1c:	1bf6      	subs	r6, r6, r7
   81f1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   81f22:	fa1f f887 	uxth.w	r8, r7
   81f26:	fbb6 f2fc 	udiv	r2, r6, ip
   81f2a:	fb0c 6612 	mls	r6, ip, r2, r6
   81f2e:	fb08 f002 	mul.w	r0, r8, r2
   81f32:	0c23      	lsrs	r3, r4, #16
   81f34:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   81f38:	42b0      	cmp	r0, r6
   81f3a:	d907      	bls.n	81f4c <__udivmoddi4+0x134>
   81f3c:	19f6      	adds	r6, r6, r7
   81f3e:	f102 33ff 	add.w	r3, r2, #4294967295
   81f42:	d202      	bcs.n	81f4a <__udivmoddi4+0x132>
   81f44:	42b0      	cmp	r0, r6
   81f46:	f200 80d2 	bhi.w	820ee <__udivmoddi4+0x2d6>
   81f4a:	461a      	mov	r2, r3
   81f4c:	1a36      	subs	r6, r6, r0
   81f4e:	fbb6 f0fc 	udiv	r0, r6, ip
   81f52:	fb0c 6610 	mls	r6, ip, r0, r6
   81f56:	fb08 f800 	mul.w	r8, r8, r0
   81f5a:	b2a3      	uxth	r3, r4
   81f5c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   81f60:	45a0      	cmp	r8, r4
   81f62:	d907      	bls.n	81f74 <__udivmoddi4+0x15c>
   81f64:	19e4      	adds	r4, r4, r7
   81f66:	f100 33ff 	add.w	r3, r0, #4294967295
   81f6a:	d202      	bcs.n	81f72 <__udivmoddi4+0x15a>
   81f6c:	45a0      	cmp	r8, r4
   81f6e:	f200 80b9 	bhi.w	820e4 <__udivmoddi4+0x2cc>
   81f72:	4618      	mov	r0, r3
   81f74:	eba4 0408 	sub.w	r4, r4, r8
   81f78:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   81f7c:	e79c      	b.n	81eb8 <__udivmoddi4+0xa0>
   81f7e:	4629      	mov	r1, r5
   81f80:	4628      	mov	r0, r5
   81f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f86:	fa07 f70e 	lsl.w	r7, r7, lr
   81f8a:	f1ce 0320 	rsb	r3, lr, #32
   81f8e:	fa26 f203 	lsr.w	r2, r6, r3
   81f92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   81f96:	fbb2 f1fc 	udiv	r1, r2, ip
   81f9a:	fa1f f887 	uxth.w	r8, r7
   81f9e:	fb0c 2211 	mls	r2, ip, r1, r2
   81fa2:	fa06 f60e 	lsl.w	r6, r6, lr
   81fa6:	fa20 f303 	lsr.w	r3, r0, r3
   81faa:	fb01 f908 	mul.w	r9, r1, r8
   81fae:	4333      	orrs	r3, r6
   81fb0:	0c1e      	lsrs	r6, r3, #16
   81fb2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   81fb6:	45b1      	cmp	r9, r6
   81fb8:	fa00 f40e 	lsl.w	r4, r0, lr
   81fbc:	d909      	bls.n	81fd2 <__udivmoddi4+0x1ba>
   81fbe:	19f6      	adds	r6, r6, r7
   81fc0:	f101 32ff 	add.w	r2, r1, #4294967295
   81fc4:	f080 808c 	bcs.w	820e0 <__udivmoddi4+0x2c8>
   81fc8:	45b1      	cmp	r9, r6
   81fca:	f240 8089 	bls.w	820e0 <__udivmoddi4+0x2c8>
   81fce:	3902      	subs	r1, #2
   81fd0:	443e      	add	r6, r7
   81fd2:	eba6 0609 	sub.w	r6, r6, r9
   81fd6:	fbb6 f0fc 	udiv	r0, r6, ip
   81fda:	fb0c 6210 	mls	r2, ip, r0, r6
   81fde:	fb00 f908 	mul.w	r9, r0, r8
   81fe2:	b29e      	uxth	r6, r3
   81fe4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   81fe8:	45b1      	cmp	r9, r6
   81fea:	d907      	bls.n	81ffc <__udivmoddi4+0x1e4>
   81fec:	19f6      	adds	r6, r6, r7
   81fee:	f100 33ff 	add.w	r3, r0, #4294967295
   81ff2:	d271      	bcs.n	820d8 <__udivmoddi4+0x2c0>
   81ff4:	45b1      	cmp	r9, r6
   81ff6:	d96f      	bls.n	820d8 <__udivmoddi4+0x2c0>
   81ff8:	3802      	subs	r0, #2
   81ffa:	443e      	add	r6, r7
   81ffc:	eba6 0609 	sub.w	r6, r6, r9
   82000:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   82004:	e78f      	b.n	81f26 <__udivmoddi4+0x10e>
   82006:	f1c1 0720 	rsb	r7, r1, #32
   8200a:	fa22 f807 	lsr.w	r8, r2, r7
   8200e:	408b      	lsls	r3, r1
   82010:	ea48 0303 	orr.w	r3, r8, r3
   82014:	fa26 f407 	lsr.w	r4, r6, r7
   82018:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   8201c:	fbb4 f9fe 	udiv	r9, r4, lr
   82020:	fa1f fc83 	uxth.w	ip, r3
   82024:	fb0e 4419 	mls	r4, lr, r9, r4
   82028:	408e      	lsls	r6, r1
   8202a:	fa20 f807 	lsr.w	r8, r0, r7
   8202e:	fb09 fa0c 	mul.w	sl, r9, ip
   82032:	ea48 0806 	orr.w	r8, r8, r6
   82036:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8203a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8203e:	45a2      	cmp	sl, r4
   82040:	fa02 f201 	lsl.w	r2, r2, r1
   82044:	fa00 f601 	lsl.w	r6, r0, r1
   82048:	d908      	bls.n	8205c <__udivmoddi4+0x244>
   8204a:	18e4      	adds	r4, r4, r3
   8204c:	f109 30ff 	add.w	r0, r9, #4294967295
   82050:	d244      	bcs.n	820dc <__udivmoddi4+0x2c4>
   82052:	45a2      	cmp	sl, r4
   82054:	d942      	bls.n	820dc <__udivmoddi4+0x2c4>
   82056:	f1a9 0902 	sub.w	r9, r9, #2
   8205a:	441c      	add	r4, r3
   8205c:	eba4 040a 	sub.w	r4, r4, sl
   82060:	fbb4 f0fe 	udiv	r0, r4, lr
   82064:	fb0e 4410 	mls	r4, lr, r0, r4
   82068:	fb00 fc0c 	mul.w	ip, r0, ip
   8206c:	fa1f f888 	uxth.w	r8, r8
   82070:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   82074:	45a4      	cmp	ip, r4
   82076:	d907      	bls.n	82088 <__udivmoddi4+0x270>
   82078:	18e4      	adds	r4, r4, r3
   8207a:	f100 3eff 	add.w	lr, r0, #4294967295
   8207e:	d229      	bcs.n	820d4 <__udivmoddi4+0x2bc>
   82080:	45a4      	cmp	ip, r4
   82082:	d927      	bls.n	820d4 <__udivmoddi4+0x2bc>
   82084:	3802      	subs	r0, #2
   82086:	441c      	add	r4, r3
   82088:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8208c:	fba0 8902 	umull	r8, r9, r0, r2
   82090:	eba4 0c0c 	sub.w	ip, r4, ip
   82094:	45cc      	cmp	ip, r9
   82096:	46c2      	mov	sl, r8
   82098:	46ce      	mov	lr, r9
   8209a:	d315      	bcc.n	820c8 <__udivmoddi4+0x2b0>
   8209c:	d012      	beq.n	820c4 <__udivmoddi4+0x2ac>
   8209e:	b155      	cbz	r5, 820b6 <__udivmoddi4+0x29e>
   820a0:	ebb6 030a 	subs.w	r3, r6, sl
   820a4:	eb6c 060e 	sbc.w	r6, ip, lr
   820a8:	fa06 f707 	lsl.w	r7, r6, r7
   820ac:	40cb      	lsrs	r3, r1
   820ae:	431f      	orrs	r7, r3
   820b0:	40ce      	lsrs	r6, r1
   820b2:	602f      	str	r7, [r5, #0]
   820b4:	606e      	str	r6, [r5, #4]
   820b6:	2100      	movs	r1, #0
   820b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   820bc:	4610      	mov	r0, r2
   820be:	e6f7      	b.n	81eb0 <__udivmoddi4+0x98>
   820c0:	4689      	mov	r9, r1
   820c2:	e6de      	b.n	81e82 <__udivmoddi4+0x6a>
   820c4:	4546      	cmp	r6, r8
   820c6:	d2ea      	bcs.n	8209e <__udivmoddi4+0x286>
   820c8:	ebb8 0a02 	subs.w	sl, r8, r2
   820cc:	eb69 0e03 	sbc.w	lr, r9, r3
   820d0:	3801      	subs	r0, #1
   820d2:	e7e4      	b.n	8209e <__udivmoddi4+0x286>
   820d4:	4670      	mov	r0, lr
   820d6:	e7d7      	b.n	82088 <__udivmoddi4+0x270>
   820d8:	4618      	mov	r0, r3
   820da:	e78f      	b.n	81ffc <__udivmoddi4+0x1e4>
   820dc:	4681      	mov	r9, r0
   820de:	e7bd      	b.n	8205c <__udivmoddi4+0x244>
   820e0:	4611      	mov	r1, r2
   820e2:	e776      	b.n	81fd2 <__udivmoddi4+0x1ba>
   820e4:	3802      	subs	r0, #2
   820e6:	443c      	add	r4, r7
   820e8:	e744      	b.n	81f74 <__udivmoddi4+0x15c>
   820ea:	4608      	mov	r0, r1
   820ec:	e706      	b.n	81efc <__udivmoddi4+0xe4>
   820ee:	3a02      	subs	r2, #2
   820f0:	443e      	add	r6, r7
   820f2:	e72b      	b.n	81f4c <__udivmoddi4+0x134>

000820f4 <__aeabi_idiv0>:
   820f4:	4770      	bx	lr
   820f6:	bf00      	nop

000820f8 <__libc_init_array>:
   820f8:	b570      	push	{r4, r5, r6, lr}
   820fa:	4e0f      	ldr	r6, [pc, #60]	; (82138 <__libc_init_array+0x40>)
   820fc:	4d0f      	ldr	r5, [pc, #60]	; (8213c <__libc_init_array+0x44>)
   820fe:	1b76      	subs	r6, r6, r5
   82100:	10b6      	asrs	r6, r6, #2
   82102:	bf18      	it	ne
   82104:	2400      	movne	r4, #0
   82106:	d005      	beq.n	82114 <__libc_init_array+0x1c>
   82108:	3401      	adds	r4, #1
   8210a:	f855 3b04 	ldr.w	r3, [r5], #4
   8210e:	4798      	blx	r3
   82110:	42a6      	cmp	r6, r4
   82112:	d1f9      	bne.n	82108 <__libc_init_array+0x10>
   82114:	4e0a      	ldr	r6, [pc, #40]	; (82140 <__libc_init_array+0x48>)
   82116:	4d0b      	ldr	r5, [pc, #44]	; (82144 <__libc_init_array+0x4c>)
   82118:	f002 fe7e 	bl	84e18 <_init>
   8211c:	1b76      	subs	r6, r6, r5
   8211e:	10b6      	asrs	r6, r6, #2
   82120:	bf18      	it	ne
   82122:	2400      	movne	r4, #0
   82124:	d006      	beq.n	82134 <__libc_init_array+0x3c>
   82126:	3401      	adds	r4, #1
   82128:	f855 3b04 	ldr.w	r3, [r5], #4
   8212c:	4798      	blx	r3
   8212e:	42a6      	cmp	r6, r4
   82130:	d1f9      	bne.n	82126 <__libc_init_array+0x2e>
   82132:	bd70      	pop	{r4, r5, r6, pc}
   82134:	bd70      	pop	{r4, r5, r6, pc}
   82136:	bf00      	nop
   82138:	00084e24 	.word	0x00084e24
   8213c:	00084e24 	.word	0x00084e24
   82140:	00084e2c 	.word	0x00084e2c
   82144:	00084e24 	.word	0x00084e24

00082148 <iprintf>:
   82148:	b40f      	push	{r0, r1, r2, r3}
   8214a:	b510      	push	{r4, lr}
   8214c:	4b07      	ldr	r3, [pc, #28]	; (8216c <iprintf+0x24>)
   8214e:	b082      	sub	sp, #8
   82150:	ac04      	add	r4, sp, #16
   82152:	f854 2b04 	ldr.w	r2, [r4], #4
   82156:	6818      	ldr	r0, [r3, #0]
   82158:	4623      	mov	r3, r4
   8215a:	6881      	ldr	r1, [r0, #8]
   8215c:	9401      	str	r4, [sp, #4]
   8215e:	f000 f965 	bl	8242c <_vfiprintf_r>
   82162:	b002      	add	sp, #8
   82164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82168:	b004      	add	sp, #16
   8216a:	4770      	bx	lr
   8216c:	20070140 	.word	0x20070140

00082170 <memset>:
   82170:	b470      	push	{r4, r5, r6}
   82172:	0786      	lsls	r6, r0, #30
   82174:	d046      	beq.n	82204 <memset+0x94>
   82176:	1e54      	subs	r4, r2, #1
   82178:	2a00      	cmp	r2, #0
   8217a:	d041      	beq.n	82200 <memset+0x90>
   8217c:	b2ca      	uxtb	r2, r1
   8217e:	4603      	mov	r3, r0
   82180:	e002      	b.n	82188 <memset+0x18>
   82182:	f114 34ff 	adds.w	r4, r4, #4294967295
   82186:	d33b      	bcc.n	82200 <memset+0x90>
   82188:	f803 2b01 	strb.w	r2, [r3], #1
   8218c:	079d      	lsls	r5, r3, #30
   8218e:	d1f8      	bne.n	82182 <memset+0x12>
   82190:	2c03      	cmp	r4, #3
   82192:	d92e      	bls.n	821f2 <memset+0x82>
   82194:	b2cd      	uxtb	r5, r1
   82196:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8219a:	2c0f      	cmp	r4, #15
   8219c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   821a0:	d919      	bls.n	821d6 <memset+0x66>
   821a2:	4626      	mov	r6, r4
   821a4:	f103 0210 	add.w	r2, r3, #16
   821a8:	3e10      	subs	r6, #16
   821aa:	2e0f      	cmp	r6, #15
   821ac:	f842 5c10 	str.w	r5, [r2, #-16]
   821b0:	f842 5c0c 	str.w	r5, [r2, #-12]
   821b4:	f842 5c08 	str.w	r5, [r2, #-8]
   821b8:	f842 5c04 	str.w	r5, [r2, #-4]
   821bc:	f102 0210 	add.w	r2, r2, #16
   821c0:	d8f2      	bhi.n	821a8 <memset+0x38>
   821c2:	f1a4 0210 	sub.w	r2, r4, #16
   821c6:	f022 020f 	bic.w	r2, r2, #15
   821ca:	f004 040f 	and.w	r4, r4, #15
   821ce:	3210      	adds	r2, #16
   821d0:	2c03      	cmp	r4, #3
   821d2:	4413      	add	r3, r2
   821d4:	d90d      	bls.n	821f2 <memset+0x82>
   821d6:	461e      	mov	r6, r3
   821d8:	4622      	mov	r2, r4
   821da:	3a04      	subs	r2, #4
   821dc:	2a03      	cmp	r2, #3
   821de:	f846 5b04 	str.w	r5, [r6], #4
   821e2:	d8fa      	bhi.n	821da <memset+0x6a>
   821e4:	1f22      	subs	r2, r4, #4
   821e6:	f022 0203 	bic.w	r2, r2, #3
   821ea:	3204      	adds	r2, #4
   821ec:	4413      	add	r3, r2
   821ee:	f004 0403 	and.w	r4, r4, #3
   821f2:	b12c      	cbz	r4, 82200 <memset+0x90>
   821f4:	b2c9      	uxtb	r1, r1
   821f6:	441c      	add	r4, r3
   821f8:	f803 1b01 	strb.w	r1, [r3], #1
   821fc:	429c      	cmp	r4, r3
   821fe:	d1fb      	bne.n	821f8 <memset+0x88>
   82200:	bc70      	pop	{r4, r5, r6}
   82202:	4770      	bx	lr
   82204:	4614      	mov	r4, r2
   82206:	4603      	mov	r3, r0
   82208:	e7c2      	b.n	82190 <memset+0x20>
   8220a:	bf00      	nop

0008220c <setbuf>:
   8220c:	2900      	cmp	r1, #0
   8220e:	bf0c      	ite	eq
   82210:	2202      	moveq	r2, #2
   82212:	2200      	movne	r2, #0
   82214:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82218:	f000 b800 	b.w	8221c <setvbuf>

0008221c <setvbuf>:
   8221c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82220:	4d61      	ldr	r5, [pc, #388]	; (823a8 <setvbuf+0x18c>)
   82222:	b083      	sub	sp, #12
   82224:	682d      	ldr	r5, [r5, #0]
   82226:	4604      	mov	r4, r0
   82228:	460f      	mov	r7, r1
   8222a:	4690      	mov	r8, r2
   8222c:	461e      	mov	r6, r3
   8222e:	b115      	cbz	r5, 82236 <setvbuf+0x1a>
   82230:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82232:	2b00      	cmp	r3, #0
   82234:	d064      	beq.n	82300 <setvbuf+0xe4>
   82236:	f1b8 0f02 	cmp.w	r8, #2
   8223a:	d006      	beq.n	8224a <setvbuf+0x2e>
   8223c:	f1b8 0f01 	cmp.w	r8, #1
   82240:	f200 809f 	bhi.w	82382 <setvbuf+0x166>
   82244:	2e00      	cmp	r6, #0
   82246:	f2c0 809c 	blt.w	82382 <setvbuf+0x166>
   8224a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8224c:	07d8      	lsls	r0, r3, #31
   8224e:	d534      	bpl.n	822ba <setvbuf+0x9e>
   82250:	4621      	mov	r1, r4
   82252:	4628      	mov	r0, r5
   82254:	f001 f882 	bl	8335c <_fflush_r>
   82258:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8225a:	b141      	cbz	r1, 8226e <setvbuf+0x52>
   8225c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82260:	4299      	cmp	r1, r3
   82262:	d002      	beq.n	8226a <setvbuf+0x4e>
   82264:	4628      	mov	r0, r5
   82266:	f001 f9f7 	bl	83658 <_free_r>
   8226a:	2300      	movs	r3, #0
   8226c:	6323      	str	r3, [r4, #48]	; 0x30
   8226e:	2200      	movs	r2, #0
   82270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82274:	61a2      	str	r2, [r4, #24]
   82276:	6062      	str	r2, [r4, #4]
   82278:	061a      	lsls	r2, r3, #24
   8227a:	d43a      	bmi.n	822f2 <setvbuf+0xd6>
   8227c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82280:	f023 0303 	bic.w	r3, r3, #3
   82284:	f1b8 0f02 	cmp.w	r8, #2
   82288:	81a3      	strh	r3, [r4, #12]
   8228a:	d01d      	beq.n	822c8 <setvbuf+0xac>
   8228c:	ab01      	add	r3, sp, #4
   8228e:	466a      	mov	r2, sp
   82290:	4621      	mov	r1, r4
   82292:	4628      	mov	r0, r5
   82294:	f001 fc7e 	bl	83b94 <__swhatbuf_r>
   82298:	89a3      	ldrh	r3, [r4, #12]
   8229a:	4318      	orrs	r0, r3
   8229c:	81a0      	strh	r0, [r4, #12]
   8229e:	2e00      	cmp	r6, #0
   822a0:	d132      	bne.n	82308 <setvbuf+0xec>
   822a2:	9e00      	ldr	r6, [sp, #0]
   822a4:	4630      	mov	r0, r6
   822a6:	f001 fced 	bl	83c84 <malloc>
   822aa:	4607      	mov	r7, r0
   822ac:	2800      	cmp	r0, #0
   822ae:	d06b      	beq.n	82388 <setvbuf+0x16c>
   822b0:	89a3      	ldrh	r3, [r4, #12]
   822b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   822b6:	81a3      	strh	r3, [r4, #12]
   822b8:	e028      	b.n	8230c <setvbuf+0xf0>
   822ba:	89a3      	ldrh	r3, [r4, #12]
   822bc:	0599      	lsls	r1, r3, #22
   822be:	d4c7      	bmi.n	82250 <setvbuf+0x34>
   822c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   822c2:	f001 fc63 	bl	83b8c <__retarget_lock_acquire_recursive>
   822c6:	e7c3      	b.n	82250 <setvbuf+0x34>
   822c8:	2500      	movs	r5, #0
   822ca:	2600      	movs	r6, #0
   822cc:	2001      	movs	r0, #1
   822ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
   822d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   822d4:	f043 0302 	orr.w	r3, r3, #2
   822d8:	60a6      	str	r6, [r4, #8]
   822da:	07ce      	lsls	r6, r1, #31
   822dc:	81a3      	strh	r3, [r4, #12]
   822de:	6160      	str	r0, [r4, #20]
   822e0:	6022      	str	r2, [r4, #0]
   822e2:	6122      	str	r2, [r4, #16]
   822e4:	d401      	bmi.n	822ea <setvbuf+0xce>
   822e6:	0598      	lsls	r0, r3, #22
   822e8:	d53e      	bpl.n	82368 <setvbuf+0x14c>
   822ea:	4628      	mov	r0, r5
   822ec:	b003      	add	sp, #12
   822ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   822f2:	6921      	ldr	r1, [r4, #16]
   822f4:	4628      	mov	r0, r5
   822f6:	f001 f9af 	bl	83658 <_free_r>
   822fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   822fe:	e7bd      	b.n	8227c <setvbuf+0x60>
   82300:	4628      	mov	r0, r5
   82302:	f001 f883 	bl	8340c <__sinit>
   82306:	e796      	b.n	82236 <setvbuf+0x1a>
   82308:	2f00      	cmp	r7, #0
   8230a:	d0cb      	beq.n	822a4 <setvbuf+0x88>
   8230c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8230e:	2b00      	cmp	r3, #0
   82310:	d033      	beq.n	8237a <setvbuf+0x15e>
   82312:	9b00      	ldr	r3, [sp, #0]
   82314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82318:	429e      	cmp	r6, r3
   8231a:	bf1c      	itt	ne
   8231c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82320:	81a2      	strhne	r2, [r4, #12]
   82322:	f1b8 0f01 	cmp.w	r8, #1
   82326:	bf04      	itt	eq
   82328:	f042 0201 	orreq.w	r2, r2, #1
   8232c:	81a2      	strheq	r2, [r4, #12]
   8232e:	b292      	uxth	r2, r2
   82330:	f012 0308 	ands.w	r3, r2, #8
   82334:	6027      	str	r7, [r4, #0]
   82336:	6127      	str	r7, [r4, #16]
   82338:	6166      	str	r6, [r4, #20]
   8233a:	d00e      	beq.n	8235a <setvbuf+0x13e>
   8233c:	07d1      	lsls	r1, r2, #31
   8233e:	d51a      	bpl.n	82376 <setvbuf+0x15a>
   82340:	2300      	movs	r3, #0
   82342:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82344:	4276      	negs	r6, r6
   82346:	f015 0501 	ands.w	r5, r5, #1
   8234a:	61a6      	str	r6, [r4, #24]
   8234c:	60a3      	str	r3, [r4, #8]
   8234e:	d009      	beq.n	82364 <setvbuf+0x148>
   82350:	2500      	movs	r5, #0
   82352:	4628      	mov	r0, r5
   82354:	b003      	add	sp, #12
   82356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8235a:	60a3      	str	r3, [r4, #8]
   8235c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8235e:	f015 0501 	ands.w	r5, r5, #1
   82362:	d1f5      	bne.n	82350 <setvbuf+0x134>
   82364:	0593      	lsls	r3, r2, #22
   82366:	d4c0      	bmi.n	822ea <setvbuf+0xce>
   82368:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8236a:	f001 fc11 	bl	83b90 <__retarget_lock_release_recursive>
   8236e:	4628      	mov	r0, r5
   82370:	b003      	add	sp, #12
   82372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82376:	60a6      	str	r6, [r4, #8]
   82378:	e7f0      	b.n	8235c <setvbuf+0x140>
   8237a:	4628      	mov	r0, r5
   8237c:	f001 f846 	bl	8340c <__sinit>
   82380:	e7c7      	b.n	82312 <setvbuf+0xf6>
   82382:	f04f 35ff 	mov.w	r5, #4294967295
   82386:	e7b0      	b.n	822ea <setvbuf+0xce>
   82388:	f8dd 9000 	ldr.w	r9, [sp]
   8238c:	45b1      	cmp	r9, r6
   8238e:	d004      	beq.n	8239a <setvbuf+0x17e>
   82390:	4648      	mov	r0, r9
   82392:	f001 fc77 	bl	83c84 <malloc>
   82396:	4607      	mov	r7, r0
   82398:	b920      	cbnz	r0, 823a4 <setvbuf+0x188>
   8239a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8239e:	f04f 35ff 	mov.w	r5, #4294967295
   823a2:	e792      	b.n	822ca <setvbuf+0xae>
   823a4:	464e      	mov	r6, r9
   823a6:	e783      	b.n	822b0 <setvbuf+0x94>
   823a8:	20070140 	.word	0x20070140

000823ac <__sprint_r.part.0>:
   823ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   823b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   823b2:	4693      	mov	fp, r2
   823b4:	049c      	lsls	r4, r3, #18
   823b6:	d52f      	bpl.n	82418 <__sprint_r.part.0+0x6c>
   823b8:	6893      	ldr	r3, [r2, #8]
   823ba:	6812      	ldr	r2, [r2, #0]
   823bc:	b353      	cbz	r3, 82414 <__sprint_r.part.0+0x68>
   823be:	460e      	mov	r6, r1
   823c0:	4607      	mov	r7, r0
   823c2:	f102 0908 	add.w	r9, r2, #8
   823c6:	e919 0420 	ldmdb	r9, {r5, sl}
   823ca:	ea5f 089a 	movs.w	r8, sl, lsr #2
   823ce:	d017      	beq.n	82400 <__sprint_r.part.0+0x54>
   823d0:	2400      	movs	r4, #0
   823d2:	3d04      	subs	r5, #4
   823d4:	e001      	b.n	823da <__sprint_r.part.0+0x2e>
   823d6:	45a0      	cmp	r8, r4
   823d8:	d010      	beq.n	823fc <__sprint_r.part.0+0x50>
   823da:	4632      	mov	r2, r6
   823dc:	f855 1f04 	ldr.w	r1, [r5, #4]!
   823e0:	4638      	mov	r0, r7
   823e2:	f001 f8b5 	bl	83550 <_fputwc_r>
   823e6:	1c43      	adds	r3, r0, #1
   823e8:	f104 0401 	add.w	r4, r4, #1
   823ec:	d1f3      	bne.n	823d6 <__sprint_r.part.0+0x2a>
   823ee:	2300      	movs	r3, #0
   823f0:	f8cb 3008 	str.w	r3, [fp, #8]
   823f4:	f8cb 3004 	str.w	r3, [fp, #4]
   823f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823fc:	f8db 3008 	ldr.w	r3, [fp, #8]
   82400:	f02a 0a03 	bic.w	sl, sl, #3
   82404:	eba3 030a 	sub.w	r3, r3, sl
   82408:	f8cb 3008 	str.w	r3, [fp, #8]
   8240c:	f109 0908 	add.w	r9, r9, #8
   82410:	2b00      	cmp	r3, #0
   82412:	d1d8      	bne.n	823c6 <__sprint_r.part.0+0x1a>
   82414:	2000      	movs	r0, #0
   82416:	e7ea      	b.n	823ee <__sprint_r.part.0+0x42>
   82418:	f001 fa04 	bl	83824 <__sfvwrite_r>
   8241c:	2300      	movs	r3, #0
   8241e:	f8cb 3008 	str.w	r3, [fp, #8]
   82422:	f8cb 3004 	str.w	r3, [fp, #4]
   82426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8242a:	bf00      	nop

0008242c <_vfiprintf_r>:
   8242c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82430:	b0ad      	sub	sp, #180	; 0xb4
   82432:	461d      	mov	r5, r3
   82434:	468b      	mov	fp, r1
   82436:	4690      	mov	r8, r2
   82438:	9307      	str	r3, [sp, #28]
   8243a:	9006      	str	r0, [sp, #24]
   8243c:	b118      	cbz	r0, 82446 <_vfiprintf_r+0x1a>
   8243e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82440:	2b00      	cmp	r3, #0
   82442:	f000 80f3 	beq.w	8262c <_vfiprintf_r+0x200>
   82446:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8244a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8244e:	07df      	lsls	r7, r3, #31
   82450:	b281      	uxth	r1, r0
   82452:	d402      	bmi.n	8245a <_vfiprintf_r+0x2e>
   82454:	058e      	lsls	r6, r1, #22
   82456:	f140 80fc 	bpl.w	82652 <_vfiprintf_r+0x226>
   8245a:	048c      	lsls	r4, r1, #18
   8245c:	d40a      	bmi.n	82474 <_vfiprintf_r+0x48>
   8245e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82462:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8246a:	f8ab 100c 	strh.w	r1, [fp, #12]
   8246e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   82472:	b289      	uxth	r1, r1
   82474:	0708      	lsls	r0, r1, #28
   82476:	f140 80b3 	bpl.w	825e0 <_vfiprintf_r+0x1b4>
   8247a:	f8db 3010 	ldr.w	r3, [fp, #16]
   8247e:	2b00      	cmp	r3, #0
   82480:	f000 80ae 	beq.w	825e0 <_vfiprintf_r+0x1b4>
   82484:	f001 031a 	and.w	r3, r1, #26
   82488:	2b0a      	cmp	r3, #10
   8248a:	f000 80b5 	beq.w	825f8 <_vfiprintf_r+0x1cc>
   8248e:	2300      	movs	r3, #0
   82490:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   82494:	46d1      	mov	r9, sl
   82496:	930b      	str	r3, [sp, #44]	; 0x2c
   82498:	9303      	str	r3, [sp, #12]
   8249a:	9311      	str	r3, [sp, #68]	; 0x44
   8249c:	9310      	str	r3, [sp, #64]	; 0x40
   8249e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   824a2:	f8cd b010 	str.w	fp, [sp, #16]
   824a6:	f898 3000 	ldrb.w	r3, [r8]
   824aa:	4644      	mov	r4, r8
   824ac:	b1fb      	cbz	r3, 824ee <_vfiprintf_r+0xc2>
   824ae:	2b25      	cmp	r3, #37	; 0x25
   824b0:	d102      	bne.n	824b8 <_vfiprintf_r+0x8c>
   824b2:	e01c      	b.n	824ee <_vfiprintf_r+0xc2>
   824b4:	2b25      	cmp	r3, #37	; 0x25
   824b6:	d003      	beq.n	824c0 <_vfiprintf_r+0x94>
   824b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   824bc:	2b00      	cmp	r3, #0
   824be:	d1f9      	bne.n	824b4 <_vfiprintf_r+0x88>
   824c0:	eba4 0508 	sub.w	r5, r4, r8
   824c4:	b19d      	cbz	r5, 824ee <_vfiprintf_r+0xc2>
   824c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   824c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   824ca:	3301      	adds	r3, #1
   824cc:	442a      	add	r2, r5
   824ce:	2b07      	cmp	r3, #7
   824d0:	f8c9 8000 	str.w	r8, [r9]
   824d4:	f8c9 5004 	str.w	r5, [r9, #4]
   824d8:	9211      	str	r2, [sp, #68]	; 0x44
   824da:	9310      	str	r3, [sp, #64]	; 0x40
   824dc:	dd7a      	ble.n	825d4 <_vfiprintf_r+0x1a8>
   824de:	2a00      	cmp	r2, #0
   824e0:	f040 84b5 	bne.w	82e4e <_vfiprintf_r+0xa22>
   824e4:	46d1      	mov	r9, sl
   824e6:	9b03      	ldr	r3, [sp, #12]
   824e8:	9210      	str	r2, [sp, #64]	; 0x40
   824ea:	442b      	add	r3, r5
   824ec:	9303      	str	r3, [sp, #12]
   824ee:	7823      	ldrb	r3, [r4, #0]
   824f0:	2b00      	cmp	r3, #0
   824f2:	f000 83e5 	beq.w	82cc0 <_vfiprintf_r+0x894>
   824f6:	2000      	movs	r0, #0
   824f8:	f04f 0300 	mov.w	r3, #0
   824fc:	f104 0801 	add.w	r8, r4, #1
   82500:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82504:	7862      	ldrb	r2, [r4, #1]
   82506:	4606      	mov	r6, r0
   82508:	4605      	mov	r5, r0
   8250a:	4603      	mov	r3, r0
   8250c:	f04f 34ff 	mov.w	r4, #4294967295
   82510:	f108 0801 	add.w	r8, r8, #1
   82514:	f1a2 0120 	sub.w	r1, r2, #32
   82518:	2958      	cmp	r1, #88	; 0x58
   8251a:	f200 82d9 	bhi.w	82ad0 <_vfiprintf_r+0x6a4>
   8251e:	e8df f011 	tbh	[pc, r1, lsl #1]
   82522:	0228      	.short	0x0228
   82524:	02d702d7 	.word	0x02d702d7
   82528:	02d70230 	.word	0x02d70230
   8252c:	02d702d7 	.word	0x02d702d7
   82530:	02d702d7 	.word	0x02d702d7
   82534:	00a002d7 	.word	0x00a002d7
   82538:	02d70288 	.word	0x02d70288
   8253c:	02b800a8 	.word	0x02b800a8
   82540:	01a602d7 	.word	0x01a602d7
   82544:	01ab01ab 	.word	0x01ab01ab
   82548:	01ab01ab 	.word	0x01ab01ab
   8254c:	01ab01ab 	.word	0x01ab01ab
   82550:	01ab01ab 	.word	0x01ab01ab
   82554:	02d701ab 	.word	0x02d701ab
   82558:	02d702d7 	.word	0x02d702d7
   8255c:	02d702d7 	.word	0x02d702d7
   82560:	02d702d7 	.word	0x02d702d7
   82564:	02d702d7 	.word	0x02d702d7
   82568:	01b902d7 	.word	0x01b902d7
   8256c:	02d702d7 	.word	0x02d702d7
   82570:	02d702d7 	.word	0x02d702d7
   82574:	02d702d7 	.word	0x02d702d7
   82578:	02d702d7 	.word	0x02d702d7
   8257c:	02d702d7 	.word	0x02d702d7
   82580:	02d7019e 	.word	0x02d7019e
   82584:	02d702d7 	.word	0x02d702d7
   82588:	02d702d7 	.word	0x02d702d7
   8258c:	02d701a2 	.word	0x02d701a2
   82590:	025a02d7 	.word	0x025a02d7
   82594:	02d702d7 	.word	0x02d702d7
   82598:	02d702d7 	.word	0x02d702d7
   8259c:	02d702d7 	.word	0x02d702d7
   825a0:	02d702d7 	.word	0x02d702d7
   825a4:	02d702d7 	.word	0x02d702d7
   825a8:	02220261 	.word	0x02220261
   825ac:	02d702d7 	.word	0x02d702d7
   825b0:	027602d7 	.word	0x027602d7
   825b4:	02d70222 	.word	0x02d70222
   825b8:	027b02d7 	.word	0x027b02d7
   825bc:	01fc02d7 	.word	0x01fc02d7
   825c0:	02100189 	.word	0x02100189
   825c4:	02d702d2 	.word	0x02d702d2
   825c8:	02d70295 	.word	0x02d70295
   825cc:	02d700ad 	.word	0x02d700ad
   825d0:	023502d7 	.word	0x023502d7
   825d4:	f109 0908 	add.w	r9, r9, #8
   825d8:	9b03      	ldr	r3, [sp, #12]
   825da:	442b      	add	r3, r5
   825dc:	9303      	str	r3, [sp, #12]
   825de:	e786      	b.n	824ee <_vfiprintf_r+0xc2>
   825e0:	4659      	mov	r1, fp
   825e2:	9806      	ldr	r0, [sp, #24]
   825e4:	f000 fdaa 	bl	8313c <__swsetup_r>
   825e8:	bb18      	cbnz	r0, 82632 <_vfiprintf_r+0x206>
   825ea:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   825ee:	f001 031a 	and.w	r3, r1, #26
   825f2:	2b0a      	cmp	r3, #10
   825f4:	f47f af4b 	bne.w	8248e <_vfiprintf_r+0x62>
   825f8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   825fc:	2b00      	cmp	r3, #0
   825fe:	f6ff af46 	blt.w	8248e <_vfiprintf_r+0x62>
   82602:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82606:	07db      	lsls	r3, r3, #31
   82608:	d405      	bmi.n	82616 <_vfiprintf_r+0x1ea>
   8260a:	058f      	lsls	r7, r1, #22
   8260c:	d403      	bmi.n	82616 <_vfiprintf_r+0x1ea>
   8260e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82612:	f001 fabd 	bl	83b90 <__retarget_lock_release_recursive>
   82616:	462b      	mov	r3, r5
   82618:	4642      	mov	r2, r8
   8261a:	4659      	mov	r1, fp
   8261c:	9806      	ldr	r0, [sp, #24]
   8261e:	f000 fd49 	bl	830b4 <__sbprintf>
   82622:	9003      	str	r0, [sp, #12]
   82624:	9803      	ldr	r0, [sp, #12]
   82626:	b02d      	add	sp, #180	; 0xb4
   82628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8262c:	f000 feee 	bl	8340c <__sinit>
   82630:	e709      	b.n	82446 <_vfiprintf_r+0x1a>
   82632:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82636:	07d9      	lsls	r1, r3, #31
   82638:	d404      	bmi.n	82644 <_vfiprintf_r+0x218>
   8263a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8263e:	059a      	lsls	r2, r3, #22
   82640:	f140 84ae 	bpl.w	82fa0 <_vfiprintf_r+0xb74>
   82644:	f04f 33ff 	mov.w	r3, #4294967295
   82648:	9303      	str	r3, [sp, #12]
   8264a:	9803      	ldr	r0, [sp, #12]
   8264c:	b02d      	add	sp, #180	; 0xb4
   8264e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82652:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82656:	f001 fa99 	bl	83b8c <__retarget_lock_acquire_recursive>
   8265a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8265e:	b281      	uxth	r1, r0
   82660:	e6fb      	b.n	8245a <_vfiprintf_r+0x2e>
   82662:	9907      	ldr	r1, [sp, #28]
   82664:	460a      	mov	r2, r1
   82666:	680d      	ldr	r5, [r1, #0]
   82668:	3204      	adds	r2, #4
   8266a:	2d00      	cmp	r5, #0
   8266c:	9207      	str	r2, [sp, #28]
   8266e:	da02      	bge.n	82676 <_vfiprintf_r+0x24a>
   82670:	426d      	negs	r5, r5
   82672:	f043 0304 	orr.w	r3, r3, #4
   82676:	f898 2000 	ldrb.w	r2, [r8]
   8267a:	e749      	b.n	82510 <_vfiprintf_r+0xe4>
   8267c:	9508      	str	r5, [sp, #32]
   8267e:	069e      	lsls	r6, r3, #26
   82680:	f100 845a 	bmi.w	82f38 <_vfiprintf_r+0xb0c>
   82684:	9907      	ldr	r1, [sp, #28]
   82686:	06dd      	lsls	r5, r3, #27
   82688:	460a      	mov	r2, r1
   8268a:	f100 83ef 	bmi.w	82e6c <_vfiprintf_r+0xa40>
   8268e:	0658      	lsls	r0, r3, #25
   82690:	f140 83ec 	bpl.w	82e6c <_vfiprintf_r+0xa40>
   82694:	2700      	movs	r7, #0
   82696:	2201      	movs	r2, #1
   82698:	880e      	ldrh	r6, [r1, #0]
   8269a:	3104      	adds	r1, #4
   8269c:	9107      	str	r1, [sp, #28]
   8269e:	f04f 0100 	mov.w	r1, #0
   826a2:	2500      	movs	r5, #0
   826a4:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   826a8:	1c61      	adds	r1, r4, #1
   826aa:	f000 8117 	beq.w	828dc <_vfiprintf_r+0x4b0>
   826ae:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   826b2:	9102      	str	r1, [sp, #8]
   826b4:	ea56 0107 	orrs.w	r1, r6, r7
   826b8:	f040 8115 	bne.w	828e6 <_vfiprintf_r+0x4ba>
   826bc:	2c00      	cmp	r4, #0
   826be:	f040 835b 	bne.w	82d78 <_vfiprintf_r+0x94c>
   826c2:	2a00      	cmp	r2, #0
   826c4:	f040 83b6 	bne.w	82e34 <_vfiprintf_r+0xa08>
   826c8:	f013 0301 	ands.w	r3, r3, #1
   826cc:	9305      	str	r3, [sp, #20]
   826ce:	f000 8455 	beq.w	82f7c <_vfiprintf_r+0xb50>
   826d2:	2330      	movs	r3, #48	; 0x30
   826d4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   826d8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   826dc:	9b05      	ldr	r3, [sp, #20]
   826de:	42a3      	cmp	r3, r4
   826e0:	bfb8      	it	lt
   826e2:	4623      	movlt	r3, r4
   826e4:	9301      	str	r3, [sp, #4]
   826e6:	b10d      	cbz	r5, 826ec <_vfiprintf_r+0x2c0>
   826e8:	3301      	adds	r3, #1
   826ea:	9301      	str	r3, [sp, #4]
   826ec:	9b02      	ldr	r3, [sp, #8]
   826ee:	f013 0302 	ands.w	r3, r3, #2
   826f2:	9309      	str	r3, [sp, #36]	; 0x24
   826f4:	d002      	beq.n	826fc <_vfiprintf_r+0x2d0>
   826f6:	9b01      	ldr	r3, [sp, #4]
   826f8:	3302      	adds	r3, #2
   826fa:	9301      	str	r3, [sp, #4]
   826fc:	9b02      	ldr	r3, [sp, #8]
   826fe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82702:	930a      	str	r3, [sp, #40]	; 0x28
   82704:	f040 8215 	bne.w	82b32 <_vfiprintf_r+0x706>
   82708:	9b08      	ldr	r3, [sp, #32]
   8270a:	9a01      	ldr	r2, [sp, #4]
   8270c:	1a9d      	subs	r5, r3, r2
   8270e:	2d00      	cmp	r5, #0
   82710:	f340 820f 	ble.w	82b32 <_vfiprintf_r+0x706>
   82714:	2d10      	cmp	r5, #16
   82716:	f340 8484 	ble.w	83022 <_vfiprintf_r+0xbf6>
   8271a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8271c:	46ce      	mov	lr, r9
   8271e:	2710      	movs	r7, #16
   82720:	46a1      	mov	r9, r4
   82722:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82724:	4ec5      	ldr	r6, [pc, #788]	; (82a3c <_vfiprintf_r+0x610>)
   82726:	4619      	mov	r1, r3
   82728:	9c06      	ldr	r4, [sp, #24]
   8272a:	e007      	b.n	8273c <_vfiprintf_r+0x310>
   8272c:	f101 0c02 	add.w	ip, r1, #2
   82730:	4601      	mov	r1, r0
   82732:	f10e 0e08 	add.w	lr, lr, #8
   82736:	3d10      	subs	r5, #16
   82738:	2d10      	cmp	r5, #16
   8273a:	dd11      	ble.n	82760 <_vfiprintf_r+0x334>
   8273c:	1c48      	adds	r0, r1, #1
   8273e:	3210      	adds	r2, #16
   82740:	2807      	cmp	r0, #7
   82742:	9211      	str	r2, [sp, #68]	; 0x44
   82744:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82748:	9010      	str	r0, [sp, #64]	; 0x40
   8274a:	ddef      	ble.n	8272c <_vfiprintf_r+0x300>
   8274c:	2a00      	cmp	r2, #0
   8274e:	f040 81d9 	bne.w	82b04 <_vfiprintf_r+0x6d8>
   82752:	3d10      	subs	r5, #16
   82754:	2d10      	cmp	r5, #16
   82756:	4611      	mov	r1, r2
   82758:	f04f 0c01 	mov.w	ip, #1
   8275c:	46d6      	mov	lr, sl
   8275e:	dced      	bgt.n	8273c <_vfiprintf_r+0x310>
   82760:	464c      	mov	r4, r9
   82762:	4661      	mov	r1, ip
   82764:	46f1      	mov	r9, lr
   82766:	442a      	add	r2, r5
   82768:	2907      	cmp	r1, #7
   8276a:	9211      	str	r2, [sp, #68]	; 0x44
   8276c:	f8c9 6000 	str.w	r6, [r9]
   82770:	f8c9 5004 	str.w	r5, [r9, #4]
   82774:	9110      	str	r1, [sp, #64]	; 0x40
   82776:	f300 82eb 	bgt.w	82d50 <_vfiprintf_r+0x924>
   8277a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8277e:	f109 0908 	add.w	r9, r9, #8
   82782:	1c48      	adds	r0, r1, #1
   82784:	2d00      	cmp	r5, #0
   82786:	f040 81dc 	bne.w	82b42 <_vfiprintf_r+0x716>
   8278a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8278c:	2b00      	cmp	r3, #0
   8278e:	f000 81f6 	beq.w	82b7e <_vfiprintf_r+0x752>
   82792:	2102      	movs	r1, #2
   82794:	ab0e      	add	r3, sp, #56	; 0x38
   82796:	440a      	add	r2, r1
   82798:	2807      	cmp	r0, #7
   8279a:	9211      	str	r2, [sp, #68]	; 0x44
   8279c:	9010      	str	r0, [sp, #64]	; 0x40
   8279e:	f8c9 1004 	str.w	r1, [r9, #4]
   827a2:	f8c9 3000 	str.w	r3, [r9]
   827a6:	f340 81e6 	ble.w	82b76 <_vfiprintf_r+0x74a>
   827aa:	2a00      	cmp	r2, #0
   827ac:	f040 8395 	bne.w	82eda <_vfiprintf_r+0xaae>
   827b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   827b2:	2001      	movs	r0, #1
   827b4:	2b80      	cmp	r3, #128	; 0x80
   827b6:	4611      	mov	r1, r2
   827b8:	46d1      	mov	r9, sl
   827ba:	f040 81e4 	bne.w	82b86 <_vfiprintf_r+0x75a>
   827be:	9b08      	ldr	r3, [sp, #32]
   827c0:	9d01      	ldr	r5, [sp, #4]
   827c2:	1b5e      	subs	r6, r3, r5
   827c4:	2e00      	cmp	r6, #0
   827c6:	f340 81de 	ble.w	82b86 <_vfiprintf_r+0x75a>
   827ca:	2e10      	cmp	r6, #16
   827cc:	f340 843c 	ble.w	83048 <_vfiprintf_r+0xc1c>
   827d0:	46cc      	mov	ip, r9
   827d2:	2710      	movs	r7, #16
   827d4:	46a1      	mov	r9, r4
   827d6:	4d9a      	ldr	r5, [pc, #616]	; (82a40 <_vfiprintf_r+0x614>)
   827d8:	9c06      	ldr	r4, [sp, #24]
   827da:	e007      	b.n	827ec <_vfiprintf_r+0x3c0>
   827dc:	f101 0e02 	add.w	lr, r1, #2
   827e0:	4601      	mov	r1, r0
   827e2:	f10c 0c08 	add.w	ip, ip, #8
   827e6:	3e10      	subs	r6, #16
   827e8:	2e10      	cmp	r6, #16
   827ea:	dd11      	ble.n	82810 <_vfiprintf_r+0x3e4>
   827ec:	1c48      	adds	r0, r1, #1
   827ee:	3210      	adds	r2, #16
   827f0:	2807      	cmp	r0, #7
   827f2:	9211      	str	r2, [sp, #68]	; 0x44
   827f4:	e88c 00a0 	stmia.w	ip, {r5, r7}
   827f8:	9010      	str	r0, [sp, #64]	; 0x40
   827fa:	ddef      	ble.n	827dc <_vfiprintf_r+0x3b0>
   827fc:	2a00      	cmp	r2, #0
   827fe:	f040 829b 	bne.w	82d38 <_vfiprintf_r+0x90c>
   82802:	3e10      	subs	r6, #16
   82804:	2e10      	cmp	r6, #16
   82806:	f04f 0e01 	mov.w	lr, #1
   8280a:	4611      	mov	r1, r2
   8280c:	46d4      	mov	ip, sl
   8280e:	dced      	bgt.n	827ec <_vfiprintf_r+0x3c0>
   82810:	464c      	mov	r4, r9
   82812:	46e1      	mov	r9, ip
   82814:	4432      	add	r2, r6
   82816:	f1be 0f07 	cmp.w	lr, #7
   8281a:	9211      	str	r2, [sp, #68]	; 0x44
   8281c:	e889 0060 	stmia.w	r9, {r5, r6}
   82820:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82824:	f300 8366 	bgt.w	82ef4 <_vfiprintf_r+0xac8>
   82828:	f109 0908 	add.w	r9, r9, #8
   8282c:	f10e 0001 	add.w	r0, lr, #1
   82830:	4671      	mov	r1, lr
   82832:	e1a8      	b.n	82b86 <_vfiprintf_r+0x75a>
   82834:	9508      	str	r5, [sp, #32]
   82836:	f013 0220 	ands.w	r2, r3, #32
   8283a:	f040 8389 	bne.w	82f50 <_vfiprintf_r+0xb24>
   8283e:	f013 0110 	ands.w	r1, r3, #16
   82842:	f040 8319 	bne.w	82e78 <_vfiprintf_r+0xa4c>
   82846:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   8284a:	f000 8315 	beq.w	82e78 <_vfiprintf_r+0xa4c>
   8284e:	9807      	ldr	r0, [sp, #28]
   82850:	460a      	mov	r2, r1
   82852:	4601      	mov	r1, r0
   82854:	3104      	adds	r1, #4
   82856:	8806      	ldrh	r6, [r0, #0]
   82858:	2700      	movs	r7, #0
   8285a:	9107      	str	r1, [sp, #28]
   8285c:	e71f      	b.n	8269e <_vfiprintf_r+0x272>
   8285e:	9508      	str	r5, [sp, #32]
   82860:	f043 0310 	orr.w	r3, r3, #16
   82864:	e7e7      	b.n	82836 <_vfiprintf_r+0x40a>
   82866:	9508      	str	r5, [sp, #32]
   82868:	f043 0310 	orr.w	r3, r3, #16
   8286c:	e707      	b.n	8267e <_vfiprintf_r+0x252>
   8286e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82872:	f898 2000 	ldrb.w	r2, [r8]
   82876:	e64b      	b.n	82510 <_vfiprintf_r+0xe4>
   82878:	2500      	movs	r5, #0
   8287a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8287e:	f818 2b01 	ldrb.w	r2, [r8], #1
   82882:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82886:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8288a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8288e:	2909      	cmp	r1, #9
   82890:	d9f5      	bls.n	8287e <_vfiprintf_r+0x452>
   82892:	e63f      	b.n	82514 <_vfiprintf_r+0xe8>
   82894:	9508      	str	r5, [sp, #32]
   82896:	2800      	cmp	r0, #0
   82898:	f040 8402 	bne.w	830a0 <_vfiprintf_r+0xc74>
   8289c:	f043 0310 	orr.w	r3, r3, #16
   828a0:	069e      	lsls	r6, r3, #26
   828a2:	f100 833d 	bmi.w	82f20 <_vfiprintf_r+0xaf4>
   828a6:	9907      	ldr	r1, [sp, #28]
   828a8:	06dd      	lsls	r5, r3, #27
   828aa:	460a      	mov	r2, r1
   828ac:	f100 82f0 	bmi.w	82e90 <_vfiprintf_r+0xa64>
   828b0:	0658      	lsls	r0, r3, #25
   828b2:	f140 82ed 	bpl.w	82e90 <_vfiprintf_r+0xa64>
   828b6:	f9b1 6000 	ldrsh.w	r6, [r1]
   828ba:	3204      	adds	r2, #4
   828bc:	17f7      	asrs	r7, r6, #31
   828be:	4630      	mov	r0, r6
   828c0:	4639      	mov	r1, r7
   828c2:	9207      	str	r2, [sp, #28]
   828c4:	2800      	cmp	r0, #0
   828c6:	f171 0200 	sbcs.w	r2, r1, #0
   828ca:	f2c0 835a 	blt.w	82f82 <_vfiprintf_r+0xb56>
   828ce:	1c61      	adds	r1, r4, #1
   828d0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   828d4:	f04f 0201 	mov.w	r2, #1
   828d8:	f47f aee9 	bne.w	826ae <_vfiprintf_r+0x282>
   828dc:	ea56 0107 	orrs.w	r1, r6, r7
   828e0:	f000 824b 	beq.w	82d7a <_vfiprintf_r+0x94e>
   828e4:	9302      	str	r3, [sp, #8]
   828e6:	2a01      	cmp	r2, #1
   828e8:	f000 828a 	beq.w	82e00 <_vfiprintf_r+0x9d4>
   828ec:	2a02      	cmp	r2, #2
   828ee:	f040 825a 	bne.w	82da6 <_vfiprintf_r+0x97a>
   828f2:	46d3      	mov	fp, sl
   828f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   828f6:	0933      	lsrs	r3, r6, #4
   828f8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   828fc:	0939      	lsrs	r1, r7, #4
   828fe:	f006 020f 	and.w	r2, r6, #15
   82902:	460f      	mov	r7, r1
   82904:	461e      	mov	r6, r3
   82906:	5c83      	ldrb	r3, [r0, r2]
   82908:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   8290c:	ea56 0307 	orrs.w	r3, r6, r7
   82910:	d1f1      	bne.n	828f6 <_vfiprintf_r+0x4ca>
   82912:	ebaa 030b 	sub.w	r3, sl, fp
   82916:	9305      	str	r3, [sp, #20]
   82918:	e6e0      	b.n	826dc <_vfiprintf_r+0x2b0>
   8291a:	2800      	cmp	r0, #0
   8291c:	f040 83bd 	bne.w	8309a <_vfiprintf_r+0xc6e>
   82920:	0699      	lsls	r1, r3, #26
   82922:	f100 8359 	bmi.w	82fd8 <_vfiprintf_r+0xbac>
   82926:	06da      	lsls	r2, r3, #27
   82928:	f100 80e5 	bmi.w	82af6 <_vfiprintf_r+0x6ca>
   8292c:	065b      	lsls	r3, r3, #25
   8292e:	f140 80e2 	bpl.w	82af6 <_vfiprintf_r+0x6ca>
   82932:	9a07      	ldr	r2, [sp, #28]
   82934:	6813      	ldr	r3, [r2, #0]
   82936:	3204      	adds	r2, #4
   82938:	9207      	str	r2, [sp, #28]
   8293a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   8293e:	801a      	strh	r2, [r3, #0]
   82940:	e5b1      	b.n	824a6 <_vfiprintf_r+0x7a>
   82942:	2278      	movs	r2, #120	; 0x78
   82944:	2130      	movs	r1, #48	; 0x30
   82946:	9508      	str	r5, [sp, #32]
   82948:	9d07      	ldr	r5, [sp, #28]
   8294a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8294e:	1d2a      	adds	r2, r5, #4
   82950:	9207      	str	r2, [sp, #28]
   82952:	4a3c      	ldr	r2, [pc, #240]	; (82a44 <_vfiprintf_r+0x618>)
   82954:	682e      	ldr	r6, [r5, #0]
   82956:	920b      	str	r2, [sp, #44]	; 0x2c
   82958:	f043 0302 	orr.w	r3, r3, #2
   8295c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82960:	2700      	movs	r7, #0
   82962:	2202      	movs	r2, #2
   82964:	e69b      	b.n	8269e <_vfiprintf_r+0x272>
   82966:	9508      	str	r5, [sp, #32]
   82968:	2800      	cmp	r0, #0
   8296a:	d099      	beq.n	828a0 <_vfiprintf_r+0x474>
   8296c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82970:	e796      	b.n	828a0 <_vfiprintf_r+0x474>
   82972:	f898 2000 	ldrb.w	r2, [r8]
   82976:	2e00      	cmp	r6, #0
   82978:	f47f adca 	bne.w	82510 <_vfiprintf_r+0xe4>
   8297c:	2001      	movs	r0, #1
   8297e:	2620      	movs	r6, #32
   82980:	e5c6      	b.n	82510 <_vfiprintf_r+0xe4>
   82982:	f043 0301 	orr.w	r3, r3, #1
   82986:	f898 2000 	ldrb.w	r2, [r8]
   8298a:	e5c1      	b.n	82510 <_vfiprintf_r+0xe4>
   8298c:	9508      	str	r5, [sp, #32]
   8298e:	2800      	cmp	r0, #0
   82990:	f040 8380 	bne.w	83094 <_vfiprintf_r+0xc68>
   82994:	492b      	ldr	r1, [pc, #172]	; (82a44 <_vfiprintf_r+0x618>)
   82996:	910b      	str	r1, [sp, #44]	; 0x2c
   82998:	069f      	lsls	r7, r3, #26
   8299a:	f100 82e5 	bmi.w	82f68 <_vfiprintf_r+0xb3c>
   8299e:	9807      	ldr	r0, [sp, #28]
   829a0:	06de      	lsls	r6, r3, #27
   829a2:	4601      	mov	r1, r0
   829a4:	f100 826f 	bmi.w	82e86 <_vfiprintf_r+0xa5a>
   829a8:	065d      	lsls	r5, r3, #25
   829aa:	f140 826c 	bpl.w	82e86 <_vfiprintf_r+0xa5a>
   829ae:	2700      	movs	r7, #0
   829b0:	3104      	adds	r1, #4
   829b2:	8806      	ldrh	r6, [r0, #0]
   829b4:	9107      	str	r1, [sp, #28]
   829b6:	07d8      	lsls	r0, r3, #31
   829b8:	f140 8220 	bpl.w	82dfc <_vfiprintf_r+0x9d0>
   829bc:	ea56 0107 	orrs.w	r1, r6, r7
   829c0:	f000 821c 	beq.w	82dfc <_vfiprintf_r+0x9d0>
   829c4:	2130      	movs	r1, #48	; 0x30
   829c6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   829ca:	f043 0302 	orr.w	r3, r3, #2
   829ce:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   829d2:	2202      	movs	r2, #2
   829d4:	e663      	b.n	8269e <_vfiprintf_r+0x272>
   829d6:	9508      	str	r5, [sp, #32]
   829d8:	2800      	cmp	r0, #0
   829da:	f040 8355 	bne.w	83088 <_vfiprintf_r+0xc5c>
   829de:	491a      	ldr	r1, [pc, #104]	; (82a48 <_vfiprintf_r+0x61c>)
   829e0:	910b      	str	r1, [sp, #44]	; 0x2c
   829e2:	e7d9      	b.n	82998 <_vfiprintf_r+0x56c>
   829e4:	2201      	movs	r2, #1
   829e6:	9807      	ldr	r0, [sp, #28]
   829e8:	4611      	mov	r1, r2
   829ea:	9201      	str	r2, [sp, #4]
   829ec:	6802      	ldr	r2, [r0, #0]
   829ee:	f04f 0400 	mov.w	r4, #0
   829f2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   829f6:	4602      	mov	r2, r0
   829f8:	3204      	adds	r2, #4
   829fa:	9508      	str	r5, [sp, #32]
   829fc:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82a00:	9105      	str	r1, [sp, #20]
   82a02:	9207      	str	r2, [sp, #28]
   82a04:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82a08:	9302      	str	r3, [sp, #8]
   82a0a:	2400      	movs	r4, #0
   82a0c:	e66e      	b.n	826ec <_vfiprintf_r+0x2c0>
   82a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82a12:	f898 2000 	ldrb.w	r2, [r8]
   82a16:	e57b      	b.n	82510 <_vfiprintf_r+0xe4>
   82a18:	f898 2000 	ldrb.w	r2, [r8]
   82a1c:	2a6c      	cmp	r2, #108	; 0x6c
   82a1e:	bf03      	ittte	eq
   82a20:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   82a24:	f043 0320 	orreq.w	r3, r3, #32
   82a28:	f108 0801 	addeq.w	r8, r8, #1
   82a2c:	f043 0310 	orrne.w	r3, r3, #16
   82a30:	e56e      	b.n	82510 <_vfiprintf_r+0xe4>
   82a32:	f898 2000 	ldrb.w	r2, [r8]
   82a36:	2001      	movs	r0, #1
   82a38:	262b      	movs	r6, #43	; 0x2b
   82a3a:	e569      	b.n	82510 <_vfiprintf_r+0xe4>
   82a3c:	00084ce4 	.word	0x00084ce4
   82a40:	00084cf4 	.word	0x00084cf4
   82a44:	00084cc8 	.word	0x00084cc8
   82a48:	00084cb4 	.word	0x00084cb4
   82a4c:	f04f 0200 	mov.w	r2, #0
   82a50:	9907      	ldr	r1, [sp, #28]
   82a52:	9508      	str	r5, [sp, #32]
   82a54:	f8d1 b000 	ldr.w	fp, [r1]
   82a58:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82a5c:	1d0d      	adds	r5, r1, #4
   82a5e:	f1bb 0f00 	cmp.w	fp, #0
   82a62:	f000 82e4 	beq.w	8302e <_vfiprintf_r+0xc02>
   82a66:	1c67      	adds	r7, r4, #1
   82a68:	f000 82c3 	beq.w	82ff2 <_vfiprintf_r+0xbc6>
   82a6c:	4622      	mov	r2, r4
   82a6e:	2100      	movs	r1, #0
   82a70:	4658      	mov	r0, fp
   82a72:	9301      	str	r3, [sp, #4]
   82a74:	f001 fbc6 	bl	84204 <memchr>
   82a78:	9b01      	ldr	r3, [sp, #4]
   82a7a:	2800      	cmp	r0, #0
   82a7c:	f000 82e8 	beq.w	83050 <_vfiprintf_r+0xc24>
   82a80:	eba0 020b 	sub.w	r2, r0, fp
   82a84:	9507      	str	r5, [sp, #28]
   82a86:	9205      	str	r2, [sp, #20]
   82a88:	9302      	str	r3, [sp, #8]
   82a8a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82a8e:	2400      	movs	r4, #0
   82a90:	e624      	b.n	826dc <_vfiprintf_r+0x2b0>
   82a92:	f898 2000 	ldrb.w	r2, [r8]
   82a96:	f108 0701 	add.w	r7, r8, #1
   82a9a:	2a2a      	cmp	r2, #42	; 0x2a
   82a9c:	f000 82e9 	beq.w	83072 <_vfiprintf_r+0xc46>
   82aa0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82aa4:	2909      	cmp	r1, #9
   82aa6:	46b8      	mov	r8, r7
   82aa8:	f04f 0400 	mov.w	r4, #0
   82aac:	f63f ad32 	bhi.w	82514 <_vfiprintf_r+0xe8>
   82ab0:	f818 2b01 	ldrb.w	r2, [r8], #1
   82ab4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82ab8:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82abc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82ac0:	2909      	cmp	r1, #9
   82ac2:	d9f5      	bls.n	82ab0 <_vfiprintf_r+0x684>
   82ac4:	e526      	b.n	82514 <_vfiprintf_r+0xe8>
   82ac6:	f043 0320 	orr.w	r3, r3, #32
   82aca:	f898 2000 	ldrb.w	r2, [r8]
   82ace:	e51f      	b.n	82510 <_vfiprintf_r+0xe4>
   82ad0:	9508      	str	r5, [sp, #32]
   82ad2:	2800      	cmp	r0, #0
   82ad4:	f040 82db 	bne.w	8308e <_vfiprintf_r+0xc62>
   82ad8:	2a00      	cmp	r2, #0
   82ada:	f000 80f1 	beq.w	82cc0 <_vfiprintf_r+0x894>
   82ade:	2101      	movs	r1, #1
   82ae0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82ae4:	f04f 0200 	mov.w	r2, #0
   82ae8:	9101      	str	r1, [sp, #4]
   82aea:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82aee:	9105      	str	r1, [sp, #20]
   82af0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82af4:	e788      	b.n	82a08 <_vfiprintf_r+0x5dc>
   82af6:	9a07      	ldr	r2, [sp, #28]
   82af8:	6813      	ldr	r3, [r2, #0]
   82afa:	3204      	adds	r2, #4
   82afc:	9207      	str	r2, [sp, #28]
   82afe:	9a03      	ldr	r2, [sp, #12]
   82b00:	601a      	str	r2, [r3, #0]
   82b02:	e4d0      	b.n	824a6 <_vfiprintf_r+0x7a>
   82b04:	aa0f      	add	r2, sp, #60	; 0x3c
   82b06:	9904      	ldr	r1, [sp, #16]
   82b08:	4620      	mov	r0, r4
   82b0a:	f7ff fc4f 	bl	823ac <__sprint_r.part.0>
   82b0e:	2800      	cmp	r0, #0
   82b10:	f040 8143 	bne.w	82d9a <_vfiprintf_r+0x96e>
   82b14:	9910      	ldr	r1, [sp, #64]	; 0x40
   82b16:	46d6      	mov	lr, sl
   82b18:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82b1a:	f101 0c01 	add.w	ip, r1, #1
   82b1e:	e60a      	b.n	82736 <_vfiprintf_r+0x30a>
   82b20:	aa0f      	add	r2, sp, #60	; 0x3c
   82b22:	9904      	ldr	r1, [sp, #16]
   82b24:	9806      	ldr	r0, [sp, #24]
   82b26:	f7ff fc41 	bl	823ac <__sprint_r.part.0>
   82b2a:	2800      	cmp	r0, #0
   82b2c:	f040 8135 	bne.w	82d9a <_vfiprintf_r+0x96e>
   82b30:	46d1      	mov	r9, sl
   82b32:	9910      	ldr	r1, [sp, #64]	; 0x40
   82b34:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82b3a:	1c48      	adds	r0, r1, #1
   82b3c:	2d00      	cmp	r5, #0
   82b3e:	f43f ae24 	beq.w	8278a <_vfiprintf_r+0x35e>
   82b42:	2101      	movs	r1, #1
   82b44:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   82b48:	440a      	add	r2, r1
   82b4a:	2807      	cmp	r0, #7
   82b4c:	9211      	str	r2, [sp, #68]	; 0x44
   82b4e:	9010      	str	r0, [sp, #64]	; 0x40
   82b50:	f8c9 1004 	str.w	r1, [r9, #4]
   82b54:	f8c9 5000 	str.w	r5, [r9]
   82b58:	f340 8109 	ble.w	82d6e <_vfiprintf_r+0x942>
   82b5c:	2a00      	cmp	r2, #0
   82b5e:	f040 81af 	bne.w	82ec0 <_vfiprintf_r+0xa94>
   82b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82b64:	2b00      	cmp	r3, #0
   82b66:	f43f ae23 	beq.w	827b0 <_vfiprintf_r+0x384>
   82b6a:	2202      	movs	r2, #2
   82b6c:	4608      	mov	r0, r1
   82b6e:	46d1      	mov	r9, sl
   82b70:	ab0e      	add	r3, sp, #56	; 0x38
   82b72:	921d      	str	r2, [sp, #116]	; 0x74
   82b74:	931c      	str	r3, [sp, #112]	; 0x70
   82b76:	4601      	mov	r1, r0
   82b78:	f109 0908 	add.w	r9, r9, #8
   82b7c:	3001      	adds	r0, #1
   82b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82b80:	2b80      	cmp	r3, #128	; 0x80
   82b82:	f43f ae1c 	beq.w	827be <_vfiprintf_r+0x392>
   82b86:	9b05      	ldr	r3, [sp, #20]
   82b88:	1ae4      	subs	r4, r4, r3
   82b8a:	2c00      	cmp	r4, #0
   82b8c:	dd2f      	ble.n	82bee <_vfiprintf_r+0x7c2>
   82b8e:	2c10      	cmp	r4, #16
   82b90:	f340 8220 	ble.w	82fd4 <_vfiprintf_r+0xba8>
   82b94:	46ce      	mov	lr, r9
   82b96:	2610      	movs	r6, #16
   82b98:	4db2      	ldr	r5, [pc, #712]	; (82e64 <_vfiprintf_r+0xa38>)
   82b9a:	9f06      	ldr	r7, [sp, #24]
   82b9c:	f8dd 9010 	ldr.w	r9, [sp, #16]
   82ba0:	e006      	b.n	82bb0 <_vfiprintf_r+0x784>
   82ba2:	1c88      	adds	r0, r1, #2
   82ba4:	4619      	mov	r1, r3
   82ba6:	f10e 0e08 	add.w	lr, lr, #8
   82baa:	3c10      	subs	r4, #16
   82bac:	2c10      	cmp	r4, #16
   82bae:	dd10      	ble.n	82bd2 <_vfiprintf_r+0x7a6>
   82bb0:	1c4b      	adds	r3, r1, #1
   82bb2:	3210      	adds	r2, #16
   82bb4:	2b07      	cmp	r3, #7
   82bb6:	9211      	str	r2, [sp, #68]	; 0x44
   82bb8:	e88e 0060 	stmia.w	lr, {r5, r6}
   82bbc:	9310      	str	r3, [sp, #64]	; 0x40
   82bbe:	ddf0      	ble.n	82ba2 <_vfiprintf_r+0x776>
   82bc0:	2a00      	cmp	r2, #0
   82bc2:	d165      	bne.n	82c90 <_vfiprintf_r+0x864>
   82bc4:	3c10      	subs	r4, #16
   82bc6:	2c10      	cmp	r4, #16
   82bc8:	f04f 0001 	mov.w	r0, #1
   82bcc:	4611      	mov	r1, r2
   82bce:	46d6      	mov	lr, sl
   82bd0:	dcee      	bgt.n	82bb0 <_vfiprintf_r+0x784>
   82bd2:	46f1      	mov	r9, lr
   82bd4:	4422      	add	r2, r4
   82bd6:	2807      	cmp	r0, #7
   82bd8:	9211      	str	r2, [sp, #68]	; 0x44
   82bda:	f8c9 5000 	str.w	r5, [r9]
   82bde:	f8c9 4004 	str.w	r4, [r9, #4]
   82be2:	9010      	str	r0, [sp, #64]	; 0x40
   82be4:	f300 8085 	bgt.w	82cf2 <_vfiprintf_r+0x8c6>
   82be8:	f109 0908 	add.w	r9, r9, #8
   82bec:	3001      	adds	r0, #1
   82bee:	9905      	ldr	r1, [sp, #20]
   82bf0:	2807      	cmp	r0, #7
   82bf2:	440a      	add	r2, r1
   82bf4:	9211      	str	r2, [sp, #68]	; 0x44
   82bf6:	f8c9 b000 	str.w	fp, [r9]
   82bfa:	f8c9 1004 	str.w	r1, [r9, #4]
   82bfe:	9010      	str	r0, [sp, #64]	; 0x40
   82c00:	f340 8082 	ble.w	82d08 <_vfiprintf_r+0x8dc>
   82c04:	2a00      	cmp	r2, #0
   82c06:	f040 8118 	bne.w	82e3a <_vfiprintf_r+0xa0e>
   82c0a:	9b02      	ldr	r3, [sp, #8]
   82c0c:	9210      	str	r2, [sp, #64]	; 0x40
   82c0e:	0758      	lsls	r0, r3, #29
   82c10:	d535      	bpl.n	82c7e <_vfiprintf_r+0x852>
   82c12:	9b08      	ldr	r3, [sp, #32]
   82c14:	9901      	ldr	r1, [sp, #4]
   82c16:	1a5c      	subs	r4, r3, r1
   82c18:	2c00      	cmp	r4, #0
   82c1a:	f340 80e7 	ble.w	82dec <_vfiprintf_r+0x9c0>
   82c1e:	46d1      	mov	r9, sl
   82c20:	2c10      	cmp	r4, #16
   82c22:	f340 820d 	ble.w	83040 <_vfiprintf_r+0xc14>
   82c26:	2510      	movs	r5, #16
   82c28:	9910      	ldr	r1, [sp, #64]	; 0x40
   82c2a:	4e8f      	ldr	r6, [pc, #572]	; (82e68 <_vfiprintf_r+0xa3c>)
   82c2c:	9f06      	ldr	r7, [sp, #24]
   82c2e:	f8dd b010 	ldr.w	fp, [sp, #16]
   82c32:	e006      	b.n	82c42 <_vfiprintf_r+0x816>
   82c34:	1c88      	adds	r0, r1, #2
   82c36:	4619      	mov	r1, r3
   82c38:	f109 0908 	add.w	r9, r9, #8
   82c3c:	3c10      	subs	r4, #16
   82c3e:	2c10      	cmp	r4, #16
   82c40:	dd11      	ble.n	82c66 <_vfiprintf_r+0x83a>
   82c42:	1c4b      	adds	r3, r1, #1
   82c44:	3210      	adds	r2, #16
   82c46:	2b07      	cmp	r3, #7
   82c48:	9211      	str	r2, [sp, #68]	; 0x44
   82c4a:	f8c9 6000 	str.w	r6, [r9]
   82c4e:	f8c9 5004 	str.w	r5, [r9, #4]
   82c52:	9310      	str	r3, [sp, #64]	; 0x40
   82c54:	ddee      	ble.n	82c34 <_vfiprintf_r+0x808>
   82c56:	bb42      	cbnz	r2, 82caa <_vfiprintf_r+0x87e>
   82c58:	3c10      	subs	r4, #16
   82c5a:	2c10      	cmp	r4, #16
   82c5c:	f04f 0001 	mov.w	r0, #1
   82c60:	4611      	mov	r1, r2
   82c62:	46d1      	mov	r9, sl
   82c64:	dced      	bgt.n	82c42 <_vfiprintf_r+0x816>
   82c66:	4422      	add	r2, r4
   82c68:	2807      	cmp	r0, #7
   82c6a:	9211      	str	r2, [sp, #68]	; 0x44
   82c6c:	f8c9 6000 	str.w	r6, [r9]
   82c70:	f8c9 4004 	str.w	r4, [r9, #4]
   82c74:	9010      	str	r0, [sp, #64]	; 0x40
   82c76:	dd51      	ble.n	82d1c <_vfiprintf_r+0x8f0>
   82c78:	2a00      	cmp	r2, #0
   82c7a:	f040 819a 	bne.w	82fb2 <_vfiprintf_r+0xb86>
   82c7e:	9b03      	ldr	r3, [sp, #12]
   82c80:	9a08      	ldr	r2, [sp, #32]
   82c82:	9901      	ldr	r1, [sp, #4]
   82c84:	428a      	cmp	r2, r1
   82c86:	bfac      	ite	ge
   82c88:	189b      	addge	r3, r3, r2
   82c8a:	185b      	addlt	r3, r3, r1
   82c8c:	9303      	str	r3, [sp, #12]
   82c8e:	e04e      	b.n	82d2e <_vfiprintf_r+0x902>
   82c90:	aa0f      	add	r2, sp, #60	; 0x3c
   82c92:	4649      	mov	r1, r9
   82c94:	4638      	mov	r0, r7
   82c96:	f7ff fb89 	bl	823ac <__sprint_r.part.0>
   82c9a:	2800      	cmp	r0, #0
   82c9c:	f040 813e 	bne.w	82f1c <_vfiprintf_r+0xaf0>
   82ca0:	9910      	ldr	r1, [sp, #64]	; 0x40
   82ca2:	46d6      	mov	lr, sl
   82ca4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82ca6:	1c48      	adds	r0, r1, #1
   82ca8:	e77f      	b.n	82baa <_vfiprintf_r+0x77e>
   82caa:	aa0f      	add	r2, sp, #60	; 0x3c
   82cac:	4659      	mov	r1, fp
   82cae:	4638      	mov	r0, r7
   82cb0:	f7ff fb7c 	bl	823ac <__sprint_r.part.0>
   82cb4:	b960      	cbnz	r0, 82cd0 <_vfiprintf_r+0x8a4>
   82cb6:	9910      	ldr	r1, [sp, #64]	; 0x40
   82cb8:	46d1      	mov	r9, sl
   82cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82cbc:	1c48      	adds	r0, r1, #1
   82cbe:	e7bd      	b.n	82c3c <_vfiprintf_r+0x810>
   82cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82cc2:	f8dd b010 	ldr.w	fp, [sp, #16]
   82cc6:	2b00      	cmp	r3, #0
   82cc8:	f040 81ca 	bne.w	83060 <_vfiprintf_r+0xc34>
   82ccc:	2300      	movs	r3, #0
   82cce:	9310      	str	r3, [sp, #64]	; 0x40
   82cd0:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82cd4:	f013 0f01 	tst.w	r3, #1
   82cd8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82cdc:	d102      	bne.n	82ce4 <_vfiprintf_r+0x8b8>
   82cde:	059a      	lsls	r2, r3, #22
   82ce0:	f140 80dd 	bpl.w	82e9e <_vfiprintf_r+0xa72>
   82ce4:	065b      	lsls	r3, r3, #25
   82ce6:	f53f acad 	bmi.w	82644 <_vfiprintf_r+0x218>
   82cea:	9803      	ldr	r0, [sp, #12]
   82cec:	b02d      	add	sp, #180	; 0xb4
   82cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cf2:	2a00      	cmp	r2, #0
   82cf4:	f040 8105 	bne.w	82f02 <_vfiprintf_r+0xad6>
   82cf8:	2301      	movs	r3, #1
   82cfa:	46d1      	mov	r9, sl
   82cfc:	9a05      	ldr	r2, [sp, #20]
   82cfe:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   82d02:	921d      	str	r2, [sp, #116]	; 0x74
   82d04:	9211      	str	r2, [sp, #68]	; 0x44
   82d06:	9310      	str	r3, [sp, #64]	; 0x40
   82d08:	f109 0908 	add.w	r9, r9, #8
   82d0c:	9b02      	ldr	r3, [sp, #8]
   82d0e:	0759      	lsls	r1, r3, #29
   82d10:	d504      	bpl.n	82d1c <_vfiprintf_r+0x8f0>
   82d12:	9b08      	ldr	r3, [sp, #32]
   82d14:	9901      	ldr	r1, [sp, #4]
   82d16:	1a5c      	subs	r4, r3, r1
   82d18:	2c00      	cmp	r4, #0
   82d1a:	dc81      	bgt.n	82c20 <_vfiprintf_r+0x7f4>
   82d1c:	9b03      	ldr	r3, [sp, #12]
   82d1e:	9908      	ldr	r1, [sp, #32]
   82d20:	9801      	ldr	r0, [sp, #4]
   82d22:	4281      	cmp	r1, r0
   82d24:	bfac      	ite	ge
   82d26:	185b      	addge	r3, r3, r1
   82d28:	181b      	addlt	r3, r3, r0
   82d2a:	9303      	str	r3, [sp, #12]
   82d2c:	bb72      	cbnz	r2, 82d8c <_vfiprintf_r+0x960>
   82d2e:	2300      	movs	r3, #0
   82d30:	46d1      	mov	r9, sl
   82d32:	9310      	str	r3, [sp, #64]	; 0x40
   82d34:	f7ff bbb7 	b.w	824a6 <_vfiprintf_r+0x7a>
   82d38:	aa0f      	add	r2, sp, #60	; 0x3c
   82d3a:	9904      	ldr	r1, [sp, #16]
   82d3c:	4620      	mov	r0, r4
   82d3e:	f7ff fb35 	bl	823ac <__sprint_r.part.0>
   82d42:	bb50      	cbnz	r0, 82d9a <_vfiprintf_r+0x96e>
   82d44:	9910      	ldr	r1, [sp, #64]	; 0x40
   82d46:	46d4      	mov	ip, sl
   82d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d4a:	f101 0e01 	add.w	lr, r1, #1
   82d4e:	e54a      	b.n	827e6 <_vfiprintf_r+0x3ba>
   82d50:	2a00      	cmp	r2, #0
   82d52:	f47f aee5 	bne.w	82b20 <_vfiprintf_r+0x6f4>
   82d56:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82d5a:	2900      	cmp	r1, #0
   82d5c:	f000 811a 	beq.w	82f94 <_vfiprintf_r+0xb68>
   82d60:	2201      	movs	r2, #1
   82d62:	46d1      	mov	r9, sl
   82d64:	4610      	mov	r0, r2
   82d66:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82d6a:	921d      	str	r2, [sp, #116]	; 0x74
   82d6c:	911c      	str	r1, [sp, #112]	; 0x70
   82d6e:	4601      	mov	r1, r0
   82d70:	f109 0908 	add.w	r9, r9, #8
   82d74:	3001      	adds	r0, #1
   82d76:	e508      	b.n	8278a <_vfiprintf_r+0x35e>
   82d78:	9b02      	ldr	r3, [sp, #8]
   82d7a:	2a01      	cmp	r2, #1
   82d7c:	f000 8097 	beq.w	82eae <_vfiprintf_r+0xa82>
   82d80:	2a02      	cmp	r2, #2
   82d82:	d10d      	bne.n	82da0 <_vfiprintf_r+0x974>
   82d84:	9302      	str	r3, [sp, #8]
   82d86:	2600      	movs	r6, #0
   82d88:	2700      	movs	r7, #0
   82d8a:	e5b2      	b.n	828f2 <_vfiprintf_r+0x4c6>
   82d8c:	aa0f      	add	r2, sp, #60	; 0x3c
   82d8e:	9904      	ldr	r1, [sp, #16]
   82d90:	9806      	ldr	r0, [sp, #24]
   82d92:	f7ff fb0b 	bl	823ac <__sprint_r.part.0>
   82d96:	2800      	cmp	r0, #0
   82d98:	d0c9      	beq.n	82d2e <_vfiprintf_r+0x902>
   82d9a:	f8dd b010 	ldr.w	fp, [sp, #16]
   82d9e:	e797      	b.n	82cd0 <_vfiprintf_r+0x8a4>
   82da0:	2600      	movs	r6, #0
   82da2:	2700      	movs	r7, #0
   82da4:	9302      	str	r3, [sp, #8]
   82da6:	4651      	mov	r1, sl
   82da8:	e000      	b.n	82dac <_vfiprintf_r+0x980>
   82daa:	4659      	mov	r1, fp
   82dac:	08f2      	lsrs	r2, r6, #3
   82dae:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   82db2:	08f8      	lsrs	r0, r7, #3
   82db4:	f006 0307 	and.w	r3, r6, #7
   82db8:	4607      	mov	r7, r0
   82dba:	4616      	mov	r6, r2
   82dbc:	3330      	adds	r3, #48	; 0x30
   82dbe:	ea56 0207 	orrs.w	r2, r6, r7
   82dc2:	f801 3c01 	strb.w	r3, [r1, #-1]
   82dc6:	f101 3bff 	add.w	fp, r1, #4294967295
   82dca:	d1ee      	bne.n	82daa <_vfiprintf_r+0x97e>
   82dcc:	9a02      	ldr	r2, [sp, #8]
   82dce:	07d6      	lsls	r6, r2, #31
   82dd0:	f57f ad9f 	bpl.w	82912 <_vfiprintf_r+0x4e6>
   82dd4:	2b30      	cmp	r3, #48	; 0x30
   82dd6:	f43f ad9c 	beq.w	82912 <_vfiprintf_r+0x4e6>
   82dda:	2330      	movs	r3, #48	; 0x30
   82ddc:	3902      	subs	r1, #2
   82dde:	f80b 3c01 	strb.w	r3, [fp, #-1]
   82de2:	ebaa 0301 	sub.w	r3, sl, r1
   82de6:	9305      	str	r3, [sp, #20]
   82de8:	468b      	mov	fp, r1
   82dea:	e477      	b.n	826dc <_vfiprintf_r+0x2b0>
   82dec:	9b03      	ldr	r3, [sp, #12]
   82dee:	9a08      	ldr	r2, [sp, #32]
   82df0:	428a      	cmp	r2, r1
   82df2:	bfac      	ite	ge
   82df4:	189b      	addge	r3, r3, r2
   82df6:	185b      	addlt	r3, r3, r1
   82df8:	9303      	str	r3, [sp, #12]
   82dfa:	e798      	b.n	82d2e <_vfiprintf_r+0x902>
   82dfc:	2202      	movs	r2, #2
   82dfe:	e44e      	b.n	8269e <_vfiprintf_r+0x272>
   82e00:	2f00      	cmp	r7, #0
   82e02:	bf08      	it	eq
   82e04:	2e0a      	cmpeq	r6, #10
   82e06:	d351      	bcc.n	82eac <_vfiprintf_r+0xa80>
   82e08:	46d3      	mov	fp, sl
   82e0a:	4630      	mov	r0, r6
   82e0c:	4639      	mov	r1, r7
   82e0e:	220a      	movs	r2, #10
   82e10:	2300      	movs	r3, #0
   82e12:	f7fe ffe9 	bl	81de8 <__aeabi_uldivmod>
   82e16:	3230      	adds	r2, #48	; 0x30
   82e18:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82e1c:	4630      	mov	r0, r6
   82e1e:	4639      	mov	r1, r7
   82e20:	2300      	movs	r3, #0
   82e22:	220a      	movs	r2, #10
   82e24:	f7fe ffe0 	bl	81de8 <__aeabi_uldivmod>
   82e28:	4606      	mov	r6, r0
   82e2a:	460f      	mov	r7, r1
   82e2c:	ea56 0307 	orrs.w	r3, r6, r7
   82e30:	d1eb      	bne.n	82e0a <_vfiprintf_r+0x9de>
   82e32:	e56e      	b.n	82912 <_vfiprintf_r+0x4e6>
   82e34:	9405      	str	r4, [sp, #20]
   82e36:	46d3      	mov	fp, sl
   82e38:	e450      	b.n	826dc <_vfiprintf_r+0x2b0>
   82e3a:	aa0f      	add	r2, sp, #60	; 0x3c
   82e3c:	9904      	ldr	r1, [sp, #16]
   82e3e:	9806      	ldr	r0, [sp, #24]
   82e40:	f7ff fab4 	bl	823ac <__sprint_r.part.0>
   82e44:	2800      	cmp	r0, #0
   82e46:	d1a8      	bne.n	82d9a <_vfiprintf_r+0x96e>
   82e48:	46d1      	mov	r9, sl
   82e4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82e4c:	e75e      	b.n	82d0c <_vfiprintf_r+0x8e0>
   82e4e:	aa0f      	add	r2, sp, #60	; 0x3c
   82e50:	9904      	ldr	r1, [sp, #16]
   82e52:	9806      	ldr	r0, [sp, #24]
   82e54:	f7ff faaa 	bl	823ac <__sprint_r.part.0>
   82e58:	2800      	cmp	r0, #0
   82e5a:	d19e      	bne.n	82d9a <_vfiprintf_r+0x96e>
   82e5c:	46d1      	mov	r9, sl
   82e5e:	f7ff bbbb 	b.w	825d8 <_vfiprintf_r+0x1ac>
   82e62:	bf00      	nop
   82e64:	00084cf4 	.word	0x00084cf4
   82e68:	00084ce4 	.word	0x00084ce4
   82e6c:	3104      	adds	r1, #4
   82e6e:	6816      	ldr	r6, [r2, #0]
   82e70:	2700      	movs	r7, #0
   82e72:	2201      	movs	r2, #1
   82e74:	9107      	str	r1, [sp, #28]
   82e76:	e412      	b.n	8269e <_vfiprintf_r+0x272>
   82e78:	9807      	ldr	r0, [sp, #28]
   82e7a:	2700      	movs	r7, #0
   82e7c:	4601      	mov	r1, r0
   82e7e:	3104      	adds	r1, #4
   82e80:	6806      	ldr	r6, [r0, #0]
   82e82:	9107      	str	r1, [sp, #28]
   82e84:	e40b      	b.n	8269e <_vfiprintf_r+0x272>
   82e86:	680e      	ldr	r6, [r1, #0]
   82e88:	3104      	adds	r1, #4
   82e8a:	9107      	str	r1, [sp, #28]
   82e8c:	2700      	movs	r7, #0
   82e8e:	e592      	b.n	829b6 <_vfiprintf_r+0x58a>
   82e90:	6816      	ldr	r6, [r2, #0]
   82e92:	3204      	adds	r2, #4
   82e94:	17f7      	asrs	r7, r6, #31
   82e96:	9207      	str	r2, [sp, #28]
   82e98:	4630      	mov	r0, r6
   82e9a:	4639      	mov	r1, r7
   82e9c:	e512      	b.n	828c4 <_vfiprintf_r+0x498>
   82e9e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82ea2:	f000 fe75 	bl	83b90 <__retarget_lock_release_recursive>
   82ea6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82eaa:	e71b      	b.n	82ce4 <_vfiprintf_r+0x8b8>
   82eac:	9b02      	ldr	r3, [sp, #8]
   82eae:	9302      	str	r3, [sp, #8]
   82eb0:	2301      	movs	r3, #1
   82eb2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82eb6:	3630      	adds	r6, #48	; 0x30
   82eb8:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82ebc:	9305      	str	r3, [sp, #20]
   82ebe:	e40d      	b.n	826dc <_vfiprintf_r+0x2b0>
   82ec0:	aa0f      	add	r2, sp, #60	; 0x3c
   82ec2:	9904      	ldr	r1, [sp, #16]
   82ec4:	9806      	ldr	r0, [sp, #24]
   82ec6:	f7ff fa71 	bl	823ac <__sprint_r.part.0>
   82eca:	2800      	cmp	r0, #0
   82ecc:	f47f af65 	bne.w	82d9a <_vfiprintf_r+0x96e>
   82ed0:	9910      	ldr	r1, [sp, #64]	; 0x40
   82ed2:	46d1      	mov	r9, sl
   82ed4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82ed6:	1c48      	adds	r0, r1, #1
   82ed8:	e457      	b.n	8278a <_vfiprintf_r+0x35e>
   82eda:	aa0f      	add	r2, sp, #60	; 0x3c
   82edc:	9904      	ldr	r1, [sp, #16]
   82ede:	9806      	ldr	r0, [sp, #24]
   82ee0:	f7ff fa64 	bl	823ac <__sprint_r.part.0>
   82ee4:	2800      	cmp	r0, #0
   82ee6:	f47f af58 	bne.w	82d9a <_vfiprintf_r+0x96e>
   82eea:	9910      	ldr	r1, [sp, #64]	; 0x40
   82eec:	46d1      	mov	r9, sl
   82eee:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82ef0:	1c48      	adds	r0, r1, #1
   82ef2:	e644      	b.n	82b7e <_vfiprintf_r+0x752>
   82ef4:	2a00      	cmp	r2, #0
   82ef6:	f040 8087 	bne.w	83008 <_vfiprintf_r+0xbdc>
   82efa:	2001      	movs	r0, #1
   82efc:	4611      	mov	r1, r2
   82efe:	46d1      	mov	r9, sl
   82f00:	e641      	b.n	82b86 <_vfiprintf_r+0x75a>
   82f02:	aa0f      	add	r2, sp, #60	; 0x3c
   82f04:	9904      	ldr	r1, [sp, #16]
   82f06:	9806      	ldr	r0, [sp, #24]
   82f08:	f7ff fa50 	bl	823ac <__sprint_r.part.0>
   82f0c:	2800      	cmp	r0, #0
   82f0e:	f47f af44 	bne.w	82d9a <_vfiprintf_r+0x96e>
   82f12:	9810      	ldr	r0, [sp, #64]	; 0x40
   82f14:	46d1      	mov	r9, sl
   82f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82f18:	3001      	adds	r0, #1
   82f1a:	e668      	b.n	82bee <_vfiprintf_r+0x7c2>
   82f1c:	46cb      	mov	fp, r9
   82f1e:	e6d7      	b.n	82cd0 <_vfiprintf_r+0x8a4>
   82f20:	9d07      	ldr	r5, [sp, #28]
   82f22:	3507      	adds	r5, #7
   82f24:	f025 0507 	bic.w	r5, r5, #7
   82f28:	f105 0208 	add.w	r2, r5, #8
   82f2c:	e9d5 0100 	ldrd	r0, r1, [r5]
   82f30:	9207      	str	r2, [sp, #28]
   82f32:	4606      	mov	r6, r0
   82f34:	460f      	mov	r7, r1
   82f36:	e4c5      	b.n	828c4 <_vfiprintf_r+0x498>
   82f38:	9d07      	ldr	r5, [sp, #28]
   82f3a:	3507      	adds	r5, #7
   82f3c:	f025 0207 	bic.w	r2, r5, #7
   82f40:	f102 0108 	add.w	r1, r2, #8
   82f44:	e9d2 6700 	ldrd	r6, r7, [r2]
   82f48:	9107      	str	r1, [sp, #28]
   82f4a:	2201      	movs	r2, #1
   82f4c:	f7ff bba7 	b.w	8269e <_vfiprintf_r+0x272>
   82f50:	9d07      	ldr	r5, [sp, #28]
   82f52:	3507      	adds	r5, #7
   82f54:	f025 0207 	bic.w	r2, r5, #7
   82f58:	f102 0108 	add.w	r1, r2, #8
   82f5c:	e9d2 6700 	ldrd	r6, r7, [r2]
   82f60:	9107      	str	r1, [sp, #28]
   82f62:	2200      	movs	r2, #0
   82f64:	f7ff bb9b 	b.w	8269e <_vfiprintf_r+0x272>
   82f68:	9d07      	ldr	r5, [sp, #28]
   82f6a:	3507      	adds	r5, #7
   82f6c:	f025 0107 	bic.w	r1, r5, #7
   82f70:	f101 0008 	add.w	r0, r1, #8
   82f74:	9007      	str	r0, [sp, #28]
   82f76:	e9d1 6700 	ldrd	r6, r7, [r1]
   82f7a:	e51c      	b.n	829b6 <_vfiprintf_r+0x58a>
   82f7c:	46d3      	mov	fp, sl
   82f7e:	f7ff bbad 	b.w	826dc <_vfiprintf_r+0x2b0>
   82f82:	252d      	movs	r5, #45	; 0x2d
   82f84:	4276      	negs	r6, r6
   82f86:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82f8a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82f8e:	2201      	movs	r2, #1
   82f90:	f7ff bb8a 	b.w	826a8 <_vfiprintf_r+0x27c>
   82f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82f96:	b9b3      	cbnz	r3, 82fc6 <_vfiprintf_r+0xb9a>
   82f98:	4611      	mov	r1, r2
   82f9a:	2001      	movs	r0, #1
   82f9c:	46d1      	mov	r9, sl
   82f9e:	e5f2      	b.n	82b86 <_vfiprintf_r+0x75a>
   82fa0:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82fa4:	f000 fdf4 	bl	83b90 <__retarget_lock_release_recursive>
   82fa8:	f04f 33ff 	mov.w	r3, #4294967295
   82fac:	9303      	str	r3, [sp, #12]
   82fae:	f7ff bb4c 	b.w	8264a <_vfiprintf_r+0x21e>
   82fb2:	aa0f      	add	r2, sp, #60	; 0x3c
   82fb4:	9904      	ldr	r1, [sp, #16]
   82fb6:	9806      	ldr	r0, [sp, #24]
   82fb8:	f7ff f9f8 	bl	823ac <__sprint_r.part.0>
   82fbc:	2800      	cmp	r0, #0
   82fbe:	f47f aeec 	bne.w	82d9a <_vfiprintf_r+0x96e>
   82fc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82fc4:	e6aa      	b.n	82d1c <_vfiprintf_r+0x8f0>
   82fc6:	2202      	movs	r2, #2
   82fc8:	ab0e      	add	r3, sp, #56	; 0x38
   82fca:	921d      	str	r2, [sp, #116]	; 0x74
   82fcc:	931c      	str	r3, [sp, #112]	; 0x70
   82fce:	2001      	movs	r0, #1
   82fd0:	46d1      	mov	r9, sl
   82fd2:	e5d0      	b.n	82b76 <_vfiprintf_r+0x74a>
   82fd4:	4d34      	ldr	r5, [pc, #208]	; (830a8 <_vfiprintf_r+0xc7c>)
   82fd6:	e5fd      	b.n	82bd4 <_vfiprintf_r+0x7a8>
   82fd8:	9a07      	ldr	r2, [sp, #28]
   82fda:	4613      	mov	r3, r2
   82fdc:	3304      	adds	r3, #4
   82fde:	9307      	str	r3, [sp, #28]
   82fe0:	9b03      	ldr	r3, [sp, #12]
   82fe2:	6811      	ldr	r1, [r2, #0]
   82fe4:	17dd      	asrs	r5, r3, #31
   82fe6:	461a      	mov	r2, r3
   82fe8:	462b      	mov	r3, r5
   82fea:	e9c1 2300 	strd	r2, r3, [r1]
   82fee:	f7ff ba5a 	b.w	824a6 <_vfiprintf_r+0x7a>
   82ff2:	4658      	mov	r0, fp
   82ff4:	9507      	str	r5, [sp, #28]
   82ff6:	9302      	str	r3, [sp, #8]
   82ff8:	f001 fc3c 	bl	84874 <strlen>
   82ffc:	2400      	movs	r4, #0
   82ffe:	9005      	str	r0, [sp, #20]
   83000:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83004:	f7ff bb6a 	b.w	826dc <_vfiprintf_r+0x2b0>
   83008:	aa0f      	add	r2, sp, #60	; 0x3c
   8300a:	9904      	ldr	r1, [sp, #16]
   8300c:	9806      	ldr	r0, [sp, #24]
   8300e:	f7ff f9cd 	bl	823ac <__sprint_r.part.0>
   83012:	2800      	cmp	r0, #0
   83014:	f47f aec1 	bne.w	82d9a <_vfiprintf_r+0x96e>
   83018:	9910      	ldr	r1, [sp, #64]	; 0x40
   8301a:	46d1      	mov	r9, sl
   8301c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8301e:	1c48      	adds	r0, r1, #1
   83020:	e5b1      	b.n	82b86 <_vfiprintf_r+0x75a>
   83022:	9910      	ldr	r1, [sp, #64]	; 0x40
   83024:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83026:	3101      	adds	r1, #1
   83028:	4e20      	ldr	r6, [pc, #128]	; (830ac <_vfiprintf_r+0xc80>)
   8302a:	f7ff bb9c 	b.w	82766 <_vfiprintf_r+0x33a>
   8302e:	2c06      	cmp	r4, #6
   83030:	bf28      	it	cs
   83032:	2406      	movcs	r4, #6
   83034:	9507      	str	r5, [sp, #28]
   83036:	9405      	str	r4, [sp, #20]
   83038:	9401      	str	r4, [sp, #4]
   8303a:	f8df b074 	ldr.w	fp, [pc, #116]	; 830b0 <_vfiprintf_r+0xc84>
   8303e:	e4e3      	b.n	82a08 <_vfiprintf_r+0x5dc>
   83040:	9810      	ldr	r0, [sp, #64]	; 0x40
   83042:	4e1a      	ldr	r6, [pc, #104]	; (830ac <_vfiprintf_r+0xc80>)
   83044:	3001      	adds	r0, #1
   83046:	e60e      	b.n	82c66 <_vfiprintf_r+0x83a>
   83048:	4686      	mov	lr, r0
   8304a:	4d17      	ldr	r5, [pc, #92]	; (830a8 <_vfiprintf_r+0xc7c>)
   8304c:	f7ff bbe2 	b.w	82814 <_vfiprintf_r+0x3e8>
   83050:	9405      	str	r4, [sp, #20]
   83052:	9507      	str	r5, [sp, #28]
   83054:	9302      	str	r3, [sp, #8]
   83056:	4604      	mov	r4, r0
   83058:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8305c:	f7ff bb3e 	b.w	826dc <_vfiprintf_r+0x2b0>
   83060:	9806      	ldr	r0, [sp, #24]
   83062:	aa0f      	add	r2, sp, #60	; 0x3c
   83064:	4659      	mov	r1, fp
   83066:	f7ff f9a1 	bl	823ac <__sprint_r.part.0>
   8306a:	2800      	cmp	r0, #0
   8306c:	f43f ae2e 	beq.w	82ccc <_vfiprintf_r+0x8a0>
   83070:	e62e      	b.n	82cd0 <_vfiprintf_r+0x8a4>
   83072:	9907      	ldr	r1, [sp, #28]
   83074:	f898 2001 	ldrb.w	r2, [r8, #1]
   83078:	680c      	ldr	r4, [r1, #0]
   8307a:	3104      	adds	r1, #4
   8307c:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   83080:	46b8      	mov	r8, r7
   83082:	9107      	str	r1, [sp, #28]
   83084:	f7ff ba44 	b.w	82510 <_vfiprintf_r+0xe4>
   83088:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8308c:	e4a7      	b.n	829de <_vfiprintf_r+0x5b2>
   8308e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83092:	e521      	b.n	82ad8 <_vfiprintf_r+0x6ac>
   83094:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83098:	e47c      	b.n	82994 <_vfiprintf_r+0x568>
   8309a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8309e:	e43f      	b.n	82920 <_vfiprintf_r+0x4f4>
   830a0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   830a4:	f7ff bbfa 	b.w	8289c <_vfiprintf_r+0x470>
   830a8:	00084cf4 	.word	0x00084cf4
   830ac:	00084ce4 	.word	0x00084ce4
   830b0:	00084cdc 	.word	0x00084cdc

000830b4 <__sbprintf>:
   830b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   830b8:	460c      	mov	r4, r1
   830ba:	f04f 0e00 	mov.w	lr, #0
   830be:	f44f 6580 	mov.w	r5, #1024	; 0x400
   830c2:	4606      	mov	r6, r0
   830c4:	4617      	mov	r7, r2
   830c6:	4698      	mov	r8, r3
   830c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   830ca:	89e3      	ldrh	r3, [r4, #14]
   830cc:	8989      	ldrh	r1, [r1, #12]
   830ce:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   830d2:	f021 0102 	bic.w	r1, r1, #2
   830d6:	9219      	str	r2, [sp, #100]	; 0x64
   830d8:	f8ad 300e 	strh.w	r3, [sp, #14]
   830dc:	69e2      	ldr	r2, [r4, #28]
   830de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   830e0:	f8ad 100c 	strh.w	r1, [sp, #12]
   830e4:	a816      	add	r0, sp, #88	; 0x58
   830e6:	a91a      	add	r1, sp, #104	; 0x68
   830e8:	f8cd e018 	str.w	lr, [sp, #24]
   830ec:	9207      	str	r2, [sp, #28]
   830ee:	9309      	str	r3, [sp, #36]	; 0x24
   830f0:	9100      	str	r1, [sp, #0]
   830f2:	9104      	str	r1, [sp, #16]
   830f4:	9502      	str	r5, [sp, #8]
   830f6:	9505      	str	r5, [sp, #20]
   830f8:	f000 fd44 	bl	83b84 <__retarget_lock_init_recursive>
   830fc:	4643      	mov	r3, r8
   830fe:	463a      	mov	r2, r7
   83100:	4669      	mov	r1, sp
   83102:	4630      	mov	r0, r6
   83104:	f7ff f992 	bl	8242c <_vfiprintf_r>
   83108:	1e05      	subs	r5, r0, #0
   8310a:	db07      	blt.n	8311c <__sbprintf+0x68>
   8310c:	4630      	mov	r0, r6
   8310e:	4669      	mov	r1, sp
   83110:	f000 f924 	bl	8335c <_fflush_r>
   83114:	2800      	cmp	r0, #0
   83116:	bf18      	it	ne
   83118:	f04f 35ff 	movne.w	r5, #4294967295
   8311c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83120:	065b      	lsls	r3, r3, #25
   83122:	d503      	bpl.n	8312c <__sbprintf+0x78>
   83124:	89a3      	ldrh	r3, [r4, #12]
   83126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8312a:	81a3      	strh	r3, [r4, #12]
   8312c:	9816      	ldr	r0, [sp, #88]	; 0x58
   8312e:	f000 fd2b 	bl	83b88 <__retarget_lock_close_recursive>
   83132:	4628      	mov	r0, r5
   83134:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008313c <__swsetup_r>:
   8313c:	b538      	push	{r3, r4, r5, lr}
   8313e:	4b30      	ldr	r3, [pc, #192]	; (83200 <__swsetup_r+0xc4>)
   83140:	4605      	mov	r5, r0
   83142:	6818      	ldr	r0, [r3, #0]
   83144:	460c      	mov	r4, r1
   83146:	b110      	cbz	r0, 8314e <__swsetup_r+0x12>
   83148:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8314a:	2b00      	cmp	r3, #0
   8314c:	d038      	beq.n	831c0 <__swsetup_r+0x84>
   8314e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83152:	b293      	uxth	r3, r2
   83154:	0718      	lsls	r0, r3, #28
   83156:	d50c      	bpl.n	83172 <__swsetup_r+0x36>
   83158:	6920      	ldr	r0, [r4, #16]
   8315a:	b1a8      	cbz	r0, 83188 <__swsetup_r+0x4c>
   8315c:	f013 0201 	ands.w	r2, r3, #1
   83160:	d01e      	beq.n	831a0 <__swsetup_r+0x64>
   83162:	2200      	movs	r2, #0
   83164:	6963      	ldr	r3, [r4, #20]
   83166:	60a2      	str	r2, [r4, #8]
   83168:	425b      	negs	r3, r3
   8316a:	61a3      	str	r3, [r4, #24]
   8316c:	b1f0      	cbz	r0, 831ac <__swsetup_r+0x70>
   8316e:	2000      	movs	r0, #0
   83170:	bd38      	pop	{r3, r4, r5, pc}
   83172:	06d9      	lsls	r1, r3, #27
   83174:	d53b      	bpl.n	831ee <__swsetup_r+0xb2>
   83176:	0758      	lsls	r0, r3, #29
   83178:	d425      	bmi.n	831c6 <__swsetup_r+0x8a>
   8317a:	6920      	ldr	r0, [r4, #16]
   8317c:	f042 0308 	orr.w	r3, r2, #8
   83180:	81a3      	strh	r3, [r4, #12]
   83182:	b29b      	uxth	r3, r3
   83184:	2800      	cmp	r0, #0
   83186:	d1e9      	bne.n	8315c <__swsetup_r+0x20>
   83188:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8318c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83190:	d0e4      	beq.n	8315c <__swsetup_r+0x20>
   83192:	4628      	mov	r0, r5
   83194:	4621      	mov	r1, r4
   83196:	f000 fd2b 	bl	83bf0 <__smakebuf_r>
   8319a:	89a3      	ldrh	r3, [r4, #12]
   8319c:	6920      	ldr	r0, [r4, #16]
   8319e:	e7dd      	b.n	8315c <__swsetup_r+0x20>
   831a0:	0799      	lsls	r1, r3, #30
   831a2:	bf58      	it	pl
   831a4:	6962      	ldrpl	r2, [r4, #20]
   831a6:	60a2      	str	r2, [r4, #8]
   831a8:	2800      	cmp	r0, #0
   831aa:	d1e0      	bne.n	8316e <__swsetup_r+0x32>
   831ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   831b0:	061a      	lsls	r2, r3, #24
   831b2:	d5dd      	bpl.n	83170 <__swsetup_r+0x34>
   831b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   831b8:	81a3      	strh	r3, [r4, #12]
   831ba:	f04f 30ff 	mov.w	r0, #4294967295
   831be:	bd38      	pop	{r3, r4, r5, pc}
   831c0:	f000 f924 	bl	8340c <__sinit>
   831c4:	e7c3      	b.n	8314e <__swsetup_r+0x12>
   831c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   831c8:	b151      	cbz	r1, 831e0 <__swsetup_r+0xa4>
   831ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
   831ce:	4299      	cmp	r1, r3
   831d0:	d004      	beq.n	831dc <__swsetup_r+0xa0>
   831d2:	4628      	mov	r0, r5
   831d4:	f000 fa40 	bl	83658 <_free_r>
   831d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   831dc:	2300      	movs	r3, #0
   831de:	6323      	str	r3, [r4, #48]	; 0x30
   831e0:	2300      	movs	r3, #0
   831e2:	6920      	ldr	r0, [r4, #16]
   831e4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   831e8:	e884 0009 	stmia.w	r4, {r0, r3}
   831ec:	e7c6      	b.n	8317c <__swsetup_r+0x40>
   831ee:	2309      	movs	r3, #9
   831f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   831f4:	602b      	str	r3, [r5, #0]
   831f6:	f04f 30ff 	mov.w	r0, #4294967295
   831fa:	81a2      	strh	r2, [r4, #12]
   831fc:	bd38      	pop	{r3, r4, r5, pc}
   831fe:	bf00      	nop
   83200:	20070140 	.word	0x20070140

00083204 <register_fini>:
   83204:	4b02      	ldr	r3, [pc, #8]	; (83210 <register_fini+0xc>)
   83206:	b113      	cbz	r3, 8320e <register_fini+0xa>
   83208:	4802      	ldr	r0, [pc, #8]	; (83214 <register_fini+0x10>)
   8320a:	f000 b805 	b.w	83218 <atexit>
   8320e:	4770      	bx	lr
   83210:	00000000 	.word	0x00000000
   83214:	00083485 	.word	0x00083485

00083218 <atexit>:
   83218:	2300      	movs	r3, #0
   8321a:	4601      	mov	r1, r0
   8321c:	461a      	mov	r2, r3
   8321e:	4618      	mov	r0, r3
   83220:	f001 bbfa 	b.w	84a18 <__register_exitproc>

00083224 <__sflush_r>:
   83224:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8322c:	b29a      	uxth	r2, r3
   8322e:	460d      	mov	r5, r1
   83230:	0711      	lsls	r1, r2, #28
   83232:	4680      	mov	r8, r0
   83234:	d43a      	bmi.n	832ac <__sflush_r+0x88>
   83236:	686a      	ldr	r2, [r5, #4]
   83238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8323c:	2a00      	cmp	r2, #0
   8323e:	81ab      	strh	r3, [r5, #12]
   83240:	dd70      	ble.n	83324 <__sflush_r+0x100>
   83242:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83244:	2c00      	cmp	r4, #0
   83246:	d04a      	beq.n	832de <__sflush_r+0xba>
   83248:	2200      	movs	r2, #0
   8324a:	b29b      	uxth	r3, r3
   8324c:	f8d8 6000 	ldr.w	r6, [r8]
   83250:	f8c8 2000 	str.w	r2, [r8]
   83254:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   83258:	d068      	beq.n	8332c <__sflush_r+0x108>
   8325a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8325c:	075f      	lsls	r7, r3, #29
   8325e:	d505      	bpl.n	8326c <__sflush_r+0x48>
   83260:	6869      	ldr	r1, [r5, #4]
   83262:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83264:	1a52      	subs	r2, r2, r1
   83266:	b10b      	cbz	r3, 8326c <__sflush_r+0x48>
   83268:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8326a:	1ad2      	subs	r2, r2, r3
   8326c:	2300      	movs	r3, #0
   8326e:	69e9      	ldr	r1, [r5, #28]
   83270:	4640      	mov	r0, r8
   83272:	47a0      	blx	r4
   83274:	1c44      	adds	r4, r0, #1
   83276:	d03d      	beq.n	832f4 <__sflush_r+0xd0>
   83278:	2100      	movs	r1, #0
   8327a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8327e:	692a      	ldr	r2, [r5, #16]
   83280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83284:	81ab      	strh	r3, [r5, #12]
   83286:	04db      	lsls	r3, r3, #19
   83288:	6069      	str	r1, [r5, #4]
   8328a:	602a      	str	r2, [r5, #0]
   8328c:	d448      	bmi.n	83320 <__sflush_r+0xfc>
   8328e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83290:	f8c8 6000 	str.w	r6, [r8]
   83294:	b319      	cbz	r1, 832de <__sflush_r+0xba>
   83296:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8329a:	4299      	cmp	r1, r3
   8329c:	d002      	beq.n	832a4 <__sflush_r+0x80>
   8329e:	4640      	mov	r0, r8
   832a0:	f000 f9da 	bl	83658 <_free_r>
   832a4:	2000      	movs	r0, #0
   832a6:	6328      	str	r0, [r5, #48]	; 0x30
   832a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832ac:	692e      	ldr	r6, [r5, #16]
   832ae:	b1b6      	cbz	r6, 832de <__sflush_r+0xba>
   832b0:	0791      	lsls	r1, r2, #30
   832b2:	bf18      	it	ne
   832b4:	2300      	movne	r3, #0
   832b6:	682c      	ldr	r4, [r5, #0]
   832b8:	bf08      	it	eq
   832ba:	696b      	ldreq	r3, [r5, #20]
   832bc:	602e      	str	r6, [r5, #0]
   832be:	1ba4      	subs	r4, r4, r6
   832c0:	60ab      	str	r3, [r5, #8]
   832c2:	e00a      	b.n	832da <__sflush_r+0xb6>
   832c4:	4623      	mov	r3, r4
   832c6:	4632      	mov	r2, r6
   832c8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   832ca:	69e9      	ldr	r1, [r5, #28]
   832cc:	4640      	mov	r0, r8
   832ce:	47b8      	blx	r7
   832d0:	2800      	cmp	r0, #0
   832d2:	eba4 0400 	sub.w	r4, r4, r0
   832d6:	4406      	add	r6, r0
   832d8:	dd04      	ble.n	832e4 <__sflush_r+0xc0>
   832da:	2c00      	cmp	r4, #0
   832dc:	dcf2      	bgt.n	832c4 <__sflush_r+0xa0>
   832de:	2000      	movs	r0, #0
   832e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832e4:	89ab      	ldrh	r3, [r5, #12]
   832e6:	f04f 30ff 	mov.w	r0, #4294967295
   832ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   832ee:	81ab      	strh	r3, [r5, #12]
   832f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832f4:	f8d8 4000 	ldr.w	r4, [r8]
   832f8:	2c1d      	cmp	r4, #29
   832fa:	d8f3      	bhi.n	832e4 <__sflush_r+0xc0>
   832fc:	4b16      	ldr	r3, [pc, #88]	; (83358 <__sflush_r+0x134>)
   832fe:	40e3      	lsrs	r3, r4
   83300:	43db      	mvns	r3, r3
   83302:	f013 0301 	ands.w	r3, r3, #1
   83306:	d1ed      	bne.n	832e4 <__sflush_r+0xc0>
   83308:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8330c:	6929      	ldr	r1, [r5, #16]
   8330e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83312:	81aa      	strh	r2, [r5, #12]
   83314:	04d2      	lsls	r2, r2, #19
   83316:	606b      	str	r3, [r5, #4]
   83318:	6029      	str	r1, [r5, #0]
   8331a:	d5b8      	bpl.n	8328e <__sflush_r+0x6a>
   8331c:	2c00      	cmp	r4, #0
   8331e:	d1b6      	bne.n	8328e <__sflush_r+0x6a>
   83320:	6528      	str	r0, [r5, #80]	; 0x50
   83322:	e7b4      	b.n	8328e <__sflush_r+0x6a>
   83324:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83326:	2a00      	cmp	r2, #0
   83328:	dc8b      	bgt.n	83242 <__sflush_r+0x1e>
   8332a:	e7d8      	b.n	832de <__sflush_r+0xba>
   8332c:	2301      	movs	r3, #1
   8332e:	69e9      	ldr	r1, [r5, #28]
   83330:	4640      	mov	r0, r8
   83332:	47a0      	blx	r4
   83334:	1c43      	adds	r3, r0, #1
   83336:	4602      	mov	r2, r0
   83338:	d002      	beq.n	83340 <__sflush_r+0x11c>
   8333a:	89ab      	ldrh	r3, [r5, #12]
   8333c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8333e:	e78d      	b.n	8325c <__sflush_r+0x38>
   83340:	f8d8 3000 	ldr.w	r3, [r8]
   83344:	2b00      	cmp	r3, #0
   83346:	d0f8      	beq.n	8333a <__sflush_r+0x116>
   83348:	2b1d      	cmp	r3, #29
   8334a:	d001      	beq.n	83350 <__sflush_r+0x12c>
   8334c:	2b16      	cmp	r3, #22
   8334e:	d1c9      	bne.n	832e4 <__sflush_r+0xc0>
   83350:	f8c8 6000 	str.w	r6, [r8]
   83354:	e7c3      	b.n	832de <__sflush_r+0xba>
   83356:	bf00      	nop
   83358:	20400001 	.word	0x20400001

0008335c <_fflush_r>:
   8335c:	b538      	push	{r3, r4, r5, lr}
   8335e:	460d      	mov	r5, r1
   83360:	4604      	mov	r4, r0
   83362:	b108      	cbz	r0, 83368 <_fflush_r+0xc>
   83364:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83366:	b1bb      	cbz	r3, 83398 <_fflush_r+0x3c>
   83368:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8336c:	b188      	cbz	r0, 83392 <_fflush_r+0x36>
   8336e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83370:	07db      	lsls	r3, r3, #31
   83372:	d401      	bmi.n	83378 <_fflush_r+0x1c>
   83374:	0581      	lsls	r1, r0, #22
   83376:	d517      	bpl.n	833a8 <_fflush_r+0x4c>
   83378:	4620      	mov	r0, r4
   8337a:	4629      	mov	r1, r5
   8337c:	f7ff ff52 	bl	83224 <__sflush_r>
   83380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83382:	4604      	mov	r4, r0
   83384:	07da      	lsls	r2, r3, #31
   83386:	d402      	bmi.n	8338e <_fflush_r+0x32>
   83388:	89ab      	ldrh	r3, [r5, #12]
   8338a:	059b      	lsls	r3, r3, #22
   8338c:	d507      	bpl.n	8339e <_fflush_r+0x42>
   8338e:	4620      	mov	r0, r4
   83390:	bd38      	pop	{r3, r4, r5, pc}
   83392:	4604      	mov	r4, r0
   83394:	4620      	mov	r0, r4
   83396:	bd38      	pop	{r3, r4, r5, pc}
   83398:	f000 f838 	bl	8340c <__sinit>
   8339c:	e7e4      	b.n	83368 <_fflush_r+0xc>
   8339e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   833a0:	f000 fbf6 	bl	83b90 <__retarget_lock_release_recursive>
   833a4:	4620      	mov	r0, r4
   833a6:	bd38      	pop	{r3, r4, r5, pc}
   833a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   833aa:	f000 fbef 	bl	83b8c <__retarget_lock_acquire_recursive>
   833ae:	e7e3      	b.n	83378 <_fflush_r+0x1c>

000833b0 <_cleanup_r>:
   833b0:	4901      	ldr	r1, [pc, #4]	; (833b8 <_cleanup_r+0x8>)
   833b2:	f000 bbb1 	b.w	83b18 <_fwalk_reent>
   833b6:	bf00      	nop
   833b8:	00084b01 	.word	0x00084b01

000833bc <std.isra.0>:
   833bc:	2300      	movs	r3, #0
   833be:	b510      	push	{r4, lr}
   833c0:	4604      	mov	r4, r0
   833c2:	8181      	strh	r1, [r0, #12]
   833c4:	81c2      	strh	r2, [r0, #14]
   833c6:	6003      	str	r3, [r0, #0]
   833c8:	6043      	str	r3, [r0, #4]
   833ca:	6083      	str	r3, [r0, #8]
   833cc:	6643      	str	r3, [r0, #100]	; 0x64
   833ce:	6103      	str	r3, [r0, #16]
   833d0:	6143      	str	r3, [r0, #20]
   833d2:	6183      	str	r3, [r0, #24]
   833d4:	4619      	mov	r1, r3
   833d6:	2208      	movs	r2, #8
   833d8:	305c      	adds	r0, #92	; 0x5c
   833da:	f7fe fec9 	bl	82170 <memset>
   833de:	4807      	ldr	r0, [pc, #28]	; (833fc <std.isra.0+0x40>)
   833e0:	4907      	ldr	r1, [pc, #28]	; (83400 <std.isra.0+0x44>)
   833e2:	4a08      	ldr	r2, [pc, #32]	; (83404 <std.isra.0+0x48>)
   833e4:	4b08      	ldr	r3, [pc, #32]	; (83408 <std.isra.0+0x4c>)
   833e6:	6220      	str	r0, [r4, #32]
   833e8:	61e4      	str	r4, [r4, #28]
   833ea:	6261      	str	r1, [r4, #36]	; 0x24
   833ec:	62a2      	str	r2, [r4, #40]	; 0x28
   833ee:	62e3      	str	r3, [r4, #44]	; 0x2c
   833f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   833f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   833f8:	f000 bbc4 	b.w	83b84 <__retarget_lock_init_recursive>
   833fc:	000847ed 	.word	0x000847ed
   83400:	00084811 	.word	0x00084811
   83404:	0008484d 	.word	0x0008484d
   83408:	0008486d 	.word	0x0008486d

0008340c <__sinit>:
   8340c:	b510      	push	{r4, lr}
   8340e:	4604      	mov	r4, r0
   83410:	4814      	ldr	r0, [pc, #80]	; (83464 <__sinit+0x58>)
   83412:	f000 fbbb 	bl	83b8c <__retarget_lock_acquire_recursive>
   83416:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83418:	b9fa      	cbnz	r2, 8345a <__sinit+0x4e>
   8341a:	2003      	movs	r0, #3
   8341c:	4912      	ldr	r1, [pc, #72]	; (83468 <__sinit+0x5c>)
   8341e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83422:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83426:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8342a:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8342e:	63e1      	str	r1, [r4, #60]	; 0x3c
   83430:	6860      	ldr	r0, [r4, #4]
   83432:	2104      	movs	r1, #4
   83434:	f7ff ffc2 	bl	833bc <std.isra.0>
   83438:	68a0      	ldr	r0, [r4, #8]
   8343a:	2201      	movs	r2, #1
   8343c:	2109      	movs	r1, #9
   8343e:	f7ff ffbd 	bl	833bc <std.isra.0>
   83442:	68e0      	ldr	r0, [r4, #12]
   83444:	2202      	movs	r2, #2
   83446:	2112      	movs	r1, #18
   83448:	f7ff ffb8 	bl	833bc <std.isra.0>
   8344c:	2301      	movs	r3, #1
   8344e:	4805      	ldr	r0, [pc, #20]	; (83464 <__sinit+0x58>)
   83450:	63a3      	str	r3, [r4, #56]	; 0x38
   83452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83456:	f000 bb9b 	b.w	83b90 <__retarget_lock_release_recursive>
   8345a:	4802      	ldr	r0, [pc, #8]	; (83464 <__sinit+0x58>)
   8345c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83460:	f000 bb96 	b.w	83b90 <__retarget_lock_release_recursive>
   83464:	20070bdc 	.word	0x20070bdc
   83468:	000833b1 	.word	0x000833b1

0008346c <__sfp_lock_acquire>:
   8346c:	4801      	ldr	r0, [pc, #4]	; (83474 <__sfp_lock_acquire+0x8>)
   8346e:	f000 bb8d 	b.w	83b8c <__retarget_lock_acquire_recursive>
   83472:	bf00      	nop
   83474:	20070bf0 	.word	0x20070bf0

00083478 <__sfp_lock_release>:
   83478:	4801      	ldr	r0, [pc, #4]	; (83480 <__sfp_lock_release+0x8>)
   8347a:	f000 bb89 	b.w	83b90 <__retarget_lock_release_recursive>
   8347e:	bf00      	nop
   83480:	20070bf0 	.word	0x20070bf0

00083484 <__libc_fini_array>:
   83484:	b538      	push	{r3, r4, r5, lr}
   83486:	4c0a      	ldr	r4, [pc, #40]	; (834b0 <__libc_fini_array+0x2c>)
   83488:	4d0a      	ldr	r5, [pc, #40]	; (834b4 <__libc_fini_array+0x30>)
   8348a:	1b64      	subs	r4, r4, r5
   8348c:	10a4      	asrs	r4, r4, #2
   8348e:	d00a      	beq.n	834a6 <__libc_fini_array+0x22>
   83490:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83494:	3b01      	subs	r3, #1
   83496:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8349a:	3c01      	subs	r4, #1
   8349c:	f855 3904 	ldr.w	r3, [r5], #-4
   834a0:	4798      	blx	r3
   834a2:	2c00      	cmp	r4, #0
   834a4:	d1f9      	bne.n	8349a <__libc_fini_array+0x16>
   834a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   834aa:	f001 bcbf 	b.w	84e2c <_fini>
   834ae:	bf00      	nop
   834b0:	00084e3c 	.word	0x00084e3c
   834b4:	00084e38 	.word	0x00084e38

000834b8 <__fputwc>:
   834b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   834bc:	b083      	sub	sp, #12
   834be:	4607      	mov	r7, r0
   834c0:	4688      	mov	r8, r1
   834c2:	4614      	mov	r4, r2
   834c4:	f000 fb50 	bl	83b68 <__locale_mb_cur_max>
   834c8:	2801      	cmp	r0, #1
   834ca:	d033      	beq.n	83534 <__fputwc+0x7c>
   834cc:	4642      	mov	r2, r8
   834ce:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   834d2:	a901      	add	r1, sp, #4
   834d4:	4638      	mov	r0, r7
   834d6:	f001 fa53 	bl	84980 <_wcrtomb_r>
   834da:	1c42      	adds	r2, r0, #1
   834dc:	4606      	mov	r6, r0
   834de:	d022      	beq.n	83526 <__fputwc+0x6e>
   834e0:	b390      	cbz	r0, 83548 <__fputwc+0x90>
   834e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   834e6:	2500      	movs	r5, #0
   834e8:	f10d 0904 	add.w	r9, sp, #4
   834ec:	e008      	b.n	83500 <__fputwc+0x48>
   834ee:	6823      	ldr	r3, [r4, #0]
   834f0:	1c5a      	adds	r2, r3, #1
   834f2:	6022      	str	r2, [r4, #0]
   834f4:	7019      	strb	r1, [r3, #0]
   834f6:	3501      	adds	r5, #1
   834f8:	42b5      	cmp	r5, r6
   834fa:	d225      	bcs.n	83548 <__fputwc+0x90>
   834fc:	f815 1009 	ldrb.w	r1, [r5, r9]
   83500:	68a3      	ldr	r3, [r4, #8]
   83502:	3b01      	subs	r3, #1
   83504:	2b00      	cmp	r3, #0
   83506:	60a3      	str	r3, [r4, #8]
   83508:	daf1      	bge.n	834ee <__fputwc+0x36>
   8350a:	69a2      	ldr	r2, [r4, #24]
   8350c:	4293      	cmp	r3, r2
   8350e:	db01      	blt.n	83514 <__fputwc+0x5c>
   83510:	290a      	cmp	r1, #10
   83512:	d1ec      	bne.n	834ee <__fputwc+0x36>
   83514:	4622      	mov	r2, r4
   83516:	4638      	mov	r0, r7
   83518:	f001 f9da 	bl	848d0 <__swbuf_r>
   8351c:	1c43      	adds	r3, r0, #1
   8351e:	d1ea      	bne.n	834f6 <__fputwc+0x3e>
   83520:	b003      	add	sp, #12
   83522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83526:	89a3      	ldrh	r3, [r4, #12]
   83528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8352c:	81a3      	strh	r3, [r4, #12]
   8352e:	b003      	add	sp, #12
   83530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83534:	f108 33ff 	add.w	r3, r8, #4294967295
   83538:	2bfe      	cmp	r3, #254	; 0xfe
   8353a:	d8c7      	bhi.n	834cc <__fputwc+0x14>
   8353c:	fa5f f188 	uxtb.w	r1, r8
   83540:	4606      	mov	r6, r0
   83542:	f88d 1004 	strb.w	r1, [sp, #4]
   83546:	e7ce      	b.n	834e6 <__fputwc+0x2e>
   83548:	4640      	mov	r0, r8
   8354a:	b003      	add	sp, #12
   8354c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083550 <_fputwc_r>:
   83550:	b530      	push	{r4, r5, lr}
   83552:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83554:	4614      	mov	r4, r2
   83556:	f013 0f01 	tst.w	r3, #1
   8355a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8355e:	b083      	sub	sp, #12
   83560:	4605      	mov	r5, r0
   83562:	b29a      	uxth	r2, r3
   83564:	d101      	bne.n	8356a <_fputwc_r+0x1a>
   83566:	0590      	lsls	r0, r2, #22
   83568:	d51c      	bpl.n	835a4 <_fputwc_r+0x54>
   8356a:	0490      	lsls	r0, r2, #18
   8356c:	d406      	bmi.n	8357c <_fputwc_r+0x2c>
   8356e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83578:	81a3      	strh	r3, [r4, #12]
   8357a:	6662      	str	r2, [r4, #100]	; 0x64
   8357c:	4628      	mov	r0, r5
   8357e:	4622      	mov	r2, r4
   83580:	f7ff ff9a 	bl	834b8 <__fputwc>
   83584:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83586:	4605      	mov	r5, r0
   83588:	07da      	lsls	r2, r3, #31
   8358a:	d402      	bmi.n	83592 <_fputwc_r+0x42>
   8358c:	89a3      	ldrh	r3, [r4, #12]
   8358e:	059b      	lsls	r3, r3, #22
   83590:	d502      	bpl.n	83598 <_fputwc_r+0x48>
   83592:	4628      	mov	r0, r5
   83594:	b003      	add	sp, #12
   83596:	bd30      	pop	{r4, r5, pc}
   83598:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8359a:	f000 faf9 	bl	83b90 <__retarget_lock_release_recursive>
   8359e:	4628      	mov	r0, r5
   835a0:	b003      	add	sp, #12
   835a2:	bd30      	pop	{r4, r5, pc}
   835a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   835a6:	9101      	str	r1, [sp, #4]
   835a8:	f000 faf0 	bl	83b8c <__retarget_lock_acquire_recursive>
   835ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   835b0:	9901      	ldr	r1, [sp, #4]
   835b2:	b29a      	uxth	r2, r3
   835b4:	e7d9      	b.n	8356a <_fputwc_r+0x1a>
   835b6:	bf00      	nop

000835b8 <_malloc_trim_r>:
   835b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835ba:	460c      	mov	r4, r1
   835bc:	4f23      	ldr	r7, [pc, #140]	; (8364c <_malloc_trim_r+0x94>)
   835be:	4606      	mov	r6, r0
   835c0:	f000 ff40 	bl	84444 <__malloc_lock>
   835c4:	68bb      	ldr	r3, [r7, #8]
   835c6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   835ca:	685d      	ldr	r5, [r3, #4]
   835cc:	310f      	adds	r1, #15
   835ce:	f025 0503 	bic.w	r5, r5, #3
   835d2:	4429      	add	r1, r5
   835d4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   835d8:	f021 010f 	bic.w	r1, r1, #15
   835dc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   835e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   835e4:	db07      	blt.n	835f6 <_malloc_trim_r+0x3e>
   835e6:	2100      	movs	r1, #0
   835e8:	4630      	mov	r0, r6
   835ea:	f001 f8ed 	bl	847c8 <_sbrk_r>
   835ee:	68bb      	ldr	r3, [r7, #8]
   835f0:	442b      	add	r3, r5
   835f2:	4298      	cmp	r0, r3
   835f4:	d004      	beq.n	83600 <_malloc_trim_r+0x48>
   835f6:	4630      	mov	r0, r6
   835f8:	f000 ff2a 	bl	84450 <__malloc_unlock>
   835fc:	2000      	movs	r0, #0
   835fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83600:	4261      	negs	r1, r4
   83602:	4630      	mov	r0, r6
   83604:	f001 f8e0 	bl	847c8 <_sbrk_r>
   83608:	3001      	adds	r0, #1
   8360a:	d00d      	beq.n	83628 <_malloc_trim_r+0x70>
   8360c:	4b10      	ldr	r3, [pc, #64]	; (83650 <_malloc_trim_r+0x98>)
   8360e:	68ba      	ldr	r2, [r7, #8]
   83610:	6819      	ldr	r1, [r3, #0]
   83612:	1b2d      	subs	r5, r5, r4
   83614:	f045 0501 	orr.w	r5, r5, #1
   83618:	4630      	mov	r0, r6
   8361a:	1b09      	subs	r1, r1, r4
   8361c:	6055      	str	r5, [r2, #4]
   8361e:	6019      	str	r1, [r3, #0]
   83620:	f000 ff16 	bl	84450 <__malloc_unlock>
   83624:	2001      	movs	r0, #1
   83626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83628:	2100      	movs	r1, #0
   8362a:	4630      	mov	r0, r6
   8362c:	f001 f8cc 	bl	847c8 <_sbrk_r>
   83630:	68ba      	ldr	r2, [r7, #8]
   83632:	1a83      	subs	r3, r0, r2
   83634:	2b0f      	cmp	r3, #15
   83636:	ddde      	ble.n	835f6 <_malloc_trim_r+0x3e>
   83638:	4c06      	ldr	r4, [pc, #24]	; (83654 <_malloc_trim_r+0x9c>)
   8363a:	4905      	ldr	r1, [pc, #20]	; (83650 <_malloc_trim_r+0x98>)
   8363c:	6824      	ldr	r4, [r4, #0]
   8363e:	f043 0301 	orr.w	r3, r3, #1
   83642:	1b00      	subs	r0, r0, r4
   83644:	6053      	str	r3, [r2, #4]
   83646:	6008      	str	r0, [r1, #0]
   83648:	e7d5      	b.n	835f6 <_malloc_trim_r+0x3e>
   8364a:	bf00      	nop
   8364c:	200706e0 	.word	0x200706e0
   83650:	20070b90 	.word	0x20070b90
   83654:	20070ae8 	.word	0x20070ae8

00083658 <_free_r>:
   83658:	2900      	cmp	r1, #0
   8365a:	d044      	beq.n	836e6 <_free_r+0x8e>
   8365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83660:	460d      	mov	r5, r1
   83662:	4680      	mov	r8, r0
   83664:	f000 feee 	bl	84444 <__malloc_lock>
   83668:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8366c:	4969      	ldr	r1, [pc, #420]	; (83814 <_free_r+0x1bc>)
   8366e:	f1a5 0408 	sub.w	r4, r5, #8
   83672:	f027 0301 	bic.w	r3, r7, #1
   83676:	18e2      	adds	r2, r4, r3
   83678:	688e      	ldr	r6, [r1, #8]
   8367a:	6850      	ldr	r0, [r2, #4]
   8367c:	42b2      	cmp	r2, r6
   8367e:	f020 0003 	bic.w	r0, r0, #3
   83682:	d05e      	beq.n	83742 <_free_r+0xea>
   83684:	07fe      	lsls	r6, r7, #31
   83686:	6050      	str	r0, [r2, #4]
   83688:	d40b      	bmi.n	836a2 <_free_r+0x4a>
   8368a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8368e:	f101 0e08 	add.w	lr, r1, #8
   83692:	1be4      	subs	r4, r4, r7
   83694:	68a5      	ldr	r5, [r4, #8]
   83696:	443b      	add	r3, r7
   83698:	4575      	cmp	r5, lr
   8369a:	d06d      	beq.n	83778 <_free_r+0x120>
   8369c:	68e7      	ldr	r7, [r4, #12]
   8369e:	60ef      	str	r7, [r5, #12]
   836a0:	60bd      	str	r5, [r7, #8]
   836a2:	1815      	adds	r5, r2, r0
   836a4:	686d      	ldr	r5, [r5, #4]
   836a6:	07ed      	lsls	r5, r5, #31
   836a8:	d53e      	bpl.n	83728 <_free_r+0xd0>
   836aa:	f043 0201 	orr.w	r2, r3, #1
   836ae:	6062      	str	r2, [r4, #4]
   836b0:	50e3      	str	r3, [r4, r3]
   836b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   836b6:	d217      	bcs.n	836e8 <_free_r+0x90>
   836b8:	2201      	movs	r2, #1
   836ba:	08db      	lsrs	r3, r3, #3
   836bc:	1098      	asrs	r0, r3, #2
   836be:	684d      	ldr	r5, [r1, #4]
   836c0:	4413      	add	r3, r2
   836c2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   836c6:	4082      	lsls	r2, r0
   836c8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   836cc:	432a      	orrs	r2, r5
   836ce:	3808      	subs	r0, #8
   836d0:	60e0      	str	r0, [r4, #12]
   836d2:	60a7      	str	r7, [r4, #8]
   836d4:	604a      	str	r2, [r1, #4]
   836d6:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   836da:	60fc      	str	r4, [r7, #12]
   836dc:	4640      	mov	r0, r8
   836de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   836e2:	f000 beb5 	b.w	84450 <__malloc_unlock>
   836e6:	4770      	bx	lr
   836e8:	0a5a      	lsrs	r2, r3, #9
   836ea:	2a04      	cmp	r2, #4
   836ec:	d852      	bhi.n	83794 <_free_r+0x13c>
   836ee:	099a      	lsrs	r2, r3, #6
   836f0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   836f4:	00ff      	lsls	r7, r7, #3
   836f6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   836fa:	19c8      	adds	r0, r1, r7
   836fc:	59ca      	ldr	r2, [r1, r7]
   836fe:	3808      	subs	r0, #8
   83700:	4290      	cmp	r0, r2
   83702:	d04f      	beq.n	837a4 <_free_r+0x14c>
   83704:	6851      	ldr	r1, [r2, #4]
   83706:	f021 0103 	bic.w	r1, r1, #3
   8370a:	428b      	cmp	r3, r1
   8370c:	d232      	bcs.n	83774 <_free_r+0x11c>
   8370e:	6892      	ldr	r2, [r2, #8]
   83710:	4290      	cmp	r0, r2
   83712:	d1f7      	bne.n	83704 <_free_r+0xac>
   83714:	68c3      	ldr	r3, [r0, #12]
   83716:	60a0      	str	r0, [r4, #8]
   83718:	60e3      	str	r3, [r4, #12]
   8371a:	609c      	str	r4, [r3, #8]
   8371c:	60c4      	str	r4, [r0, #12]
   8371e:	4640      	mov	r0, r8
   83720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83724:	f000 be94 	b.w	84450 <__malloc_unlock>
   83728:	6895      	ldr	r5, [r2, #8]
   8372a:	4f3b      	ldr	r7, [pc, #236]	; (83818 <_free_r+0x1c0>)
   8372c:	4403      	add	r3, r0
   8372e:	42bd      	cmp	r5, r7
   83730:	d040      	beq.n	837b4 <_free_r+0x15c>
   83732:	68d0      	ldr	r0, [r2, #12]
   83734:	f043 0201 	orr.w	r2, r3, #1
   83738:	60e8      	str	r0, [r5, #12]
   8373a:	6085      	str	r5, [r0, #8]
   8373c:	6062      	str	r2, [r4, #4]
   8373e:	50e3      	str	r3, [r4, r3]
   83740:	e7b7      	b.n	836b2 <_free_r+0x5a>
   83742:	07ff      	lsls	r7, r7, #31
   83744:	4403      	add	r3, r0
   83746:	d407      	bmi.n	83758 <_free_r+0x100>
   83748:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8374c:	1b64      	subs	r4, r4, r5
   8374e:	68e2      	ldr	r2, [r4, #12]
   83750:	68a0      	ldr	r0, [r4, #8]
   83752:	442b      	add	r3, r5
   83754:	60c2      	str	r2, [r0, #12]
   83756:	6090      	str	r0, [r2, #8]
   83758:	4a30      	ldr	r2, [pc, #192]	; (8381c <_free_r+0x1c4>)
   8375a:	f043 0001 	orr.w	r0, r3, #1
   8375e:	6812      	ldr	r2, [r2, #0]
   83760:	6060      	str	r0, [r4, #4]
   83762:	4293      	cmp	r3, r2
   83764:	608c      	str	r4, [r1, #8]
   83766:	d3b9      	bcc.n	836dc <_free_r+0x84>
   83768:	4b2d      	ldr	r3, [pc, #180]	; (83820 <_free_r+0x1c8>)
   8376a:	4640      	mov	r0, r8
   8376c:	6819      	ldr	r1, [r3, #0]
   8376e:	f7ff ff23 	bl	835b8 <_malloc_trim_r>
   83772:	e7b3      	b.n	836dc <_free_r+0x84>
   83774:	4610      	mov	r0, r2
   83776:	e7cd      	b.n	83714 <_free_r+0xbc>
   83778:	1811      	adds	r1, r2, r0
   8377a:	6849      	ldr	r1, [r1, #4]
   8377c:	07c9      	lsls	r1, r1, #31
   8377e:	d444      	bmi.n	8380a <_free_r+0x1b2>
   83780:	6891      	ldr	r1, [r2, #8]
   83782:	4403      	add	r3, r0
   83784:	68d2      	ldr	r2, [r2, #12]
   83786:	f043 0001 	orr.w	r0, r3, #1
   8378a:	60ca      	str	r2, [r1, #12]
   8378c:	6091      	str	r1, [r2, #8]
   8378e:	6060      	str	r0, [r4, #4]
   83790:	50e3      	str	r3, [r4, r3]
   83792:	e7a3      	b.n	836dc <_free_r+0x84>
   83794:	2a14      	cmp	r2, #20
   83796:	d816      	bhi.n	837c6 <_free_r+0x16e>
   83798:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8379c:	00ff      	lsls	r7, r7, #3
   8379e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   837a2:	e7aa      	b.n	836fa <_free_r+0xa2>
   837a4:	2301      	movs	r3, #1
   837a6:	10aa      	asrs	r2, r5, #2
   837a8:	684d      	ldr	r5, [r1, #4]
   837aa:	4093      	lsls	r3, r2
   837ac:	432b      	orrs	r3, r5
   837ae:	604b      	str	r3, [r1, #4]
   837b0:	4603      	mov	r3, r0
   837b2:	e7b0      	b.n	83716 <_free_r+0xbe>
   837b4:	f043 0201 	orr.w	r2, r3, #1
   837b8:	614c      	str	r4, [r1, #20]
   837ba:	610c      	str	r4, [r1, #16]
   837bc:	60e5      	str	r5, [r4, #12]
   837be:	60a5      	str	r5, [r4, #8]
   837c0:	6062      	str	r2, [r4, #4]
   837c2:	50e3      	str	r3, [r4, r3]
   837c4:	e78a      	b.n	836dc <_free_r+0x84>
   837c6:	2a54      	cmp	r2, #84	; 0x54
   837c8:	d806      	bhi.n	837d8 <_free_r+0x180>
   837ca:	0b1a      	lsrs	r2, r3, #12
   837cc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   837d0:	00ff      	lsls	r7, r7, #3
   837d2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   837d6:	e790      	b.n	836fa <_free_r+0xa2>
   837d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   837dc:	d806      	bhi.n	837ec <_free_r+0x194>
   837de:	0bda      	lsrs	r2, r3, #15
   837e0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   837e4:	00ff      	lsls	r7, r7, #3
   837e6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   837ea:	e786      	b.n	836fa <_free_r+0xa2>
   837ec:	f240 5054 	movw	r0, #1364	; 0x554
   837f0:	4282      	cmp	r2, r0
   837f2:	d806      	bhi.n	83802 <_free_r+0x1aa>
   837f4:	0c9a      	lsrs	r2, r3, #18
   837f6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   837fa:	00ff      	lsls	r7, r7, #3
   837fc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83800:	e77b      	b.n	836fa <_free_r+0xa2>
   83802:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83806:	257e      	movs	r5, #126	; 0x7e
   83808:	e777      	b.n	836fa <_free_r+0xa2>
   8380a:	f043 0101 	orr.w	r1, r3, #1
   8380e:	6061      	str	r1, [r4, #4]
   83810:	6013      	str	r3, [r2, #0]
   83812:	e763      	b.n	836dc <_free_r+0x84>
   83814:	200706e0 	.word	0x200706e0
   83818:	200706e8 	.word	0x200706e8
   8381c:	20070aec 	.word	0x20070aec
   83820:	20070bc0 	.word	0x20070bc0

00083824 <__sfvwrite_r>:
   83824:	6893      	ldr	r3, [r2, #8]
   83826:	2b00      	cmp	r3, #0
   83828:	d071      	beq.n	8390e <__sfvwrite_r+0xea>
   8382a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8382e:	898b      	ldrh	r3, [r1, #12]
   83830:	b083      	sub	sp, #12
   83832:	460c      	mov	r4, r1
   83834:	0719      	lsls	r1, r3, #28
   83836:	9000      	str	r0, [sp, #0]
   83838:	4616      	mov	r6, r2
   8383a:	d525      	bpl.n	83888 <__sfvwrite_r+0x64>
   8383c:	6922      	ldr	r2, [r4, #16]
   8383e:	b31a      	cbz	r2, 83888 <__sfvwrite_r+0x64>
   83840:	f013 0002 	ands.w	r0, r3, #2
   83844:	6835      	ldr	r5, [r6, #0]
   83846:	d02b      	beq.n	838a0 <__sfvwrite_r+0x7c>
   83848:	f04f 0900 	mov.w	r9, #0
   8384c:	46b0      	mov	r8, r6
   8384e:	464f      	mov	r7, r9
   83850:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 83b14 <__sfvwrite_r+0x2f0>
   83854:	2f00      	cmp	r7, #0
   83856:	d055      	beq.n	83904 <__sfvwrite_r+0xe0>
   83858:	4557      	cmp	r7, sl
   8385a:	463b      	mov	r3, r7
   8385c:	464a      	mov	r2, r9
   8385e:	bf28      	it	cs
   83860:	4653      	movcs	r3, sl
   83862:	69e1      	ldr	r1, [r4, #28]
   83864:	9800      	ldr	r0, [sp, #0]
   83866:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83868:	47b0      	blx	r6
   8386a:	2800      	cmp	r0, #0
   8386c:	dd56      	ble.n	8391c <__sfvwrite_r+0xf8>
   8386e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83872:	4481      	add	r9, r0
   83874:	1a1b      	subs	r3, r3, r0
   83876:	1a3f      	subs	r7, r7, r0
   83878:	f8c8 3008 	str.w	r3, [r8, #8]
   8387c:	2b00      	cmp	r3, #0
   8387e:	d1e9      	bne.n	83854 <__sfvwrite_r+0x30>
   83880:	2000      	movs	r0, #0
   83882:	b003      	add	sp, #12
   83884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83888:	4621      	mov	r1, r4
   8388a:	9800      	ldr	r0, [sp, #0]
   8388c:	f7ff fc56 	bl	8313c <__swsetup_r>
   83890:	2800      	cmp	r0, #0
   83892:	f040 8135 	bne.w	83b00 <__sfvwrite_r+0x2dc>
   83896:	89a3      	ldrh	r3, [r4, #12]
   83898:	6835      	ldr	r5, [r6, #0]
   8389a:	f013 0002 	ands.w	r0, r3, #2
   8389e:	d1d3      	bne.n	83848 <__sfvwrite_r+0x24>
   838a0:	f013 0901 	ands.w	r9, r3, #1
   838a4:	d144      	bne.n	83930 <__sfvwrite_r+0x10c>
   838a6:	464f      	mov	r7, r9
   838a8:	9601      	str	r6, [sp, #4]
   838aa:	b337      	cbz	r7, 838fa <__sfvwrite_r+0xd6>
   838ac:	059a      	lsls	r2, r3, #22
   838ae:	f8d4 8008 	ldr.w	r8, [r4, #8]
   838b2:	f140 8085 	bpl.w	839c0 <__sfvwrite_r+0x19c>
   838b6:	4547      	cmp	r7, r8
   838b8:	46c3      	mov	fp, r8
   838ba:	f0c0 80ad 	bcc.w	83a18 <__sfvwrite_r+0x1f4>
   838be:	f413 6f90 	tst.w	r3, #1152	; 0x480
   838c2:	f040 80ae 	bne.w	83a22 <__sfvwrite_r+0x1fe>
   838c6:	46ba      	mov	sl, r7
   838c8:	6820      	ldr	r0, [r4, #0]
   838ca:	465a      	mov	r2, fp
   838cc:	4649      	mov	r1, r9
   838ce:	f000 fd55 	bl	8437c <memmove>
   838d2:	68a2      	ldr	r2, [r4, #8]
   838d4:	6823      	ldr	r3, [r4, #0]
   838d6:	eba2 0208 	sub.w	r2, r2, r8
   838da:	445b      	add	r3, fp
   838dc:	60a2      	str	r2, [r4, #8]
   838de:	6023      	str	r3, [r4, #0]
   838e0:	9a01      	ldr	r2, [sp, #4]
   838e2:	44d1      	add	r9, sl
   838e4:	6893      	ldr	r3, [r2, #8]
   838e6:	eba7 070a 	sub.w	r7, r7, sl
   838ea:	eba3 030a 	sub.w	r3, r3, sl
   838ee:	6093      	str	r3, [r2, #8]
   838f0:	2b00      	cmp	r3, #0
   838f2:	d0c5      	beq.n	83880 <__sfvwrite_r+0x5c>
   838f4:	89a3      	ldrh	r3, [r4, #12]
   838f6:	2f00      	cmp	r7, #0
   838f8:	d1d8      	bne.n	838ac <__sfvwrite_r+0x88>
   838fa:	f8d5 9000 	ldr.w	r9, [r5]
   838fe:	686f      	ldr	r7, [r5, #4]
   83900:	3508      	adds	r5, #8
   83902:	e7d2      	b.n	838aa <__sfvwrite_r+0x86>
   83904:	f8d5 9000 	ldr.w	r9, [r5]
   83908:	686f      	ldr	r7, [r5, #4]
   8390a:	3508      	adds	r5, #8
   8390c:	e7a2      	b.n	83854 <__sfvwrite_r+0x30>
   8390e:	2000      	movs	r0, #0
   83910:	4770      	bx	lr
   83912:	4621      	mov	r1, r4
   83914:	9800      	ldr	r0, [sp, #0]
   83916:	f7ff fd21 	bl	8335c <_fflush_r>
   8391a:	b378      	cbz	r0, 8397c <__sfvwrite_r+0x158>
   8391c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83920:	f04f 30ff 	mov.w	r0, #4294967295
   83924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83928:	81a3      	strh	r3, [r4, #12]
   8392a:	b003      	add	sp, #12
   8392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83930:	4681      	mov	r9, r0
   83932:	4633      	mov	r3, r6
   83934:	464e      	mov	r6, r9
   83936:	46a8      	mov	r8, r5
   83938:	469a      	mov	sl, r3
   8393a:	464d      	mov	r5, r9
   8393c:	b356      	cbz	r6, 83994 <__sfvwrite_r+0x170>
   8393e:	2800      	cmp	r0, #0
   83940:	d032      	beq.n	839a8 <__sfvwrite_r+0x184>
   83942:	45b1      	cmp	r9, r6
   83944:	46cb      	mov	fp, r9
   83946:	bf28      	it	cs
   83948:	46b3      	movcs	fp, r6
   8394a:	6820      	ldr	r0, [r4, #0]
   8394c:	6923      	ldr	r3, [r4, #16]
   8394e:	465f      	mov	r7, fp
   83950:	4298      	cmp	r0, r3
   83952:	6962      	ldr	r2, [r4, #20]
   83954:	d904      	bls.n	83960 <__sfvwrite_r+0x13c>
   83956:	68a3      	ldr	r3, [r4, #8]
   83958:	4413      	add	r3, r2
   8395a:	459b      	cmp	fp, r3
   8395c:	f300 80a8 	bgt.w	83ab0 <__sfvwrite_r+0x28c>
   83960:	4593      	cmp	fp, r2
   83962:	db4d      	blt.n	83a00 <__sfvwrite_r+0x1dc>
   83964:	4613      	mov	r3, r2
   83966:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83968:	462a      	mov	r2, r5
   8396a:	69e1      	ldr	r1, [r4, #28]
   8396c:	9800      	ldr	r0, [sp, #0]
   8396e:	47b8      	blx	r7
   83970:	1e07      	subs	r7, r0, #0
   83972:	ddd3      	ble.n	8391c <__sfvwrite_r+0xf8>
   83974:	ebb9 0907 	subs.w	r9, r9, r7
   83978:	d0cb      	beq.n	83912 <__sfvwrite_r+0xee>
   8397a:	2001      	movs	r0, #1
   8397c:	f8da 3008 	ldr.w	r3, [sl, #8]
   83980:	443d      	add	r5, r7
   83982:	1bdb      	subs	r3, r3, r7
   83984:	1bf6      	subs	r6, r6, r7
   83986:	f8ca 3008 	str.w	r3, [sl, #8]
   8398a:	2b00      	cmp	r3, #0
   8398c:	f43f af78 	beq.w	83880 <__sfvwrite_r+0x5c>
   83990:	2e00      	cmp	r6, #0
   83992:	d1d4      	bne.n	8393e <__sfvwrite_r+0x11a>
   83994:	f108 0308 	add.w	r3, r8, #8
   83998:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8399c:	4698      	mov	r8, r3
   8399e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   839a2:	3308      	adds	r3, #8
   839a4:	2e00      	cmp	r6, #0
   839a6:	d0f7      	beq.n	83998 <__sfvwrite_r+0x174>
   839a8:	4632      	mov	r2, r6
   839aa:	210a      	movs	r1, #10
   839ac:	4628      	mov	r0, r5
   839ae:	f000 fc29 	bl	84204 <memchr>
   839b2:	2800      	cmp	r0, #0
   839b4:	f000 80a1 	beq.w	83afa <__sfvwrite_r+0x2d6>
   839b8:	3001      	adds	r0, #1
   839ba:	eba0 0905 	sub.w	r9, r0, r5
   839be:	e7c0      	b.n	83942 <__sfvwrite_r+0x11e>
   839c0:	6820      	ldr	r0, [r4, #0]
   839c2:	6923      	ldr	r3, [r4, #16]
   839c4:	4298      	cmp	r0, r3
   839c6:	d802      	bhi.n	839ce <__sfvwrite_r+0x1aa>
   839c8:	6963      	ldr	r3, [r4, #20]
   839ca:	429f      	cmp	r7, r3
   839cc:	d25d      	bcs.n	83a8a <__sfvwrite_r+0x266>
   839ce:	45b8      	cmp	r8, r7
   839d0:	bf28      	it	cs
   839d2:	46b8      	movcs	r8, r7
   839d4:	4649      	mov	r1, r9
   839d6:	4642      	mov	r2, r8
   839d8:	f000 fcd0 	bl	8437c <memmove>
   839dc:	68a3      	ldr	r3, [r4, #8]
   839de:	6822      	ldr	r2, [r4, #0]
   839e0:	eba3 0308 	sub.w	r3, r3, r8
   839e4:	4442      	add	r2, r8
   839e6:	60a3      	str	r3, [r4, #8]
   839e8:	6022      	str	r2, [r4, #0]
   839ea:	b10b      	cbz	r3, 839f0 <__sfvwrite_r+0x1cc>
   839ec:	46c2      	mov	sl, r8
   839ee:	e777      	b.n	838e0 <__sfvwrite_r+0xbc>
   839f0:	4621      	mov	r1, r4
   839f2:	9800      	ldr	r0, [sp, #0]
   839f4:	f7ff fcb2 	bl	8335c <_fflush_r>
   839f8:	2800      	cmp	r0, #0
   839fa:	d18f      	bne.n	8391c <__sfvwrite_r+0xf8>
   839fc:	46c2      	mov	sl, r8
   839fe:	e76f      	b.n	838e0 <__sfvwrite_r+0xbc>
   83a00:	465a      	mov	r2, fp
   83a02:	4629      	mov	r1, r5
   83a04:	f000 fcba 	bl	8437c <memmove>
   83a08:	68a2      	ldr	r2, [r4, #8]
   83a0a:	6823      	ldr	r3, [r4, #0]
   83a0c:	eba2 020b 	sub.w	r2, r2, fp
   83a10:	445b      	add	r3, fp
   83a12:	60a2      	str	r2, [r4, #8]
   83a14:	6023      	str	r3, [r4, #0]
   83a16:	e7ad      	b.n	83974 <__sfvwrite_r+0x150>
   83a18:	46b8      	mov	r8, r7
   83a1a:	46ba      	mov	sl, r7
   83a1c:	46bb      	mov	fp, r7
   83a1e:	6820      	ldr	r0, [r4, #0]
   83a20:	e753      	b.n	838ca <__sfvwrite_r+0xa6>
   83a22:	6962      	ldr	r2, [r4, #20]
   83a24:	6820      	ldr	r0, [r4, #0]
   83a26:	6921      	ldr	r1, [r4, #16]
   83a28:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83a2c:	eba0 0a01 	sub.w	sl, r0, r1
   83a30:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83a34:	f10a 0001 	add.w	r0, sl, #1
   83a38:	ea4f 0868 	mov.w	r8, r8, asr #1
   83a3c:	4438      	add	r0, r7
   83a3e:	4540      	cmp	r0, r8
   83a40:	4642      	mov	r2, r8
   83a42:	bf84      	itt	hi
   83a44:	4680      	movhi	r8, r0
   83a46:	4642      	movhi	r2, r8
   83a48:	055b      	lsls	r3, r3, #21
   83a4a:	d544      	bpl.n	83ad6 <__sfvwrite_r+0x2b2>
   83a4c:	4611      	mov	r1, r2
   83a4e:	9800      	ldr	r0, [sp, #0]
   83a50:	f000 f920 	bl	83c94 <_malloc_r>
   83a54:	4683      	mov	fp, r0
   83a56:	2800      	cmp	r0, #0
   83a58:	d055      	beq.n	83b06 <__sfvwrite_r+0x2e2>
   83a5a:	4652      	mov	r2, sl
   83a5c:	6921      	ldr	r1, [r4, #16]
   83a5e:	f000 fc17 	bl	84290 <memcpy>
   83a62:	89a3      	ldrh	r3, [r4, #12]
   83a64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83a6c:	81a3      	strh	r3, [r4, #12]
   83a6e:	eb0b 000a 	add.w	r0, fp, sl
   83a72:	eba8 030a 	sub.w	r3, r8, sl
   83a76:	f8c4 b010 	str.w	fp, [r4, #16]
   83a7a:	f8c4 8014 	str.w	r8, [r4, #20]
   83a7e:	6020      	str	r0, [r4, #0]
   83a80:	60a3      	str	r3, [r4, #8]
   83a82:	46b8      	mov	r8, r7
   83a84:	46ba      	mov	sl, r7
   83a86:	46bb      	mov	fp, r7
   83a88:	e71f      	b.n	838ca <__sfvwrite_r+0xa6>
   83a8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83a8e:	42ba      	cmp	r2, r7
   83a90:	bf28      	it	cs
   83a92:	463a      	movcs	r2, r7
   83a94:	fb92 f2f3 	sdiv	r2, r2, r3
   83a98:	69e1      	ldr	r1, [r4, #28]
   83a9a:	fb03 f302 	mul.w	r3, r3, r2
   83a9e:	9800      	ldr	r0, [sp, #0]
   83aa0:	464a      	mov	r2, r9
   83aa2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83aa4:	47b0      	blx	r6
   83aa6:	f1b0 0a00 	subs.w	sl, r0, #0
   83aaa:	f73f af19 	bgt.w	838e0 <__sfvwrite_r+0xbc>
   83aae:	e735      	b.n	8391c <__sfvwrite_r+0xf8>
   83ab0:	461a      	mov	r2, r3
   83ab2:	4629      	mov	r1, r5
   83ab4:	9301      	str	r3, [sp, #4]
   83ab6:	f000 fc61 	bl	8437c <memmove>
   83aba:	6822      	ldr	r2, [r4, #0]
   83abc:	9b01      	ldr	r3, [sp, #4]
   83abe:	4621      	mov	r1, r4
   83ac0:	441a      	add	r2, r3
   83ac2:	6022      	str	r2, [r4, #0]
   83ac4:	9800      	ldr	r0, [sp, #0]
   83ac6:	f7ff fc49 	bl	8335c <_fflush_r>
   83aca:	9b01      	ldr	r3, [sp, #4]
   83acc:	2800      	cmp	r0, #0
   83ace:	f47f af25 	bne.w	8391c <__sfvwrite_r+0xf8>
   83ad2:	461f      	mov	r7, r3
   83ad4:	e74e      	b.n	83974 <__sfvwrite_r+0x150>
   83ad6:	9800      	ldr	r0, [sp, #0]
   83ad8:	f000 fcc0 	bl	8445c <_realloc_r>
   83adc:	4683      	mov	fp, r0
   83ade:	2800      	cmp	r0, #0
   83ae0:	d1c5      	bne.n	83a6e <__sfvwrite_r+0x24a>
   83ae2:	9d00      	ldr	r5, [sp, #0]
   83ae4:	6921      	ldr	r1, [r4, #16]
   83ae6:	4628      	mov	r0, r5
   83ae8:	f7ff fdb6 	bl	83658 <_free_r>
   83aec:	220c      	movs	r2, #12
   83aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83af2:	602a      	str	r2, [r5, #0]
   83af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83af8:	e712      	b.n	83920 <__sfvwrite_r+0xfc>
   83afa:	f106 0901 	add.w	r9, r6, #1
   83afe:	e720      	b.n	83942 <__sfvwrite_r+0x11e>
   83b00:	f04f 30ff 	mov.w	r0, #4294967295
   83b04:	e6bd      	b.n	83882 <__sfvwrite_r+0x5e>
   83b06:	220c      	movs	r2, #12
   83b08:	9900      	ldr	r1, [sp, #0]
   83b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b0e:	600a      	str	r2, [r1, #0]
   83b10:	e706      	b.n	83920 <__sfvwrite_r+0xfc>
   83b12:	bf00      	nop
   83b14:	7ffffc00 	.word	0x7ffffc00

00083b18 <_fwalk_reent>:
   83b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83b1c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83b20:	d01e      	beq.n	83b60 <_fwalk_reent+0x48>
   83b22:	4688      	mov	r8, r1
   83b24:	4607      	mov	r7, r0
   83b26:	f04f 0900 	mov.w	r9, #0
   83b2a:	6875      	ldr	r5, [r6, #4]
   83b2c:	68b4      	ldr	r4, [r6, #8]
   83b2e:	3d01      	subs	r5, #1
   83b30:	d410      	bmi.n	83b54 <_fwalk_reent+0x3c>
   83b32:	89a3      	ldrh	r3, [r4, #12]
   83b34:	3d01      	subs	r5, #1
   83b36:	2b01      	cmp	r3, #1
   83b38:	d908      	bls.n	83b4c <_fwalk_reent+0x34>
   83b3a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83b3e:	3301      	adds	r3, #1
   83b40:	d004      	beq.n	83b4c <_fwalk_reent+0x34>
   83b42:	4621      	mov	r1, r4
   83b44:	4638      	mov	r0, r7
   83b46:	47c0      	blx	r8
   83b48:	ea49 0900 	orr.w	r9, r9, r0
   83b4c:	1c6b      	adds	r3, r5, #1
   83b4e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83b52:	d1ee      	bne.n	83b32 <_fwalk_reent+0x1a>
   83b54:	6836      	ldr	r6, [r6, #0]
   83b56:	2e00      	cmp	r6, #0
   83b58:	d1e7      	bne.n	83b2a <_fwalk_reent+0x12>
   83b5a:	4648      	mov	r0, r9
   83b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83b60:	46b1      	mov	r9, r6
   83b62:	4648      	mov	r0, r9
   83b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083b68 <__locale_mb_cur_max>:
   83b68:	4b04      	ldr	r3, [pc, #16]	; (83b7c <__locale_mb_cur_max+0x14>)
   83b6a:	4a05      	ldr	r2, [pc, #20]	; (83b80 <__locale_mb_cur_max+0x18>)
   83b6c:	681b      	ldr	r3, [r3, #0]
   83b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   83b70:	2b00      	cmp	r3, #0
   83b72:	bf08      	it	eq
   83b74:	4613      	moveq	r3, r2
   83b76:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   83b7a:	4770      	bx	lr
   83b7c:	20070140 	.word	0x20070140
   83b80:	20070574 	.word	0x20070574

00083b84 <__retarget_lock_init_recursive>:
   83b84:	4770      	bx	lr
   83b86:	bf00      	nop

00083b88 <__retarget_lock_close_recursive>:
   83b88:	4770      	bx	lr
   83b8a:	bf00      	nop

00083b8c <__retarget_lock_acquire_recursive>:
   83b8c:	4770      	bx	lr
   83b8e:	bf00      	nop

00083b90 <__retarget_lock_release_recursive>:
   83b90:	4770      	bx	lr
   83b92:	bf00      	nop

00083b94 <__swhatbuf_r>:
   83b94:	b570      	push	{r4, r5, r6, lr}
   83b96:	460c      	mov	r4, r1
   83b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b9c:	b090      	sub	sp, #64	; 0x40
   83b9e:	2900      	cmp	r1, #0
   83ba0:	4615      	mov	r5, r2
   83ba2:	461e      	mov	r6, r3
   83ba4:	db14      	blt.n	83bd0 <__swhatbuf_r+0x3c>
   83ba6:	aa01      	add	r2, sp, #4
   83ba8:	f001 f80c 	bl	84bc4 <_fstat_r>
   83bac:	2800      	cmp	r0, #0
   83bae:	db0f      	blt.n	83bd0 <__swhatbuf_r+0x3c>
   83bb0:	9a02      	ldr	r2, [sp, #8]
   83bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83bb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   83bba:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   83bbe:	fab2 f282 	clz	r2, r2
   83bc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83bc6:	0952      	lsrs	r2, r2, #5
   83bc8:	6032      	str	r2, [r6, #0]
   83bca:	602b      	str	r3, [r5, #0]
   83bcc:	b010      	add	sp, #64	; 0x40
   83bce:	bd70      	pop	{r4, r5, r6, pc}
   83bd0:	2300      	movs	r3, #0
   83bd2:	89a2      	ldrh	r2, [r4, #12]
   83bd4:	6033      	str	r3, [r6, #0]
   83bd6:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   83bda:	d004      	beq.n	83be6 <__swhatbuf_r+0x52>
   83bdc:	2240      	movs	r2, #64	; 0x40
   83bde:	4618      	mov	r0, r3
   83be0:	602a      	str	r2, [r5, #0]
   83be2:	b010      	add	sp, #64	; 0x40
   83be4:	bd70      	pop	{r4, r5, r6, pc}
   83be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83bea:	602b      	str	r3, [r5, #0]
   83bec:	b010      	add	sp, #64	; 0x40
   83bee:	bd70      	pop	{r4, r5, r6, pc}

00083bf0 <__smakebuf_r>:
   83bf0:	898a      	ldrh	r2, [r1, #12]
   83bf2:	460b      	mov	r3, r1
   83bf4:	0792      	lsls	r2, r2, #30
   83bf6:	d506      	bpl.n	83c06 <__smakebuf_r+0x16>
   83bf8:	2101      	movs	r1, #1
   83bfa:	f103 0243 	add.w	r2, r3, #67	; 0x43
   83bfe:	6159      	str	r1, [r3, #20]
   83c00:	601a      	str	r2, [r3, #0]
   83c02:	611a      	str	r2, [r3, #16]
   83c04:	4770      	bx	lr
   83c06:	b5f0      	push	{r4, r5, r6, r7, lr}
   83c08:	b083      	sub	sp, #12
   83c0a:	ab01      	add	r3, sp, #4
   83c0c:	466a      	mov	r2, sp
   83c0e:	460c      	mov	r4, r1
   83c10:	4606      	mov	r6, r0
   83c12:	f7ff ffbf 	bl	83b94 <__swhatbuf_r>
   83c16:	9900      	ldr	r1, [sp, #0]
   83c18:	4605      	mov	r5, r0
   83c1a:	4630      	mov	r0, r6
   83c1c:	f000 f83a 	bl	83c94 <_malloc_r>
   83c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c24:	b1d8      	cbz	r0, 83c5e <__smakebuf_r+0x6e>
   83c26:	e89d 0006 	ldmia.w	sp, {r1, r2}
   83c2a:	4f15      	ldr	r7, [pc, #84]	; (83c80 <__smakebuf_r+0x90>)
   83c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83c30:	63f7      	str	r7, [r6, #60]	; 0x3c
   83c32:	81a3      	strh	r3, [r4, #12]
   83c34:	6020      	str	r0, [r4, #0]
   83c36:	6120      	str	r0, [r4, #16]
   83c38:	6161      	str	r1, [r4, #20]
   83c3a:	b91a      	cbnz	r2, 83c44 <__smakebuf_r+0x54>
   83c3c:	432b      	orrs	r3, r5
   83c3e:	81a3      	strh	r3, [r4, #12]
   83c40:	b003      	add	sp, #12
   83c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c44:	4630      	mov	r0, r6
   83c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83c4a:	f000 ffcf 	bl	84bec <_isatty_r>
   83c4e:	b1a0      	cbz	r0, 83c7a <__smakebuf_r+0x8a>
   83c50:	89a3      	ldrh	r3, [r4, #12]
   83c52:	f023 0303 	bic.w	r3, r3, #3
   83c56:	f043 0301 	orr.w	r3, r3, #1
   83c5a:	b21b      	sxth	r3, r3
   83c5c:	e7ee      	b.n	83c3c <__smakebuf_r+0x4c>
   83c5e:	059a      	lsls	r2, r3, #22
   83c60:	d4ee      	bmi.n	83c40 <__smakebuf_r+0x50>
   83c62:	2101      	movs	r1, #1
   83c64:	f023 0303 	bic.w	r3, r3, #3
   83c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83c6c:	f043 0302 	orr.w	r3, r3, #2
   83c70:	81a3      	strh	r3, [r4, #12]
   83c72:	6161      	str	r1, [r4, #20]
   83c74:	6022      	str	r2, [r4, #0]
   83c76:	6122      	str	r2, [r4, #16]
   83c78:	e7e2      	b.n	83c40 <__smakebuf_r+0x50>
   83c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c7e:	e7dd      	b.n	83c3c <__smakebuf_r+0x4c>
   83c80:	000833b1 	.word	0x000833b1

00083c84 <malloc>:
   83c84:	4b02      	ldr	r3, [pc, #8]	; (83c90 <malloc+0xc>)
   83c86:	4601      	mov	r1, r0
   83c88:	6818      	ldr	r0, [r3, #0]
   83c8a:	f000 b803 	b.w	83c94 <_malloc_r>
   83c8e:	bf00      	nop
   83c90:	20070140 	.word	0x20070140

00083c94 <_malloc_r>:
   83c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83c98:	f101 060b 	add.w	r6, r1, #11
   83c9c:	2e16      	cmp	r6, #22
   83c9e:	b083      	sub	sp, #12
   83ca0:	4605      	mov	r5, r0
   83ca2:	f240 809e 	bls.w	83de2 <_malloc_r+0x14e>
   83ca6:	f036 0607 	bics.w	r6, r6, #7
   83caa:	f100 80bd 	bmi.w	83e28 <_malloc_r+0x194>
   83cae:	42b1      	cmp	r1, r6
   83cb0:	f200 80ba 	bhi.w	83e28 <_malloc_r+0x194>
   83cb4:	f000 fbc6 	bl	84444 <__malloc_lock>
   83cb8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   83cbc:	f0c0 8285 	bcc.w	841ca <_malloc_r+0x536>
   83cc0:	0a73      	lsrs	r3, r6, #9
   83cc2:	f000 80b8 	beq.w	83e36 <_malloc_r+0x1a2>
   83cc6:	2b04      	cmp	r3, #4
   83cc8:	f200 816c 	bhi.w	83fa4 <_malloc_r+0x310>
   83ccc:	09b3      	lsrs	r3, r6, #6
   83cce:	f103 0039 	add.w	r0, r3, #57	; 0x39
   83cd2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   83cd6:	00c1      	lsls	r1, r0, #3
   83cd8:	4fb8      	ldr	r7, [pc, #736]	; (83fbc <_malloc_r+0x328>)
   83cda:	4439      	add	r1, r7
   83cdc:	684c      	ldr	r4, [r1, #4]
   83cde:	3908      	subs	r1, #8
   83ce0:	42a1      	cmp	r1, r4
   83ce2:	d106      	bne.n	83cf2 <_malloc_r+0x5e>
   83ce4:	e00c      	b.n	83d00 <_malloc_r+0x6c>
   83ce6:	2a00      	cmp	r2, #0
   83ce8:	f280 80ab 	bge.w	83e42 <_malloc_r+0x1ae>
   83cec:	68e4      	ldr	r4, [r4, #12]
   83cee:	42a1      	cmp	r1, r4
   83cf0:	d006      	beq.n	83d00 <_malloc_r+0x6c>
   83cf2:	6863      	ldr	r3, [r4, #4]
   83cf4:	f023 0303 	bic.w	r3, r3, #3
   83cf8:	1b9a      	subs	r2, r3, r6
   83cfa:	2a0f      	cmp	r2, #15
   83cfc:	ddf3      	ble.n	83ce6 <_malloc_r+0x52>
   83cfe:	4670      	mov	r0, lr
   83d00:	693c      	ldr	r4, [r7, #16]
   83d02:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83fd0 <_malloc_r+0x33c>
   83d06:	4574      	cmp	r4, lr
   83d08:	f000 819e 	beq.w	84048 <_malloc_r+0x3b4>
   83d0c:	6863      	ldr	r3, [r4, #4]
   83d0e:	f023 0303 	bic.w	r3, r3, #3
   83d12:	1b9a      	subs	r2, r3, r6
   83d14:	2a0f      	cmp	r2, #15
   83d16:	f300 8183 	bgt.w	84020 <_malloc_r+0x38c>
   83d1a:	2a00      	cmp	r2, #0
   83d1c:	f8c7 e014 	str.w	lr, [r7, #20]
   83d20:	f8c7 e010 	str.w	lr, [r7, #16]
   83d24:	f280 8091 	bge.w	83e4a <_malloc_r+0x1b6>
   83d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83d2c:	f080 8154 	bcs.w	83fd8 <_malloc_r+0x344>
   83d30:	2201      	movs	r2, #1
   83d32:	08db      	lsrs	r3, r3, #3
   83d34:	6879      	ldr	r1, [r7, #4]
   83d36:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83d3a:	4413      	add	r3, r2
   83d3c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   83d40:	fa02 f20c 	lsl.w	r2, r2, ip
   83d44:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83d48:	430a      	orrs	r2, r1
   83d4a:	f1ac 0108 	sub.w	r1, ip, #8
   83d4e:	60e1      	str	r1, [r4, #12]
   83d50:	f8c4 8008 	str.w	r8, [r4, #8]
   83d54:	607a      	str	r2, [r7, #4]
   83d56:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83d5a:	f8c8 400c 	str.w	r4, [r8, #12]
   83d5e:	2401      	movs	r4, #1
   83d60:	1083      	asrs	r3, r0, #2
   83d62:	409c      	lsls	r4, r3
   83d64:	4294      	cmp	r4, r2
   83d66:	d87d      	bhi.n	83e64 <_malloc_r+0x1d0>
   83d68:	4214      	tst	r4, r2
   83d6a:	d106      	bne.n	83d7a <_malloc_r+0xe6>
   83d6c:	f020 0003 	bic.w	r0, r0, #3
   83d70:	0064      	lsls	r4, r4, #1
   83d72:	4214      	tst	r4, r2
   83d74:	f100 0004 	add.w	r0, r0, #4
   83d78:	d0fa      	beq.n	83d70 <_malloc_r+0xdc>
   83d7a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   83d7e:	46cc      	mov	ip, r9
   83d80:	4680      	mov	r8, r0
   83d82:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83d86:	459c      	cmp	ip, r3
   83d88:	d107      	bne.n	83d9a <_malloc_r+0x106>
   83d8a:	e15f      	b.n	8404c <_malloc_r+0x3b8>
   83d8c:	2a00      	cmp	r2, #0
   83d8e:	f280 816d 	bge.w	8406c <_malloc_r+0x3d8>
   83d92:	68db      	ldr	r3, [r3, #12]
   83d94:	459c      	cmp	ip, r3
   83d96:	f000 8159 	beq.w	8404c <_malloc_r+0x3b8>
   83d9a:	6859      	ldr	r1, [r3, #4]
   83d9c:	f021 0103 	bic.w	r1, r1, #3
   83da0:	1b8a      	subs	r2, r1, r6
   83da2:	2a0f      	cmp	r2, #15
   83da4:	ddf2      	ble.n	83d8c <_malloc_r+0xf8>
   83da6:	68dc      	ldr	r4, [r3, #12]
   83da8:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83dac:	f046 0801 	orr.w	r8, r6, #1
   83db0:	4628      	mov	r0, r5
   83db2:	441e      	add	r6, r3
   83db4:	f042 0501 	orr.w	r5, r2, #1
   83db8:	f8c3 8004 	str.w	r8, [r3, #4]
   83dbc:	f8cc 400c 	str.w	r4, [ip, #12]
   83dc0:	f8c4 c008 	str.w	ip, [r4, #8]
   83dc4:	617e      	str	r6, [r7, #20]
   83dc6:	613e      	str	r6, [r7, #16]
   83dc8:	f8c6 e00c 	str.w	lr, [r6, #12]
   83dcc:	f8c6 e008 	str.w	lr, [r6, #8]
   83dd0:	6075      	str	r5, [r6, #4]
   83dd2:	505a      	str	r2, [r3, r1]
   83dd4:	9300      	str	r3, [sp, #0]
   83dd6:	f000 fb3b 	bl	84450 <__malloc_unlock>
   83dda:	9b00      	ldr	r3, [sp, #0]
   83ddc:	f103 0408 	add.w	r4, r3, #8
   83de0:	e01e      	b.n	83e20 <_malloc_r+0x18c>
   83de2:	2910      	cmp	r1, #16
   83de4:	d820      	bhi.n	83e28 <_malloc_r+0x194>
   83de6:	f000 fb2d 	bl	84444 <__malloc_lock>
   83dea:	2610      	movs	r6, #16
   83dec:	2318      	movs	r3, #24
   83dee:	2002      	movs	r0, #2
   83df0:	4f72      	ldr	r7, [pc, #456]	; (83fbc <_malloc_r+0x328>)
   83df2:	443b      	add	r3, r7
   83df4:	685c      	ldr	r4, [r3, #4]
   83df6:	f1a3 0208 	sub.w	r2, r3, #8
   83dfa:	4294      	cmp	r4, r2
   83dfc:	f000 812f 	beq.w	8405e <_malloc_r+0x3ca>
   83e00:	6863      	ldr	r3, [r4, #4]
   83e02:	68e1      	ldr	r1, [r4, #12]
   83e04:	f023 0303 	bic.w	r3, r3, #3
   83e08:	4423      	add	r3, r4
   83e0a:	685a      	ldr	r2, [r3, #4]
   83e0c:	68a6      	ldr	r6, [r4, #8]
   83e0e:	f042 0201 	orr.w	r2, r2, #1
   83e12:	60f1      	str	r1, [r6, #12]
   83e14:	4628      	mov	r0, r5
   83e16:	608e      	str	r6, [r1, #8]
   83e18:	605a      	str	r2, [r3, #4]
   83e1a:	f000 fb19 	bl	84450 <__malloc_unlock>
   83e1e:	3408      	adds	r4, #8
   83e20:	4620      	mov	r0, r4
   83e22:	b003      	add	sp, #12
   83e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e28:	2400      	movs	r4, #0
   83e2a:	230c      	movs	r3, #12
   83e2c:	4620      	mov	r0, r4
   83e2e:	602b      	str	r3, [r5, #0]
   83e30:	b003      	add	sp, #12
   83e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e36:	2040      	movs	r0, #64	; 0x40
   83e38:	f44f 7100 	mov.w	r1, #512	; 0x200
   83e3c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   83e40:	e74a      	b.n	83cd8 <_malloc_r+0x44>
   83e42:	4423      	add	r3, r4
   83e44:	685a      	ldr	r2, [r3, #4]
   83e46:	68e1      	ldr	r1, [r4, #12]
   83e48:	e7e0      	b.n	83e0c <_malloc_r+0x178>
   83e4a:	4423      	add	r3, r4
   83e4c:	685a      	ldr	r2, [r3, #4]
   83e4e:	4628      	mov	r0, r5
   83e50:	f042 0201 	orr.w	r2, r2, #1
   83e54:	605a      	str	r2, [r3, #4]
   83e56:	3408      	adds	r4, #8
   83e58:	f000 fafa 	bl	84450 <__malloc_unlock>
   83e5c:	4620      	mov	r0, r4
   83e5e:	b003      	add	sp, #12
   83e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e64:	68bc      	ldr	r4, [r7, #8]
   83e66:	6863      	ldr	r3, [r4, #4]
   83e68:	f023 0803 	bic.w	r8, r3, #3
   83e6c:	45b0      	cmp	r8, r6
   83e6e:	d304      	bcc.n	83e7a <_malloc_r+0x1e6>
   83e70:	eba8 0306 	sub.w	r3, r8, r6
   83e74:	2b0f      	cmp	r3, #15
   83e76:	f300 8085 	bgt.w	83f84 <_malloc_r+0x2f0>
   83e7a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83fd4 <_malloc_r+0x340>
   83e7e:	4b50      	ldr	r3, [pc, #320]	; (83fc0 <_malloc_r+0x32c>)
   83e80:	f8d9 2000 	ldr.w	r2, [r9]
   83e84:	681b      	ldr	r3, [r3, #0]
   83e86:	3201      	adds	r2, #1
   83e88:	4433      	add	r3, r6
   83e8a:	eb04 0a08 	add.w	sl, r4, r8
   83e8e:	f000 8154 	beq.w	8413a <_malloc_r+0x4a6>
   83e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83e96:	330f      	adds	r3, #15
   83e98:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83e9c:	f02b 0b0f 	bic.w	fp, fp, #15
   83ea0:	4659      	mov	r1, fp
   83ea2:	4628      	mov	r0, r5
   83ea4:	f000 fc90 	bl	847c8 <_sbrk_r>
   83ea8:	1c41      	adds	r1, r0, #1
   83eaa:	4602      	mov	r2, r0
   83eac:	f000 80fb 	beq.w	840a6 <_malloc_r+0x412>
   83eb0:	4582      	cmp	sl, r0
   83eb2:	f200 80f6 	bhi.w	840a2 <_malloc_r+0x40e>
   83eb6:	4b43      	ldr	r3, [pc, #268]	; (83fc4 <_malloc_r+0x330>)
   83eb8:	6819      	ldr	r1, [r3, #0]
   83eba:	4459      	add	r1, fp
   83ebc:	6019      	str	r1, [r3, #0]
   83ebe:	f000 814c 	beq.w	8415a <_malloc_r+0x4c6>
   83ec2:	f8d9 0000 	ldr.w	r0, [r9]
   83ec6:	3001      	adds	r0, #1
   83ec8:	bf1b      	ittet	ne
   83eca:	eba2 0a0a 	subne.w	sl, r2, sl
   83ece:	4451      	addne	r1, sl
   83ed0:	f8c9 2000 	streq.w	r2, [r9]
   83ed4:	6019      	strne	r1, [r3, #0]
   83ed6:	f012 0107 	ands.w	r1, r2, #7
   83eda:	f000 8114 	beq.w	84106 <_malloc_r+0x472>
   83ede:	f1c1 0008 	rsb	r0, r1, #8
   83ee2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83ee6:	4402      	add	r2, r0
   83ee8:	3108      	adds	r1, #8
   83eea:	eb02 090b 	add.w	r9, r2, fp
   83eee:	f3c9 090b 	ubfx	r9, r9, #0, #12
   83ef2:	eba1 0909 	sub.w	r9, r1, r9
   83ef6:	4649      	mov	r1, r9
   83ef8:	4628      	mov	r0, r5
   83efa:	9301      	str	r3, [sp, #4]
   83efc:	9200      	str	r2, [sp, #0]
   83efe:	f000 fc63 	bl	847c8 <_sbrk_r>
   83f02:	1c43      	adds	r3, r0, #1
   83f04:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83f08:	f000 8142 	beq.w	84190 <_malloc_r+0x4fc>
   83f0c:	1a80      	subs	r0, r0, r2
   83f0e:	4448      	add	r0, r9
   83f10:	f040 0001 	orr.w	r0, r0, #1
   83f14:	6819      	ldr	r1, [r3, #0]
   83f16:	42bc      	cmp	r4, r7
   83f18:	4449      	add	r1, r9
   83f1a:	60ba      	str	r2, [r7, #8]
   83f1c:	6019      	str	r1, [r3, #0]
   83f1e:	6050      	str	r0, [r2, #4]
   83f20:	d017      	beq.n	83f52 <_malloc_r+0x2be>
   83f22:	f1b8 0f0f 	cmp.w	r8, #15
   83f26:	f240 80fa 	bls.w	8411e <_malloc_r+0x48a>
   83f2a:	f04f 0c05 	mov.w	ip, #5
   83f2e:	6862      	ldr	r2, [r4, #4]
   83f30:	f1a8 000c 	sub.w	r0, r8, #12
   83f34:	f020 0007 	bic.w	r0, r0, #7
   83f38:	f002 0201 	and.w	r2, r2, #1
   83f3c:	eb04 0e00 	add.w	lr, r4, r0
   83f40:	4302      	orrs	r2, r0
   83f42:	280f      	cmp	r0, #15
   83f44:	6062      	str	r2, [r4, #4]
   83f46:	f8ce c004 	str.w	ip, [lr, #4]
   83f4a:	f8ce c008 	str.w	ip, [lr, #8]
   83f4e:	f200 8116 	bhi.w	8417e <_malloc_r+0x4ea>
   83f52:	4b1d      	ldr	r3, [pc, #116]	; (83fc8 <_malloc_r+0x334>)
   83f54:	68bc      	ldr	r4, [r7, #8]
   83f56:	681a      	ldr	r2, [r3, #0]
   83f58:	4291      	cmp	r1, r2
   83f5a:	bf88      	it	hi
   83f5c:	6019      	strhi	r1, [r3, #0]
   83f5e:	4b1b      	ldr	r3, [pc, #108]	; (83fcc <_malloc_r+0x338>)
   83f60:	681a      	ldr	r2, [r3, #0]
   83f62:	4291      	cmp	r1, r2
   83f64:	6862      	ldr	r2, [r4, #4]
   83f66:	bf88      	it	hi
   83f68:	6019      	strhi	r1, [r3, #0]
   83f6a:	f022 0203 	bic.w	r2, r2, #3
   83f6e:	4296      	cmp	r6, r2
   83f70:	eba2 0306 	sub.w	r3, r2, r6
   83f74:	d801      	bhi.n	83f7a <_malloc_r+0x2e6>
   83f76:	2b0f      	cmp	r3, #15
   83f78:	dc04      	bgt.n	83f84 <_malloc_r+0x2f0>
   83f7a:	4628      	mov	r0, r5
   83f7c:	f000 fa68 	bl	84450 <__malloc_unlock>
   83f80:	2400      	movs	r4, #0
   83f82:	e74d      	b.n	83e20 <_malloc_r+0x18c>
   83f84:	f046 0201 	orr.w	r2, r6, #1
   83f88:	f043 0301 	orr.w	r3, r3, #1
   83f8c:	4426      	add	r6, r4
   83f8e:	6062      	str	r2, [r4, #4]
   83f90:	4628      	mov	r0, r5
   83f92:	60be      	str	r6, [r7, #8]
   83f94:	3408      	adds	r4, #8
   83f96:	6073      	str	r3, [r6, #4]
   83f98:	f000 fa5a 	bl	84450 <__malloc_unlock>
   83f9c:	4620      	mov	r0, r4
   83f9e:	b003      	add	sp, #12
   83fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83fa4:	2b14      	cmp	r3, #20
   83fa6:	d970      	bls.n	8408a <_malloc_r+0x3f6>
   83fa8:	2b54      	cmp	r3, #84	; 0x54
   83faa:	f200 80a2 	bhi.w	840f2 <_malloc_r+0x45e>
   83fae:	0b33      	lsrs	r3, r6, #12
   83fb0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83fb4:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83fb8:	00c1      	lsls	r1, r0, #3
   83fba:	e68d      	b.n	83cd8 <_malloc_r+0x44>
   83fbc:	200706e0 	.word	0x200706e0
   83fc0:	20070bc0 	.word	0x20070bc0
   83fc4:	20070b90 	.word	0x20070b90
   83fc8:	20070bb8 	.word	0x20070bb8
   83fcc:	20070bbc 	.word	0x20070bbc
   83fd0:	200706e8 	.word	0x200706e8
   83fd4:	20070ae8 	.word	0x20070ae8
   83fd8:	0a5a      	lsrs	r2, r3, #9
   83fda:	2a04      	cmp	r2, #4
   83fdc:	d95b      	bls.n	84096 <_malloc_r+0x402>
   83fde:	2a14      	cmp	r2, #20
   83fe0:	f200 80ae 	bhi.w	84140 <_malloc_r+0x4ac>
   83fe4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   83fe8:	00c9      	lsls	r1, r1, #3
   83fea:	325b      	adds	r2, #91	; 0x5b
   83fec:	eb07 0c01 	add.w	ip, r7, r1
   83ff0:	5879      	ldr	r1, [r7, r1]
   83ff2:	f1ac 0c08 	sub.w	ip, ip, #8
   83ff6:	458c      	cmp	ip, r1
   83ff8:	f000 8088 	beq.w	8410c <_malloc_r+0x478>
   83ffc:	684a      	ldr	r2, [r1, #4]
   83ffe:	f022 0203 	bic.w	r2, r2, #3
   84002:	4293      	cmp	r3, r2
   84004:	d273      	bcs.n	840ee <_malloc_r+0x45a>
   84006:	6889      	ldr	r1, [r1, #8]
   84008:	458c      	cmp	ip, r1
   8400a:	d1f7      	bne.n	83ffc <_malloc_r+0x368>
   8400c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84010:	687a      	ldr	r2, [r7, #4]
   84012:	60e3      	str	r3, [r4, #12]
   84014:	f8c4 c008 	str.w	ip, [r4, #8]
   84018:	609c      	str	r4, [r3, #8]
   8401a:	f8cc 400c 	str.w	r4, [ip, #12]
   8401e:	e69e      	b.n	83d5e <_malloc_r+0xca>
   84020:	f046 0c01 	orr.w	ip, r6, #1
   84024:	f042 0101 	orr.w	r1, r2, #1
   84028:	4426      	add	r6, r4
   8402a:	f8c4 c004 	str.w	ip, [r4, #4]
   8402e:	4628      	mov	r0, r5
   84030:	617e      	str	r6, [r7, #20]
   84032:	613e      	str	r6, [r7, #16]
   84034:	f8c6 e00c 	str.w	lr, [r6, #12]
   84038:	f8c6 e008 	str.w	lr, [r6, #8]
   8403c:	6071      	str	r1, [r6, #4]
   8403e:	50e2      	str	r2, [r4, r3]
   84040:	f000 fa06 	bl	84450 <__malloc_unlock>
   84044:	3408      	adds	r4, #8
   84046:	e6eb      	b.n	83e20 <_malloc_r+0x18c>
   84048:	687a      	ldr	r2, [r7, #4]
   8404a:	e688      	b.n	83d5e <_malloc_r+0xca>
   8404c:	f108 0801 	add.w	r8, r8, #1
   84050:	f018 0f03 	tst.w	r8, #3
   84054:	f10c 0c08 	add.w	ip, ip, #8
   84058:	f47f ae93 	bne.w	83d82 <_malloc_r+0xee>
   8405c:	e02d      	b.n	840ba <_malloc_r+0x426>
   8405e:	68dc      	ldr	r4, [r3, #12]
   84060:	42a3      	cmp	r3, r4
   84062:	bf08      	it	eq
   84064:	3002      	addeq	r0, #2
   84066:	f43f ae4b 	beq.w	83d00 <_malloc_r+0x6c>
   8406a:	e6c9      	b.n	83e00 <_malloc_r+0x16c>
   8406c:	461c      	mov	r4, r3
   8406e:	4419      	add	r1, r3
   84070:	684a      	ldr	r2, [r1, #4]
   84072:	68db      	ldr	r3, [r3, #12]
   84074:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84078:	f042 0201 	orr.w	r2, r2, #1
   8407c:	604a      	str	r2, [r1, #4]
   8407e:	4628      	mov	r0, r5
   84080:	60f3      	str	r3, [r6, #12]
   84082:	609e      	str	r6, [r3, #8]
   84084:	f000 f9e4 	bl	84450 <__malloc_unlock>
   84088:	e6ca      	b.n	83e20 <_malloc_r+0x18c>
   8408a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8408e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   84092:	00c1      	lsls	r1, r0, #3
   84094:	e620      	b.n	83cd8 <_malloc_r+0x44>
   84096:	099a      	lsrs	r2, r3, #6
   84098:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8409c:	00c9      	lsls	r1, r1, #3
   8409e:	3238      	adds	r2, #56	; 0x38
   840a0:	e7a4      	b.n	83fec <_malloc_r+0x358>
   840a2:	42bc      	cmp	r4, r7
   840a4:	d054      	beq.n	84150 <_malloc_r+0x4bc>
   840a6:	68bc      	ldr	r4, [r7, #8]
   840a8:	6862      	ldr	r2, [r4, #4]
   840aa:	f022 0203 	bic.w	r2, r2, #3
   840ae:	e75e      	b.n	83f6e <_malloc_r+0x2da>
   840b0:	f859 3908 	ldr.w	r3, [r9], #-8
   840b4:	4599      	cmp	r9, r3
   840b6:	f040 8086 	bne.w	841c6 <_malloc_r+0x532>
   840ba:	f010 0f03 	tst.w	r0, #3
   840be:	f100 30ff 	add.w	r0, r0, #4294967295
   840c2:	d1f5      	bne.n	840b0 <_malloc_r+0x41c>
   840c4:	687b      	ldr	r3, [r7, #4]
   840c6:	ea23 0304 	bic.w	r3, r3, r4
   840ca:	607b      	str	r3, [r7, #4]
   840cc:	0064      	lsls	r4, r4, #1
   840ce:	429c      	cmp	r4, r3
   840d0:	f63f aec8 	bhi.w	83e64 <_malloc_r+0x1d0>
   840d4:	2c00      	cmp	r4, #0
   840d6:	f43f aec5 	beq.w	83e64 <_malloc_r+0x1d0>
   840da:	421c      	tst	r4, r3
   840dc:	4640      	mov	r0, r8
   840de:	f47f ae4c 	bne.w	83d7a <_malloc_r+0xe6>
   840e2:	0064      	lsls	r4, r4, #1
   840e4:	421c      	tst	r4, r3
   840e6:	f100 0004 	add.w	r0, r0, #4
   840ea:	d0fa      	beq.n	840e2 <_malloc_r+0x44e>
   840ec:	e645      	b.n	83d7a <_malloc_r+0xe6>
   840ee:	468c      	mov	ip, r1
   840f0:	e78c      	b.n	8400c <_malloc_r+0x378>
   840f2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   840f6:	d815      	bhi.n	84124 <_malloc_r+0x490>
   840f8:	0bf3      	lsrs	r3, r6, #15
   840fa:	f103 0078 	add.w	r0, r3, #120	; 0x78
   840fe:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84102:	00c1      	lsls	r1, r0, #3
   84104:	e5e8      	b.n	83cd8 <_malloc_r+0x44>
   84106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8410a:	e6ee      	b.n	83eea <_malloc_r+0x256>
   8410c:	2101      	movs	r1, #1
   8410e:	687b      	ldr	r3, [r7, #4]
   84110:	1092      	asrs	r2, r2, #2
   84112:	fa01 f202 	lsl.w	r2, r1, r2
   84116:	431a      	orrs	r2, r3
   84118:	607a      	str	r2, [r7, #4]
   8411a:	4663      	mov	r3, ip
   8411c:	e779      	b.n	84012 <_malloc_r+0x37e>
   8411e:	2301      	movs	r3, #1
   84120:	6053      	str	r3, [r2, #4]
   84122:	e72a      	b.n	83f7a <_malloc_r+0x2e6>
   84124:	f240 5254 	movw	r2, #1364	; 0x554
   84128:	4293      	cmp	r3, r2
   8412a:	d822      	bhi.n	84172 <_malloc_r+0x4de>
   8412c:	0cb3      	lsrs	r3, r6, #18
   8412e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84132:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84136:	00c1      	lsls	r1, r0, #3
   84138:	e5ce      	b.n	83cd8 <_malloc_r+0x44>
   8413a:	f103 0b10 	add.w	fp, r3, #16
   8413e:	e6af      	b.n	83ea0 <_malloc_r+0x20c>
   84140:	2a54      	cmp	r2, #84	; 0x54
   84142:	d829      	bhi.n	84198 <_malloc_r+0x504>
   84144:	0b1a      	lsrs	r2, r3, #12
   84146:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8414a:	00c9      	lsls	r1, r1, #3
   8414c:	326e      	adds	r2, #110	; 0x6e
   8414e:	e74d      	b.n	83fec <_malloc_r+0x358>
   84150:	4b20      	ldr	r3, [pc, #128]	; (841d4 <_malloc_r+0x540>)
   84152:	6819      	ldr	r1, [r3, #0]
   84154:	4459      	add	r1, fp
   84156:	6019      	str	r1, [r3, #0]
   84158:	e6b3      	b.n	83ec2 <_malloc_r+0x22e>
   8415a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8415e:	2800      	cmp	r0, #0
   84160:	f47f aeaf 	bne.w	83ec2 <_malloc_r+0x22e>
   84164:	eb08 030b 	add.w	r3, r8, fp
   84168:	68ba      	ldr	r2, [r7, #8]
   8416a:	f043 0301 	orr.w	r3, r3, #1
   8416e:	6053      	str	r3, [r2, #4]
   84170:	e6ef      	b.n	83f52 <_malloc_r+0x2be>
   84172:	207f      	movs	r0, #127	; 0x7f
   84174:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84178:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8417c:	e5ac      	b.n	83cd8 <_malloc_r+0x44>
   8417e:	f104 0108 	add.w	r1, r4, #8
   84182:	4628      	mov	r0, r5
   84184:	9300      	str	r3, [sp, #0]
   84186:	f7ff fa67 	bl	83658 <_free_r>
   8418a:	9b00      	ldr	r3, [sp, #0]
   8418c:	6819      	ldr	r1, [r3, #0]
   8418e:	e6e0      	b.n	83f52 <_malloc_r+0x2be>
   84190:	2001      	movs	r0, #1
   84192:	f04f 0900 	mov.w	r9, #0
   84196:	e6bd      	b.n	83f14 <_malloc_r+0x280>
   84198:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8419c:	d805      	bhi.n	841aa <_malloc_r+0x516>
   8419e:	0bda      	lsrs	r2, r3, #15
   841a0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   841a4:	00c9      	lsls	r1, r1, #3
   841a6:	3277      	adds	r2, #119	; 0x77
   841a8:	e720      	b.n	83fec <_malloc_r+0x358>
   841aa:	f240 5154 	movw	r1, #1364	; 0x554
   841ae:	428a      	cmp	r2, r1
   841b0:	d805      	bhi.n	841be <_malloc_r+0x52a>
   841b2:	0c9a      	lsrs	r2, r3, #18
   841b4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   841b8:	00c9      	lsls	r1, r1, #3
   841ba:	327c      	adds	r2, #124	; 0x7c
   841bc:	e716      	b.n	83fec <_malloc_r+0x358>
   841be:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   841c2:	227e      	movs	r2, #126	; 0x7e
   841c4:	e712      	b.n	83fec <_malloc_r+0x358>
   841c6:	687b      	ldr	r3, [r7, #4]
   841c8:	e780      	b.n	840cc <_malloc_r+0x438>
   841ca:	08f0      	lsrs	r0, r6, #3
   841cc:	f106 0308 	add.w	r3, r6, #8
   841d0:	e60e      	b.n	83df0 <_malloc_r+0x15c>
   841d2:	bf00      	nop
   841d4:	20070b90 	.word	0x20070b90

000841d8 <__ascii_mbtowc>:
   841d8:	b082      	sub	sp, #8
   841da:	b149      	cbz	r1, 841f0 <__ascii_mbtowc+0x18>
   841dc:	b15a      	cbz	r2, 841f6 <__ascii_mbtowc+0x1e>
   841de:	b16b      	cbz	r3, 841fc <__ascii_mbtowc+0x24>
   841e0:	7813      	ldrb	r3, [r2, #0]
   841e2:	600b      	str	r3, [r1, #0]
   841e4:	7812      	ldrb	r2, [r2, #0]
   841e6:	1c10      	adds	r0, r2, #0
   841e8:	bf18      	it	ne
   841ea:	2001      	movne	r0, #1
   841ec:	b002      	add	sp, #8
   841ee:	4770      	bx	lr
   841f0:	a901      	add	r1, sp, #4
   841f2:	2a00      	cmp	r2, #0
   841f4:	d1f3      	bne.n	841de <__ascii_mbtowc+0x6>
   841f6:	4610      	mov	r0, r2
   841f8:	b002      	add	sp, #8
   841fa:	4770      	bx	lr
   841fc:	f06f 0001 	mvn.w	r0, #1
   84200:	e7f4      	b.n	841ec <__ascii_mbtowc+0x14>
   84202:	bf00      	nop

00084204 <memchr>:
   84204:	0783      	lsls	r3, r0, #30
   84206:	b470      	push	{r4, r5, r6}
   84208:	b2cd      	uxtb	r5, r1
   8420a:	d03d      	beq.n	84288 <memchr+0x84>
   8420c:	1e54      	subs	r4, r2, #1
   8420e:	b30a      	cbz	r2, 84254 <memchr+0x50>
   84210:	7803      	ldrb	r3, [r0, #0]
   84212:	42ab      	cmp	r3, r5
   84214:	d01f      	beq.n	84256 <memchr+0x52>
   84216:	1c43      	adds	r3, r0, #1
   84218:	e005      	b.n	84226 <memchr+0x22>
   8421a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8421e:	d319      	bcc.n	84254 <memchr+0x50>
   84220:	7802      	ldrb	r2, [r0, #0]
   84222:	42aa      	cmp	r2, r5
   84224:	d017      	beq.n	84256 <memchr+0x52>
   84226:	f013 0f03 	tst.w	r3, #3
   8422a:	4618      	mov	r0, r3
   8422c:	f103 0301 	add.w	r3, r3, #1
   84230:	d1f3      	bne.n	8421a <memchr+0x16>
   84232:	2c03      	cmp	r4, #3
   84234:	d811      	bhi.n	8425a <memchr+0x56>
   84236:	b34c      	cbz	r4, 8428c <memchr+0x88>
   84238:	7803      	ldrb	r3, [r0, #0]
   8423a:	42ab      	cmp	r3, r5
   8423c:	d00b      	beq.n	84256 <memchr+0x52>
   8423e:	4404      	add	r4, r0
   84240:	1c43      	adds	r3, r0, #1
   84242:	e002      	b.n	8424a <memchr+0x46>
   84244:	7802      	ldrb	r2, [r0, #0]
   84246:	42aa      	cmp	r2, r5
   84248:	d005      	beq.n	84256 <memchr+0x52>
   8424a:	429c      	cmp	r4, r3
   8424c:	4618      	mov	r0, r3
   8424e:	f103 0301 	add.w	r3, r3, #1
   84252:	d1f7      	bne.n	84244 <memchr+0x40>
   84254:	2000      	movs	r0, #0
   84256:	bc70      	pop	{r4, r5, r6}
   84258:	4770      	bx	lr
   8425a:	0209      	lsls	r1, r1, #8
   8425c:	b289      	uxth	r1, r1
   8425e:	4329      	orrs	r1, r5
   84260:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84264:	6803      	ldr	r3, [r0, #0]
   84266:	4606      	mov	r6, r0
   84268:	404b      	eors	r3, r1
   8426a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8426e:	ea22 0303 	bic.w	r3, r2, r3
   84272:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84276:	f100 0004 	add.w	r0, r0, #4
   8427a:	d103      	bne.n	84284 <memchr+0x80>
   8427c:	3c04      	subs	r4, #4
   8427e:	2c03      	cmp	r4, #3
   84280:	d8f0      	bhi.n	84264 <memchr+0x60>
   84282:	e7d8      	b.n	84236 <memchr+0x32>
   84284:	4630      	mov	r0, r6
   84286:	e7d7      	b.n	84238 <memchr+0x34>
   84288:	4614      	mov	r4, r2
   8428a:	e7d2      	b.n	84232 <memchr+0x2e>
   8428c:	4620      	mov	r0, r4
   8428e:	e7e2      	b.n	84256 <memchr+0x52>

00084290 <memcpy>:
   84290:	4684      	mov	ip, r0
   84292:	ea41 0300 	orr.w	r3, r1, r0
   84296:	f013 0303 	ands.w	r3, r3, #3
   8429a:	d149      	bne.n	84330 <memcpy+0xa0>
   8429c:	3a40      	subs	r2, #64	; 0x40
   8429e:	d323      	bcc.n	842e8 <memcpy+0x58>
   842a0:	680b      	ldr	r3, [r1, #0]
   842a2:	6003      	str	r3, [r0, #0]
   842a4:	684b      	ldr	r3, [r1, #4]
   842a6:	6043      	str	r3, [r0, #4]
   842a8:	688b      	ldr	r3, [r1, #8]
   842aa:	6083      	str	r3, [r0, #8]
   842ac:	68cb      	ldr	r3, [r1, #12]
   842ae:	60c3      	str	r3, [r0, #12]
   842b0:	690b      	ldr	r3, [r1, #16]
   842b2:	6103      	str	r3, [r0, #16]
   842b4:	694b      	ldr	r3, [r1, #20]
   842b6:	6143      	str	r3, [r0, #20]
   842b8:	698b      	ldr	r3, [r1, #24]
   842ba:	6183      	str	r3, [r0, #24]
   842bc:	69cb      	ldr	r3, [r1, #28]
   842be:	61c3      	str	r3, [r0, #28]
   842c0:	6a0b      	ldr	r3, [r1, #32]
   842c2:	6203      	str	r3, [r0, #32]
   842c4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   842c6:	6243      	str	r3, [r0, #36]	; 0x24
   842c8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   842ca:	6283      	str	r3, [r0, #40]	; 0x28
   842cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   842ce:	62c3      	str	r3, [r0, #44]	; 0x2c
   842d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   842d2:	6303      	str	r3, [r0, #48]	; 0x30
   842d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   842d6:	6343      	str	r3, [r0, #52]	; 0x34
   842d8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   842da:	6383      	str	r3, [r0, #56]	; 0x38
   842dc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   842de:	63c3      	str	r3, [r0, #60]	; 0x3c
   842e0:	3040      	adds	r0, #64	; 0x40
   842e2:	3140      	adds	r1, #64	; 0x40
   842e4:	3a40      	subs	r2, #64	; 0x40
   842e6:	d2db      	bcs.n	842a0 <memcpy+0x10>
   842e8:	3230      	adds	r2, #48	; 0x30
   842ea:	d30b      	bcc.n	84304 <memcpy+0x74>
   842ec:	680b      	ldr	r3, [r1, #0]
   842ee:	6003      	str	r3, [r0, #0]
   842f0:	684b      	ldr	r3, [r1, #4]
   842f2:	6043      	str	r3, [r0, #4]
   842f4:	688b      	ldr	r3, [r1, #8]
   842f6:	6083      	str	r3, [r0, #8]
   842f8:	68cb      	ldr	r3, [r1, #12]
   842fa:	60c3      	str	r3, [r0, #12]
   842fc:	3010      	adds	r0, #16
   842fe:	3110      	adds	r1, #16
   84300:	3a10      	subs	r2, #16
   84302:	d2f3      	bcs.n	842ec <memcpy+0x5c>
   84304:	320c      	adds	r2, #12
   84306:	d305      	bcc.n	84314 <memcpy+0x84>
   84308:	f851 3b04 	ldr.w	r3, [r1], #4
   8430c:	f840 3b04 	str.w	r3, [r0], #4
   84310:	3a04      	subs	r2, #4
   84312:	d2f9      	bcs.n	84308 <memcpy+0x78>
   84314:	3204      	adds	r2, #4
   84316:	d008      	beq.n	8432a <memcpy+0x9a>
   84318:	07d2      	lsls	r2, r2, #31
   8431a:	bf1c      	itt	ne
   8431c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84320:	f800 3b01 	strbne.w	r3, [r0], #1
   84324:	d301      	bcc.n	8432a <memcpy+0x9a>
   84326:	880b      	ldrh	r3, [r1, #0]
   84328:	8003      	strh	r3, [r0, #0]
   8432a:	4660      	mov	r0, ip
   8432c:	4770      	bx	lr
   8432e:	bf00      	nop
   84330:	2a08      	cmp	r2, #8
   84332:	d313      	bcc.n	8435c <memcpy+0xcc>
   84334:	078b      	lsls	r3, r1, #30
   84336:	d0b1      	beq.n	8429c <memcpy+0xc>
   84338:	f010 0303 	ands.w	r3, r0, #3
   8433c:	d0ae      	beq.n	8429c <memcpy+0xc>
   8433e:	f1c3 0304 	rsb	r3, r3, #4
   84342:	1ad2      	subs	r2, r2, r3
   84344:	07db      	lsls	r3, r3, #31
   84346:	bf1c      	itt	ne
   84348:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8434c:	f800 3b01 	strbne.w	r3, [r0], #1
   84350:	d3a4      	bcc.n	8429c <memcpy+0xc>
   84352:	f831 3b02 	ldrh.w	r3, [r1], #2
   84356:	f820 3b02 	strh.w	r3, [r0], #2
   8435a:	e79f      	b.n	8429c <memcpy+0xc>
   8435c:	3a04      	subs	r2, #4
   8435e:	d3d9      	bcc.n	84314 <memcpy+0x84>
   84360:	3a01      	subs	r2, #1
   84362:	f811 3b01 	ldrb.w	r3, [r1], #1
   84366:	f800 3b01 	strb.w	r3, [r0], #1
   8436a:	d2f9      	bcs.n	84360 <memcpy+0xd0>
   8436c:	780b      	ldrb	r3, [r1, #0]
   8436e:	7003      	strb	r3, [r0, #0]
   84370:	784b      	ldrb	r3, [r1, #1]
   84372:	7043      	strb	r3, [r0, #1]
   84374:	788b      	ldrb	r3, [r1, #2]
   84376:	7083      	strb	r3, [r0, #2]
   84378:	4660      	mov	r0, ip
   8437a:	4770      	bx	lr

0008437c <memmove>:
   8437c:	4288      	cmp	r0, r1
   8437e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84380:	d90d      	bls.n	8439e <memmove+0x22>
   84382:	188b      	adds	r3, r1, r2
   84384:	4298      	cmp	r0, r3
   84386:	d20a      	bcs.n	8439e <memmove+0x22>
   84388:	1884      	adds	r4, r0, r2
   8438a:	2a00      	cmp	r2, #0
   8438c:	d051      	beq.n	84432 <memmove+0xb6>
   8438e:	4622      	mov	r2, r4
   84390:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84394:	4299      	cmp	r1, r3
   84396:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8439a:	d1f9      	bne.n	84390 <memmove+0x14>
   8439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8439e:	2a0f      	cmp	r2, #15
   843a0:	d948      	bls.n	84434 <memmove+0xb8>
   843a2:	ea41 0300 	orr.w	r3, r1, r0
   843a6:	079b      	lsls	r3, r3, #30
   843a8:	d146      	bne.n	84438 <memmove+0xbc>
   843aa:	4615      	mov	r5, r2
   843ac:	f100 0410 	add.w	r4, r0, #16
   843b0:	f101 0310 	add.w	r3, r1, #16
   843b4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   843b8:	3d10      	subs	r5, #16
   843ba:	f844 6c10 	str.w	r6, [r4, #-16]
   843be:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   843c2:	2d0f      	cmp	r5, #15
   843c4:	f844 6c0c 	str.w	r6, [r4, #-12]
   843c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   843cc:	f104 0410 	add.w	r4, r4, #16
   843d0:	f844 6c18 	str.w	r6, [r4, #-24]
   843d4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   843d8:	f103 0310 	add.w	r3, r3, #16
   843dc:	f844 6c14 	str.w	r6, [r4, #-20]
   843e0:	d8e8      	bhi.n	843b4 <memmove+0x38>
   843e2:	f1a2 0310 	sub.w	r3, r2, #16
   843e6:	f023 030f 	bic.w	r3, r3, #15
   843ea:	f002 0e0f 	and.w	lr, r2, #15
   843ee:	3310      	adds	r3, #16
   843f0:	f1be 0f03 	cmp.w	lr, #3
   843f4:	4419      	add	r1, r3
   843f6:	4403      	add	r3, r0
   843f8:	d921      	bls.n	8443e <memmove+0xc2>
   843fa:	460e      	mov	r6, r1
   843fc:	4674      	mov	r4, lr
   843fe:	1f1d      	subs	r5, r3, #4
   84400:	f856 7b04 	ldr.w	r7, [r6], #4
   84404:	3c04      	subs	r4, #4
   84406:	2c03      	cmp	r4, #3
   84408:	f845 7f04 	str.w	r7, [r5, #4]!
   8440c:	d8f8      	bhi.n	84400 <memmove+0x84>
   8440e:	f1ae 0404 	sub.w	r4, lr, #4
   84412:	f024 0403 	bic.w	r4, r4, #3
   84416:	3404      	adds	r4, #4
   84418:	4421      	add	r1, r4
   8441a:	4423      	add	r3, r4
   8441c:	f002 0203 	and.w	r2, r2, #3
   84420:	b162      	cbz	r2, 8443c <memmove+0xc0>
   84422:	3b01      	subs	r3, #1
   84424:	440a      	add	r2, r1
   84426:	f811 4b01 	ldrb.w	r4, [r1], #1
   8442a:	428a      	cmp	r2, r1
   8442c:	f803 4f01 	strb.w	r4, [r3, #1]!
   84430:	d1f9      	bne.n	84426 <memmove+0xaa>
   84432:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84434:	4603      	mov	r3, r0
   84436:	e7f3      	b.n	84420 <memmove+0xa4>
   84438:	4603      	mov	r3, r0
   8443a:	e7f2      	b.n	84422 <memmove+0xa6>
   8443c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8443e:	4672      	mov	r2, lr
   84440:	e7ee      	b.n	84420 <memmove+0xa4>
   84442:	bf00      	nop

00084444 <__malloc_lock>:
   84444:	4801      	ldr	r0, [pc, #4]	; (8444c <__malloc_lock+0x8>)
   84446:	f7ff bba1 	b.w	83b8c <__retarget_lock_acquire_recursive>
   8444a:	bf00      	nop
   8444c:	20070be0 	.word	0x20070be0

00084450 <__malloc_unlock>:
   84450:	4801      	ldr	r0, [pc, #4]	; (84458 <__malloc_unlock+0x8>)
   84452:	f7ff bb9d 	b.w	83b90 <__retarget_lock_release_recursive>
   84456:	bf00      	nop
   84458:	20070be0 	.word	0x20070be0

0008445c <_realloc_r>:
   8445c:	2900      	cmp	r1, #0
   8445e:	f000 8094 	beq.w	8458a <_realloc_r+0x12e>
   84462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84466:	460c      	mov	r4, r1
   84468:	4615      	mov	r5, r2
   8446a:	b083      	sub	sp, #12
   8446c:	4680      	mov	r8, r0
   8446e:	f105 060b 	add.w	r6, r5, #11
   84472:	f7ff ffe7 	bl	84444 <__malloc_lock>
   84476:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8447a:	2e16      	cmp	r6, #22
   8447c:	f02e 0703 	bic.w	r7, lr, #3
   84480:	f1a4 0908 	sub.w	r9, r4, #8
   84484:	d83c      	bhi.n	84500 <_realloc_r+0xa4>
   84486:	2210      	movs	r2, #16
   84488:	4616      	mov	r6, r2
   8448a:	42b5      	cmp	r5, r6
   8448c:	d83d      	bhi.n	8450a <_realloc_r+0xae>
   8448e:	4297      	cmp	r7, r2
   84490:	da43      	bge.n	8451a <_realloc_r+0xbe>
   84492:	4bc6      	ldr	r3, [pc, #792]	; (847ac <_realloc_r+0x350>)
   84494:	eb09 0007 	add.w	r0, r9, r7
   84498:	6899      	ldr	r1, [r3, #8]
   8449a:	4288      	cmp	r0, r1
   8449c:	f000 80c3 	beq.w	84626 <_realloc_r+0x1ca>
   844a0:	6843      	ldr	r3, [r0, #4]
   844a2:	f023 0101 	bic.w	r1, r3, #1
   844a6:	4401      	add	r1, r0
   844a8:	6849      	ldr	r1, [r1, #4]
   844aa:	07c9      	lsls	r1, r1, #31
   844ac:	d54d      	bpl.n	8454a <_realloc_r+0xee>
   844ae:	f01e 0f01 	tst.w	lr, #1
   844b2:	f000 809b 	beq.w	845ec <_realloc_r+0x190>
   844b6:	4629      	mov	r1, r5
   844b8:	4640      	mov	r0, r8
   844ba:	f7ff fbeb 	bl	83c94 <_malloc_r>
   844be:	4605      	mov	r5, r0
   844c0:	2800      	cmp	r0, #0
   844c2:	d03b      	beq.n	8453c <_realloc_r+0xe0>
   844c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   844c8:	f1a0 0208 	sub.w	r2, r0, #8
   844cc:	f023 0301 	bic.w	r3, r3, #1
   844d0:	444b      	add	r3, r9
   844d2:	429a      	cmp	r2, r3
   844d4:	f000 812b 	beq.w	8472e <_realloc_r+0x2d2>
   844d8:	1f3a      	subs	r2, r7, #4
   844da:	2a24      	cmp	r2, #36	; 0x24
   844dc:	f200 8118 	bhi.w	84710 <_realloc_r+0x2b4>
   844e0:	2a13      	cmp	r2, #19
   844e2:	f200 80eb 	bhi.w	846bc <_realloc_r+0x260>
   844e6:	4603      	mov	r3, r0
   844e8:	4622      	mov	r2, r4
   844ea:	6811      	ldr	r1, [r2, #0]
   844ec:	6019      	str	r1, [r3, #0]
   844ee:	6851      	ldr	r1, [r2, #4]
   844f0:	6059      	str	r1, [r3, #4]
   844f2:	6892      	ldr	r2, [r2, #8]
   844f4:	609a      	str	r2, [r3, #8]
   844f6:	4621      	mov	r1, r4
   844f8:	4640      	mov	r0, r8
   844fa:	f7ff f8ad 	bl	83658 <_free_r>
   844fe:	e01d      	b.n	8453c <_realloc_r+0xe0>
   84500:	f026 0607 	bic.w	r6, r6, #7
   84504:	2e00      	cmp	r6, #0
   84506:	4632      	mov	r2, r6
   84508:	dabf      	bge.n	8448a <_realloc_r+0x2e>
   8450a:	2500      	movs	r5, #0
   8450c:	230c      	movs	r3, #12
   8450e:	4628      	mov	r0, r5
   84510:	f8c8 3000 	str.w	r3, [r8]
   84514:	b003      	add	sp, #12
   84516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8451a:	4625      	mov	r5, r4
   8451c:	1bbb      	subs	r3, r7, r6
   8451e:	2b0f      	cmp	r3, #15
   84520:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84524:	d81d      	bhi.n	84562 <_realloc_r+0x106>
   84526:	f002 0201 	and.w	r2, r2, #1
   8452a:	433a      	orrs	r2, r7
   8452c:	eb09 0107 	add.w	r1, r9, r7
   84530:	f8c9 2004 	str.w	r2, [r9, #4]
   84534:	684b      	ldr	r3, [r1, #4]
   84536:	f043 0301 	orr.w	r3, r3, #1
   8453a:	604b      	str	r3, [r1, #4]
   8453c:	4640      	mov	r0, r8
   8453e:	f7ff ff87 	bl	84450 <__malloc_unlock>
   84542:	4628      	mov	r0, r5
   84544:	b003      	add	sp, #12
   84546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8454a:	f023 0303 	bic.w	r3, r3, #3
   8454e:	18f9      	adds	r1, r7, r3
   84550:	4291      	cmp	r1, r2
   84552:	db1d      	blt.n	84590 <_realloc_r+0x134>
   84554:	68c3      	ldr	r3, [r0, #12]
   84556:	6882      	ldr	r2, [r0, #8]
   84558:	4625      	mov	r5, r4
   8455a:	60d3      	str	r3, [r2, #12]
   8455c:	460f      	mov	r7, r1
   8455e:	609a      	str	r2, [r3, #8]
   84560:	e7dc      	b.n	8451c <_realloc_r+0xc0>
   84562:	f002 0201 	and.w	r2, r2, #1
   84566:	eb09 0106 	add.w	r1, r9, r6
   8456a:	f043 0301 	orr.w	r3, r3, #1
   8456e:	4332      	orrs	r2, r6
   84570:	f8c9 2004 	str.w	r2, [r9, #4]
   84574:	444f      	add	r7, r9
   84576:	604b      	str	r3, [r1, #4]
   84578:	687b      	ldr	r3, [r7, #4]
   8457a:	3108      	adds	r1, #8
   8457c:	f043 0301 	orr.w	r3, r3, #1
   84580:	607b      	str	r3, [r7, #4]
   84582:	4640      	mov	r0, r8
   84584:	f7ff f868 	bl	83658 <_free_r>
   84588:	e7d8      	b.n	8453c <_realloc_r+0xe0>
   8458a:	4611      	mov	r1, r2
   8458c:	f7ff bb82 	b.w	83c94 <_malloc_r>
   84590:	f01e 0f01 	tst.w	lr, #1
   84594:	d18f      	bne.n	844b6 <_realloc_r+0x5a>
   84596:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8459a:	eba9 0a01 	sub.w	sl, r9, r1
   8459e:	f8da 1004 	ldr.w	r1, [sl, #4]
   845a2:	f021 0103 	bic.w	r1, r1, #3
   845a6:	440b      	add	r3, r1
   845a8:	443b      	add	r3, r7
   845aa:	4293      	cmp	r3, r2
   845ac:	db26      	blt.n	845fc <_realloc_r+0x1a0>
   845ae:	4655      	mov	r5, sl
   845b0:	68c1      	ldr	r1, [r0, #12]
   845b2:	6880      	ldr	r0, [r0, #8]
   845b4:	1f3a      	subs	r2, r7, #4
   845b6:	60c1      	str	r1, [r0, #12]
   845b8:	6088      	str	r0, [r1, #8]
   845ba:	f855 0f08 	ldr.w	r0, [r5, #8]!
   845be:	f8da 100c 	ldr.w	r1, [sl, #12]
   845c2:	2a24      	cmp	r2, #36	; 0x24
   845c4:	60c1      	str	r1, [r0, #12]
   845c6:	6088      	str	r0, [r1, #8]
   845c8:	d826      	bhi.n	84618 <_realloc_r+0x1bc>
   845ca:	2a13      	cmp	r2, #19
   845cc:	f240 8081 	bls.w	846d2 <_realloc_r+0x276>
   845d0:	6821      	ldr	r1, [r4, #0]
   845d2:	2a1b      	cmp	r2, #27
   845d4:	f8ca 1008 	str.w	r1, [sl, #8]
   845d8:	6861      	ldr	r1, [r4, #4]
   845da:	f8ca 100c 	str.w	r1, [sl, #12]
   845de:	f200 80ad 	bhi.w	8473c <_realloc_r+0x2e0>
   845e2:	f104 0008 	add.w	r0, r4, #8
   845e6:	f10a 0210 	add.w	r2, sl, #16
   845ea:	e074      	b.n	846d6 <_realloc_r+0x27a>
   845ec:	f854 3c08 	ldr.w	r3, [r4, #-8]
   845f0:	eba9 0a03 	sub.w	sl, r9, r3
   845f4:	f8da 1004 	ldr.w	r1, [sl, #4]
   845f8:	f021 0103 	bic.w	r1, r1, #3
   845fc:	187b      	adds	r3, r7, r1
   845fe:	4293      	cmp	r3, r2
   84600:	f6ff af59 	blt.w	844b6 <_realloc_r+0x5a>
   84604:	4655      	mov	r5, sl
   84606:	f8da 100c 	ldr.w	r1, [sl, #12]
   8460a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8460e:	1f3a      	subs	r2, r7, #4
   84610:	2a24      	cmp	r2, #36	; 0x24
   84612:	60c1      	str	r1, [r0, #12]
   84614:	6088      	str	r0, [r1, #8]
   84616:	d9d8      	bls.n	845ca <_realloc_r+0x16e>
   84618:	4621      	mov	r1, r4
   8461a:	4628      	mov	r0, r5
   8461c:	461f      	mov	r7, r3
   8461e:	46d1      	mov	r9, sl
   84620:	f7ff feac 	bl	8437c <memmove>
   84624:	e77a      	b.n	8451c <_realloc_r+0xc0>
   84626:	6841      	ldr	r1, [r0, #4]
   84628:	f106 0010 	add.w	r0, r6, #16
   8462c:	f021 0b03 	bic.w	fp, r1, #3
   84630:	44bb      	add	fp, r7
   84632:	4583      	cmp	fp, r0
   84634:	da58      	bge.n	846e8 <_realloc_r+0x28c>
   84636:	f01e 0f01 	tst.w	lr, #1
   8463a:	f47f af3c 	bne.w	844b6 <_realloc_r+0x5a>
   8463e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84642:	eba9 0a01 	sub.w	sl, r9, r1
   84646:	f8da 1004 	ldr.w	r1, [sl, #4]
   8464a:	f021 0103 	bic.w	r1, r1, #3
   8464e:	448b      	add	fp, r1
   84650:	4558      	cmp	r0, fp
   84652:	dcd3      	bgt.n	845fc <_realloc_r+0x1a0>
   84654:	4655      	mov	r5, sl
   84656:	f8da 100c 	ldr.w	r1, [sl, #12]
   8465a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8465e:	1f3a      	subs	r2, r7, #4
   84660:	2a24      	cmp	r2, #36	; 0x24
   84662:	60c1      	str	r1, [r0, #12]
   84664:	6088      	str	r0, [r1, #8]
   84666:	f200 808d 	bhi.w	84784 <_realloc_r+0x328>
   8466a:	2a13      	cmp	r2, #19
   8466c:	f240 8087 	bls.w	8477e <_realloc_r+0x322>
   84670:	6821      	ldr	r1, [r4, #0]
   84672:	2a1b      	cmp	r2, #27
   84674:	f8ca 1008 	str.w	r1, [sl, #8]
   84678:	6861      	ldr	r1, [r4, #4]
   8467a:	f8ca 100c 	str.w	r1, [sl, #12]
   8467e:	f200 8088 	bhi.w	84792 <_realloc_r+0x336>
   84682:	f104 0108 	add.w	r1, r4, #8
   84686:	f10a 0210 	add.w	r2, sl, #16
   8468a:	6808      	ldr	r0, [r1, #0]
   8468c:	6010      	str	r0, [r2, #0]
   8468e:	6848      	ldr	r0, [r1, #4]
   84690:	6050      	str	r0, [r2, #4]
   84692:	6889      	ldr	r1, [r1, #8]
   84694:	6091      	str	r1, [r2, #8]
   84696:	ebab 0206 	sub.w	r2, fp, r6
   8469a:	eb0a 0106 	add.w	r1, sl, r6
   8469e:	f042 0201 	orr.w	r2, r2, #1
   846a2:	6099      	str	r1, [r3, #8]
   846a4:	604a      	str	r2, [r1, #4]
   846a6:	f8da 3004 	ldr.w	r3, [sl, #4]
   846aa:	4640      	mov	r0, r8
   846ac:	f003 0301 	and.w	r3, r3, #1
   846b0:	431e      	orrs	r6, r3
   846b2:	f8ca 6004 	str.w	r6, [sl, #4]
   846b6:	f7ff fecb 	bl	84450 <__malloc_unlock>
   846ba:	e742      	b.n	84542 <_realloc_r+0xe6>
   846bc:	6823      	ldr	r3, [r4, #0]
   846be:	2a1b      	cmp	r2, #27
   846c0:	6003      	str	r3, [r0, #0]
   846c2:	6863      	ldr	r3, [r4, #4]
   846c4:	6043      	str	r3, [r0, #4]
   846c6:	d827      	bhi.n	84718 <_realloc_r+0x2bc>
   846c8:	f100 0308 	add.w	r3, r0, #8
   846cc:	f104 0208 	add.w	r2, r4, #8
   846d0:	e70b      	b.n	844ea <_realloc_r+0x8e>
   846d2:	4620      	mov	r0, r4
   846d4:	462a      	mov	r2, r5
   846d6:	6801      	ldr	r1, [r0, #0]
   846d8:	461f      	mov	r7, r3
   846da:	6011      	str	r1, [r2, #0]
   846dc:	6841      	ldr	r1, [r0, #4]
   846de:	46d1      	mov	r9, sl
   846e0:	6051      	str	r1, [r2, #4]
   846e2:	6883      	ldr	r3, [r0, #8]
   846e4:	6093      	str	r3, [r2, #8]
   846e6:	e719      	b.n	8451c <_realloc_r+0xc0>
   846e8:	ebab 0b06 	sub.w	fp, fp, r6
   846ec:	eb09 0106 	add.w	r1, r9, r6
   846f0:	f04b 0201 	orr.w	r2, fp, #1
   846f4:	6099      	str	r1, [r3, #8]
   846f6:	604a      	str	r2, [r1, #4]
   846f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   846fc:	4640      	mov	r0, r8
   846fe:	f003 0301 	and.w	r3, r3, #1
   84702:	431e      	orrs	r6, r3
   84704:	f844 6c04 	str.w	r6, [r4, #-4]
   84708:	f7ff fea2 	bl	84450 <__malloc_unlock>
   8470c:	4625      	mov	r5, r4
   8470e:	e718      	b.n	84542 <_realloc_r+0xe6>
   84710:	4621      	mov	r1, r4
   84712:	f7ff fe33 	bl	8437c <memmove>
   84716:	e6ee      	b.n	844f6 <_realloc_r+0x9a>
   84718:	68a3      	ldr	r3, [r4, #8]
   8471a:	2a24      	cmp	r2, #36	; 0x24
   8471c:	6083      	str	r3, [r0, #8]
   8471e:	68e3      	ldr	r3, [r4, #12]
   84720:	60c3      	str	r3, [r0, #12]
   84722:	d018      	beq.n	84756 <_realloc_r+0x2fa>
   84724:	f100 0310 	add.w	r3, r0, #16
   84728:	f104 0210 	add.w	r2, r4, #16
   8472c:	e6dd      	b.n	844ea <_realloc_r+0x8e>
   8472e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84732:	4625      	mov	r5, r4
   84734:	f023 0303 	bic.w	r3, r3, #3
   84738:	441f      	add	r7, r3
   8473a:	e6ef      	b.n	8451c <_realloc_r+0xc0>
   8473c:	68a1      	ldr	r1, [r4, #8]
   8473e:	2a24      	cmp	r2, #36	; 0x24
   84740:	f8ca 1010 	str.w	r1, [sl, #16]
   84744:	68e1      	ldr	r1, [r4, #12]
   84746:	f8ca 1014 	str.w	r1, [sl, #20]
   8474a:	d00d      	beq.n	84768 <_realloc_r+0x30c>
   8474c:	f104 0010 	add.w	r0, r4, #16
   84750:	f10a 0218 	add.w	r2, sl, #24
   84754:	e7bf      	b.n	846d6 <_realloc_r+0x27a>
   84756:	6922      	ldr	r2, [r4, #16]
   84758:	f100 0318 	add.w	r3, r0, #24
   8475c:	6102      	str	r2, [r0, #16]
   8475e:	6961      	ldr	r1, [r4, #20]
   84760:	f104 0218 	add.w	r2, r4, #24
   84764:	6141      	str	r1, [r0, #20]
   84766:	e6c0      	b.n	844ea <_realloc_r+0x8e>
   84768:	6922      	ldr	r2, [r4, #16]
   8476a:	f104 0018 	add.w	r0, r4, #24
   8476e:	f8ca 2018 	str.w	r2, [sl, #24]
   84772:	6961      	ldr	r1, [r4, #20]
   84774:	f10a 0220 	add.w	r2, sl, #32
   84778:	f8ca 101c 	str.w	r1, [sl, #28]
   8477c:	e7ab      	b.n	846d6 <_realloc_r+0x27a>
   8477e:	4621      	mov	r1, r4
   84780:	462a      	mov	r2, r5
   84782:	e782      	b.n	8468a <_realloc_r+0x22e>
   84784:	4621      	mov	r1, r4
   84786:	4628      	mov	r0, r5
   84788:	9301      	str	r3, [sp, #4]
   8478a:	f7ff fdf7 	bl	8437c <memmove>
   8478e:	9b01      	ldr	r3, [sp, #4]
   84790:	e781      	b.n	84696 <_realloc_r+0x23a>
   84792:	68a1      	ldr	r1, [r4, #8]
   84794:	2a24      	cmp	r2, #36	; 0x24
   84796:	f8ca 1010 	str.w	r1, [sl, #16]
   8479a:	68e1      	ldr	r1, [r4, #12]
   8479c:	f8ca 1014 	str.w	r1, [sl, #20]
   847a0:	d006      	beq.n	847b0 <_realloc_r+0x354>
   847a2:	f104 0110 	add.w	r1, r4, #16
   847a6:	f10a 0218 	add.w	r2, sl, #24
   847aa:	e76e      	b.n	8468a <_realloc_r+0x22e>
   847ac:	200706e0 	.word	0x200706e0
   847b0:	6922      	ldr	r2, [r4, #16]
   847b2:	f104 0118 	add.w	r1, r4, #24
   847b6:	f8ca 2018 	str.w	r2, [sl, #24]
   847ba:	6960      	ldr	r0, [r4, #20]
   847bc:	f10a 0220 	add.w	r2, sl, #32
   847c0:	f8ca 001c 	str.w	r0, [sl, #28]
   847c4:	e761      	b.n	8468a <_realloc_r+0x22e>
   847c6:	bf00      	nop

000847c8 <_sbrk_r>:
   847c8:	b538      	push	{r3, r4, r5, lr}
   847ca:	2300      	movs	r3, #0
   847cc:	4c06      	ldr	r4, [pc, #24]	; (847e8 <_sbrk_r+0x20>)
   847ce:	4605      	mov	r5, r0
   847d0:	4608      	mov	r0, r1
   847d2:	6023      	str	r3, [r4, #0]
   847d4:	f7fc f9b4 	bl	80b40 <_sbrk>
   847d8:	1c43      	adds	r3, r0, #1
   847da:	d000      	beq.n	847de <_sbrk_r+0x16>
   847dc:	bd38      	pop	{r3, r4, r5, pc}
   847de:	6823      	ldr	r3, [r4, #0]
   847e0:	2b00      	cmp	r3, #0
   847e2:	d0fb      	beq.n	847dc <_sbrk_r+0x14>
   847e4:	602b      	str	r3, [r5, #0]
   847e6:	bd38      	pop	{r3, r4, r5, pc}
   847e8:	20070bf4 	.word	0x20070bf4

000847ec <__sread>:
   847ec:	b510      	push	{r4, lr}
   847ee:	460c      	mov	r4, r1
   847f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   847f4:	f000 fa22 	bl	84c3c <_read_r>
   847f8:	2800      	cmp	r0, #0
   847fa:	db03      	blt.n	84804 <__sread+0x18>
   847fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   847fe:	4403      	add	r3, r0
   84800:	6523      	str	r3, [r4, #80]	; 0x50
   84802:	bd10      	pop	{r4, pc}
   84804:	89a3      	ldrh	r3, [r4, #12]
   84806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8480a:	81a3      	strh	r3, [r4, #12]
   8480c:	bd10      	pop	{r4, pc}
   8480e:	bf00      	nop

00084810 <__swrite>:
   84810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84814:	460c      	mov	r4, r1
   84816:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8481a:	461f      	mov	r7, r3
   8481c:	05cb      	lsls	r3, r1, #23
   8481e:	4616      	mov	r6, r2
   84820:	4605      	mov	r5, r0
   84822:	d507      	bpl.n	84834 <__swrite+0x24>
   84824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84828:	2302      	movs	r3, #2
   8482a:	2200      	movs	r2, #0
   8482c:	f000 f9f0 	bl	84c10 <_lseek_r>
   84830:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84834:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84838:	81a1      	strh	r1, [r4, #12]
   8483a:	463b      	mov	r3, r7
   8483c:	4632      	mov	r2, r6
   8483e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84842:	4628      	mov	r0, r5
   84844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84848:	f000 b8d0 	b.w	849ec <_write_r>

0008484c <__sseek>:
   8484c:	b510      	push	{r4, lr}
   8484e:	460c      	mov	r4, r1
   84850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84854:	f000 f9dc 	bl	84c10 <_lseek_r>
   84858:	89a3      	ldrh	r3, [r4, #12]
   8485a:	1c42      	adds	r2, r0, #1
   8485c:	bf0e      	itee	eq
   8485e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84866:	6520      	strne	r0, [r4, #80]	; 0x50
   84868:	81a3      	strh	r3, [r4, #12]
   8486a:	bd10      	pop	{r4, pc}

0008486c <__sclose>:
   8486c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84870:	f000 b934 	b.w	84adc <_close_r>

00084874 <strlen>:
   84874:	f020 0103 	bic.w	r1, r0, #3
   84878:	f010 0003 	ands.w	r0, r0, #3
   8487c:	f1c0 0000 	rsb	r0, r0, #0
   84880:	f851 3b04 	ldr.w	r3, [r1], #4
   84884:	f100 0c04 	add.w	ip, r0, #4
   84888:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8488c:	f06f 0200 	mvn.w	r2, #0
   84890:	bf1c      	itt	ne
   84892:	fa22 f20c 	lsrne.w	r2, r2, ip
   84896:	4313      	orrne	r3, r2
   84898:	f04f 0c01 	mov.w	ip, #1
   8489c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   848a0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   848a4:	eba3 020c 	sub.w	r2, r3, ip
   848a8:	ea22 0203 	bic.w	r2, r2, r3
   848ac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   848b0:	bf04      	itt	eq
   848b2:	f851 3b04 	ldreq.w	r3, [r1], #4
   848b6:	3004      	addeq	r0, #4
   848b8:	d0f4      	beq.n	848a4 <strlen+0x30>
   848ba:	f1c2 0100 	rsb	r1, r2, #0
   848be:	ea02 0201 	and.w	r2, r2, r1
   848c2:	fab2 f282 	clz	r2, r2
   848c6:	f1c2 021f 	rsb	r2, r2, #31
   848ca:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   848ce:	4770      	bx	lr

000848d0 <__swbuf_r>:
   848d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   848d2:	460d      	mov	r5, r1
   848d4:	4614      	mov	r4, r2
   848d6:	4606      	mov	r6, r0
   848d8:	b110      	cbz	r0, 848e0 <__swbuf_r+0x10>
   848da:	6b83      	ldr	r3, [r0, #56]	; 0x38
   848dc:	2b00      	cmp	r3, #0
   848de:	d04b      	beq.n	84978 <__swbuf_r+0xa8>
   848e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   848e4:	69a3      	ldr	r3, [r4, #24]
   848e6:	b291      	uxth	r1, r2
   848e8:	0708      	lsls	r0, r1, #28
   848ea:	60a3      	str	r3, [r4, #8]
   848ec:	d539      	bpl.n	84962 <__swbuf_r+0x92>
   848ee:	6923      	ldr	r3, [r4, #16]
   848f0:	2b00      	cmp	r3, #0
   848f2:	d036      	beq.n	84962 <__swbuf_r+0x92>
   848f4:	b2ed      	uxtb	r5, r5
   848f6:	0489      	lsls	r1, r1, #18
   848f8:	462f      	mov	r7, r5
   848fa:	d515      	bpl.n	84928 <__swbuf_r+0x58>
   848fc:	6822      	ldr	r2, [r4, #0]
   848fe:	6961      	ldr	r1, [r4, #20]
   84900:	1ad3      	subs	r3, r2, r3
   84902:	428b      	cmp	r3, r1
   84904:	da1c      	bge.n	84940 <__swbuf_r+0x70>
   84906:	3301      	adds	r3, #1
   84908:	68a1      	ldr	r1, [r4, #8]
   8490a:	1c50      	adds	r0, r2, #1
   8490c:	3901      	subs	r1, #1
   8490e:	60a1      	str	r1, [r4, #8]
   84910:	6020      	str	r0, [r4, #0]
   84912:	7015      	strb	r5, [r2, #0]
   84914:	6962      	ldr	r2, [r4, #20]
   84916:	429a      	cmp	r2, r3
   84918:	d01a      	beq.n	84950 <__swbuf_r+0x80>
   8491a:	89a3      	ldrh	r3, [r4, #12]
   8491c:	07db      	lsls	r3, r3, #31
   8491e:	d501      	bpl.n	84924 <__swbuf_r+0x54>
   84920:	2d0a      	cmp	r5, #10
   84922:	d015      	beq.n	84950 <__swbuf_r+0x80>
   84924:	4638      	mov	r0, r7
   84926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84928:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8492a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8492e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84932:	81a2      	strh	r2, [r4, #12]
   84934:	6822      	ldr	r2, [r4, #0]
   84936:	6661      	str	r1, [r4, #100]	; 0x64
   84938:	6961      	ldr	r1, [r4, #20]
   8493a:	1ad3      	subs	r3, r2, r3
   8493c:	428b      	cmp	r3, r1
   8493e:	dbe2      	blt.n	84906 <__swbuf_r+0x36>
   84940:	4621      	mov	r1, r4
   84942:	4630      	mov	r0, r6
   84944:	f7fe fd0a 	bl	8335c <_fflush_r>
   84948:	b940      	cbnz	r0, 8495c <__swbuf_r+0x8c>
   8494a:	2301      	movs	r3, #1
   8494c:	6822      	ldr	r2, [r4, #0]
   8494e:	e7db      	b.n	84908 <__swbuf_r+0x38>
   84950:	4621      	mov	r1, r4
   84952:	4630      	mov	r0, r6
   84954:	f7fe fd02 	bl	8335c <_fflush_r>
   84958:	2800      	cmp	r0, #0
   8495a:	d0e3      	beq.n	84924 <__swbuf_r+0x54>
   8495c:	f04f 37ff 	mov.w	r7, #4294967295
   84960:	e7e0      	b.n	84924 <__swbuf_r+0x54>
   84962:	4621      	mov	r1, r4
   84964:	4630      	mov	r0, r6
   84966:	f7fe fbe9 	bl	8313c <__swsetup_r>
   8496a:	2800      	cmp	r0, #0
   8496c:	d1f6      	bne.n	8495c <__swbuf_r+0x8c>
   8496e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84972:	6923      	ldr	r3, [r4, #16]
   84974:	b291      	uxth	r1, r2
   84976:	e7bd      	b.n	848f4 <__swbuf_r+0x24>
   84978:	f7fe fd48 	bl	8340c <__sinit>
   8497c:	e7b0      	b.n	848e0 <__swbuf_r+0x10>
   8497e:	bf00      	nop

00084980 <_wcrtomb_r>:
   84980:	b5f0      	push	{r4, r5, r6, r7, lr}
   84982:	4606      	mov	r6, r0
   84984:	b085      	sub	sp, #20
   84986:	461f      	mov	r7, r3
   84988:	b189      	cbz	r1, 849ae <_wcrtomb_r+0x2e>
   8498a:	4c10      	ldr	r4, [pc, #64]	; (849cc <_wcrtomb_r+0x4c>)
   8498c:	4d10      	ldr	r5, [pc, #64]	; (849d0 <_wcrtomb_r+0x50>)
   8498e:	6824      	ldr	r4, [r4, #0]
   84990:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84992:	2c00      	cmp	r4, #0
   84994:	bf08      	it	eq
   84996:	462c      	moveq	r4, r5
   84998:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8499c:	47a0      	blx	r4
   8499e:	1c43      	adds	r3, r0, #1
   849a0:	d103      	bne.n	849aa <_wcrtomb_r+0x2a>
   849a2:	2200      	movs	r2, #0
   849a4:	238a      	movs	r3, #138	; 0x8a
   849a6:	603a      	str	r2, [r7, #0]
   849a8:	6033      	str	r3, [r6, #0]
   849aa:	b005      	add	sp, #20
   849ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   849ae:	460c      	mov	r4, r1
   849b0:	4a06      	ldr	r2, [pc, #24]	; (849cc <_wcrtomb_r+0x4c>)
   849b2:	4d07      	ldr	r5, [pc, #28]	; (849d0 <_wcrtomb_r+0x50>)
   849b4:	6811      	ldr	r1, [r2, #0]
   849b6:	4622      	mov	r2, r4
   849b8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   849ba:	a901      	add	r1, sp, #4
   849bc:	2c00      	cmp	r4, #0
   849be:	bf08      	it	eq
   849c0:	462c      	moveq	r4, r5
   849c2:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   849c6:	47a0      	blx	r4
   849c8:	e7e9      	b.n	8499e <_wcrtomb_r+0x1e>
   849ca:	bf00      	nop
   849cc:	20070140 	.word	0x20070140
   849d0:	20070574 	.word	0x20070574

000849d4 <__ascii_wctomb>:
   849d4:	b119      	cbz	r1, 849de <__ascii_wctomb+0xa>
   849d6:	2aff      	cmp	r2, #255	; 0xff
   849d8:	d803      	bhi.n	849e2 <__ascii_wctomb+0xe>
   849da:	700a      	strb	r2, [r1, #0]
   849dc:	2101      	movs	r1, #1
   849de:	4608      	mov	r0, r1
   849e0:	4770      	bx	lr
   849e2:	238a      	movs	r3, #138	; 0x8a
   849e4:	f04f 31ff 	mov.w	r1, #4294967295
   849e8:	6003      	str	r3, [r0, #0]
   849ea:	e7f8      	b.n	849de <__ascii_wctomb+0xa>

000849ec <_write_r>:
   849ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   849ee:	460e      	mov	r6, r1
   849f0:	2500      	movs	r5, #0
   849f2:	4c08      	ldr	r4, [pc, #32]	; (84a14 <_write_r+0x28>)
   849f4:	4611      	mov	r1, r2
   849f6:	4607      	mov	r7, r0
   849f8:	461a      	mov	r2, r3
   849fa:	4630      	mov	r0, r6
   849fc:	6025      	str	r5, [r4, #0]
   849fe:	f7fb fcad 	bl	8035c <_write>
   84a02:	1c43      	adds	r3, r0, #1
   84a04:	d000      	beq.n	84a08 <_write_r+0x1c>
   84a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84a08:	6823      	ldr	r3, [r4, #0]
   84a0a:	2b00      	cmp	r3, #0
   84a0c:	d0fb      	beq.n	84a06 <_write_r+0x1a>
   84a0e:	603b      	str	r3, [r7, #0]
   84a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84a12:	bf00      	nop
   84a14:	20070bf4 	.word	0x20070bf4

00084a18 <__register_exitproc>:
   84a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84a1c:	4d2c      	ldr	r5, [pc, #176]	; (84ad0 <__register_exitproc+0xb8>)
   84a1e:	4606      	mov	r6, r0
   84a20:	6828      	ldr	r0, [r5, #0]
   84a22:	4698      	mov	r8, r3
   84a24:	460f      	mov	r7, r1
   84a26:	4691      	mov	r9, r2
   84a28:	f7ff f8b0 	bl	83b8c <__retarget_lock_acquire_recursive>
   84a2c:	4b29      	ldr	r3, [pc, #164]	; (84ad4 <__register_exitproc+0xbc>)
   84a2e:	681c      	ldr	r4, [r3, #0]
   84a30:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84a34:	2b00      	cmp	r3, #0
   84a36:	d03e      	beq.n	84ab6 <__register_exitproc+0x9e>
   84a38:	685a      	ldr	r2, [r3, #4]
   84a3a:	2a1f      	cmp	r2, #31
   84a3c:	dc1c      	bgt.n	84a78 <__register_exitproc+0x60>
   84a3e:	f102 0e01 	add.w	lr, r2, #1
   84a42:	b176      	cbz	r6, 84a62 <__register_exitproc+0x4a>
   84a44:	2101      	movs	r1, #1
   84a46:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84a4a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84a4e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84a52:	4091      	lsls	r1, r2
   84a54:	4308      	orrs	r0, r1
   84a56:	2e02      	cmp	r6, #2
   84a58:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84a5c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84a60:	d023      	beq.n	84aaa <__register_exitproc+0x92>
   84a62:	3202      	adds	r2, #2
   84a64:	f8c3 e004 	str.w	lr, [r3, #4]
   84a68:	6828      	ldr	r0, [r5, #0]
   84a6a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84a6e:	f7ff f88f 	bl	83b90 <__retarget_lock_release_recursive>
   84a72:	2000      	movs	r0, #0
   84a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84a78:	4b17      	ldr	r3, [pc, #92]	; (84ad8 <__register_exitproc+0xc0>)
   84a7a:	b30b      	cbz	r3, 84ac0 <__register_exitproc+0xa8>
   84a7c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84a80:	f7ff f900 	bl	83c84 <malloc>
   84a84:	4603      	mov	r3, r0
   84a86:	b1d8      	cbz	r0, 84ac0 <__register_exitproc+0xa8>
   84a88:	2000      	movs	r0, #0
   84a8a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84a8e:	f04f 0e01 	mov.w	lr, #1
   84a92:	6058      	str	r0, [r3, #4]
   84a94:	6019      	str	r1, [r3, #0]
   84a96:	4602      	mov	r2, r0
   84a98:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84a9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84aa0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84aa4:	2e00      	cmp	r6, #0
   84aa6:	d0dc      	beq.n	84a62 <__register_exitproc+0x4a>
   84aa8:	e7cc      	b.n	84a44 <__register_exitproc+0x2c>
   84aaa:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84aae:	4301      	orrs	r1, r0
   84ab0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84ab4:	e7d5      	b.n	84a62 <__register_exitproc+0x4a>
   84ab6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84aba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84abe:	e7bb      	b.n	84a38 <__register_exitproc+0x20>
   84ac0:	6828      	ldr	r0, [r5, #0]
   84ac2:	f7ff f865 	bl	83b90 <__retarget_lock_release_recursive>
   84ac6:	f04f 30ff 	mov.w	r0, #4294967295
   84aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84ace:	bf00      	nop
   84ad0:	20070570 	.word	0x20070570
   84ad4:	00084cb0 	.word	0x00084cb0
   84ad8:	00083c85 	.word	0x00083c85

00084adc <_close_r>:
   84adc:	b538      	push	{r3, r4, r5, lr}
   84ade:	2300      	movs	r3, #0
   84ae0:	4c06      	ldr	r4, [pc, #24]	; (84afc <_close_r+0x20>)
   84ae2:	4605      	mov	r5, r0
   84ae4:	4608      	mov	r0, r1
   84ae6:	6023      	str	r3, [r4, #0]
   84ae8:	f7fc f846 	bl	80b78 <_close>
   84aec:	1c43      	adds	r3, r0, #1
   84aee:	d000      	beq.n	84af2 <_close_r+0x16>
   84af0:	bd38      	pop	{r3, r4, r5, pc}
   84af2:	6823      	ldr	r3, [r4, #0]
   84af4:	2b00      	cmp	r3, #0
   84af6:	d0fb      	beq.n	84af0 <_close_r+0x14>
   84af8:	602b      	str	r3, [r5, #0]
   84afa:	bd38      	pop	{r3, r4, r5, pc}
   84afc:	20070bf4 	.word	0x20070bf4

00084b00 <_fclose_r>:
   84b00:	b570      	push	{r4, r5, r6, lr}
   84b02:	b159      	cbz	r1, 84b1c <_fclose_r+0x1c>
   84b04:	4605      	mov	r5, r0
   84b06:	460c      	mov	r4, r1
   84b08:	b110      	cbz	r0, 84b10 <_fclose_r+0x10>
   84b0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84b0c:	2b00      	cmp	r3, #0
   84b0e:	d03c      	beq.n	84b8a <_fclose_r+0x8a>
   84b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84b12:	07d8      	lsls	r0, r3, #31
   84b14:	d505      	bpl.n	84b22 <_fclose_r+0x22>
   84b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84b1a:	b92b      	cbnz	r3, 84b28 <_fclose_r+0x28>
   84b1c:	2600      	movs	r6, #0
   84b1e:	4630      	mov	r0, r6
   84b20:	bd70      	pop	{r4, r5, r6, pc}
   84b22:	89a3      	ldrh	r3, [r4, #12]
   84b24:	0599      	lsls	r1, r3, #22
   84b26:	d53c      	bpl.n	84ba2 <_fclose_r+0xa2>
   84b28:	4621      	mov	r1, r4
   84b2a:	4628      	mov	r0, r5
   84b2c:	f7fe fb7a 	bl	83224 <__sflush_r>
   84b30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84b32:	4606      	mov	r6, r0
   84b34:	b133      	cbz	r3, 84b44 <_fclose_r+0x44>
   84b36:	69e1      	ldr	r1, [r4, #28]
   84b38:	4628      	mov	r0, r5
   84b3a:	4798      	blx	r3
   84b3c:	2800      	cmp	r0, #0
   84b3e:	bfb8      	it	lt
   84b40:	f04f 36ff 	movlt.w	r6, #4294967295
   84b44:	89a3      	ldrh	r3, [r4, #12]
   84b46:	061a      	lsls	r2, r3, #24
   84b48:	d422      	bmi.n	84b90 <_fclose_r+0x90>
   84b4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84b4c:	b141      	cbz	r1, 84b60 <_fclose_r+0x60>
   84b4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84b52:	4299      	cmp	r1, r3
   84b54:	d002      	beq.n	84b5c <_fclose_r+0x5c>
   84b56:	4628      	mov	r0, r5
   84b58:	f7fe fd7e 	bl	83658 <_free_r>
   84b5c:	2300      	movs	r3, #0
   84b5e:	6323      	str	r3, [r4, #48]	; 0x30
   84b60:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84b62:	b121      	cbz	r1, 84b6e <_fclose_r+0x6e>
   84b64:	4628      	mov	r0, r5
   84b66:	f7fe fd77 	bl	83658 <_free_r>
   84b6a:	2300      	movs	r3, #0
   84b6c:	6463      	str	r3, [r4, #68]	; 0x44
   84b6e:	f7fe fc7d 	bl	8346c <__sfp_lock_acquire>
   84b72:	2200      	movs	r2, #0
   84b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84b76:	81a2      	strh	r2, [r4, #12]
   84b78:	07db      	lsls	r3, r3, #31
   84b7a:	d50e      	bpl.n	84b9a <_fclose_r+0x9a>
   84b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b7e:	f7ff f803 	bl	83b88 <__retarget_lock_close_recursive>
   84b82:	f7fe fc79 	bl	83478 <__sfp_lock_release>
   84b86:	4630      	mov	r0, r6
   84b88:	bd70      	pop	{r4, r5, r6, pc}
   84b8a:	f7fe fc3f 	bl	8340c <__sinit>
   84b8e:	e7bf      	b.n	84b10 <_fclose_r+0x10>
   84b90:	6921      	ldr	r1, [r4, #16]
   84b92:	4628      	mov	r0, r5
   84b94:	f7fe fd60 	bl	83658 <_free_r>
   84b98:	e7d7      	b.n	84b4a <_fclose_r+0x4a>
   84b9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b9c:	f7fe fff8 	bl	83b90 <__retarget_lock_release_recursive>
   84ba0:	e7ec      	b.n	84b7c <_fclose_r+0x7c>
   84ba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84ba4:	f7fe fff2 	bl	83b8c <__retarget_lock_acquire_recursive>
   84ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84bac:	2b00      	cmp	r3, #0
   84bae:	d1bb      	bne.n	84b28 <_fclose_r+0x28>
   84bb0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84bb2:	f016 0601 	ands.w	r6, r6, #1
   84bb6:	d1b1      	bne.n	84b1c <_fclose_r+0x1c>
   84bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84bba:	f7fe ffe9 	bl	83b90 <__retarget_lock_release_recursive>
   84bbe:	4630      	mov	r0, r6
   84bc0:	bd70      	pop	{r4, r5, r6, pc}
   84bc2:	bf00      	nop

00084bc4 <_fstat_r>:
   84bc4:	b570      	push	{r4, r5, r6, lr}
   84bc6:	460d      	mov	r5, r1
   84bc8:	2300      	movs	r3, #0
   84bca:	4c07      	ldr	r4, [pc, #28]	; (84be8 <_fstat_r+0x24>)
   84bcc:	4606      	mov	r6, r0
   84bce:	4611      	mov	r1, r2
   84bd0:	4628      	mov	r0, r5
   84bd2:	6023      	str	r3, [r4, #0]
   84bd4:	f7fb ffd3 	bl	80b7e <_fstat>
   84bd8:	1c43      	adds	r3, r0, #1
   84bda:	d000      	beq.n	84bde <_fstat_r+0x1a>
   84bdc:	bd70      	pop	{r4, r5, r6, pc}
   84bde:	6823      	ldr	r3, [r4, #0]
   84be0:	2b00      	cmp	r3, #0
   84be2:	d0fb      	beq.n	84bdc <_fstat_r+0x18>
   84be4:	6033      	str	r3, [r6, #0]
   84be6:	bd70      	pop	{r4, r5, r6, pc}
   84be8:	20070bf4 	.word	0x20070bf4

00084bec <_isatty_r>:
   84bec:	b538      	push	{r3, r4, r5, lr}
   84bee:	2300      	movs	r3, #0
   84bf0:	4c06      	ldr	r4, [pc, #24]	; (84c0c <_isatty_r+0x20>)
   84bf2:	4605      	mov	r5, r0
   84bf4:	4608      	mov	r0, r1
   84bf6:	6023      	str	r3, [r4, #0]
   84bf8:	f7fb ffc6 	bl	80b88 <_isatty>
   84bfc:	1c43      	adds	r3, r0, #1
   84bfe:	d000      	beq.n	84c02 <_isatty_r+0x16>
   84c00:	bd38      	pop	{r3, r4, r5, pc}
   84c02:	6823      	ldr	r3, [r4, #0]
   84c04:	2b00      	cmp	r3, #0
   84c06:	d0fb      	beq.n	84c00 <_isatty_r+0x14>
   84c08:	602b      	str	r3, [r5, #0]
   84c0a:	bd38      	pop	{r3, r4, r5, pc}
   84c0c:	20070bf4 	.word	0x20070bf4

00084c10 <_lseek_r>:
   84c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84c12:	460e      	mov	r6, r1
   84c14:	2500      	movs	r5, #0
   84c16:	4c08      	ldr	r4, [pc, #32]	; (84c38 <_lseek_r+0x28>)
   84c18:	4611      	mov	r1, r2
   84c1a:	4607      	mov	r7, r0
   84c1c:	461a      	mov	r2, r3
   84c1e:	4630      	mov	r0, r6
   84c20:	6025      	str	r5, [r4, #0]
   84c22:	f7fb ffb3 	bl	80b8c <_lseek>
   84c26:	1c43      	adds	r3, r0, #1
   84c28:	d000      	beq.n	84c2c <_lseek_r+0x1c>
   84c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c2c:	6823      	ldr	r3, [r4, #0]
   84c2e:	2b00      	cmp	r3, #0
   84c30:	d0fb      	beq.n	84c2a <_lseek_r+0x1a>
   84c32:	603b      	str	r3, [r7, #0]
   84c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c36:	bf00      	nop
   84c38:	20070bf4 	.word	0x20070bf4

00084c3c <_read_r>:
   84c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84c3e:	460e      	mov	r6, r1
   84c40:	2500      	movs	r5, #0
   84c42:	4c08      	ldr	r4, [pc, #32]	; (84c64 <_read_r+0x28>)
   84c44:	4611      	mov	r1, r2
   84c46:	4607      	mov	r7, r0
   84c48:	461a      	mov	r2, r3
   84c4a:	4630      	mov	r0, r6
   84c4c:	6025      	str	r5, [r4, #0]
   84c4e:	f7fb fa87 	bl	80160 <_read>
   84c52:	1c43      	adds	r3, r0, #1
   84c54:	d000      	beq.n	84c58 <_read_r+0x1c>
   84c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c58:	6823      	ldr	r3, [r4, #0]
   84c5a:	2b00      	cmp	r3, #0
   84c5c:	d0fb      	beq.n	84c56 <_read_r+0x1a>
   84c5e:	603b      	str	r3, [r7, #0]
   84c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c62:	bf00      	nop
   84c64:	20070bf4 	.word	0x20070bf4
   84c68:	64726148 	.word	0x64726148
   84c6c:	75616620 	.word	0x75616620
   84c70:	0000746c 	.word	0x0000746c
   84c74:	736e6f43 	.word	0x736e6f43
   84c78:	20656c6f 	.word	0x20656c6f
   84c7c:	64616572 	.word	0x64616572
   84c80:	00000a79 	.word	0x00000a79
   84c84:	3d3d3d3d 	.word	0x3d3d3d3d
   84c88:	3d3d3d3d 	.word	0x3d3d3d3d
   84c8c:	3d3d3d3d 	.word	0x3d3d3d3d
   84c90:	00000a3d 	.word	0x00000a3d
   84c94:	2e756c25 	.word	0x2e756c25
   84c98:	756c2520 	.word	0x756c2520
   84c9c:	2d2d2020 	.word	0x2d2d2020
   84ca0:	202d2d2d 	.word	0x202d2d2d
   84ca4:	2e756c25 	.word	0x2e756c25
   84ca8:	756c2520 	.word	0x756c2520
   84cac:	0000000a 	.word	0x0000000a

00084cb0 <_global_impure_ptr>:
   84cb0:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   84cc0:	46454443 00000000 33323130 37363534     CDEF....01234567
   84cd0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84ce0:	0000296c                                l)..

00084ce4 <blanks.7217>:
   84ce4:	20202020 20202020 20202020 20202020                     

00084cf4 <zeroes.7218>:
   84cf4:	30303030 30303030 30303030 30303030     0000000000000000
   84d04:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00084d14 <_ctype_>:
   84d14:	20202000 20202020 28282020 20282828     .         ((((( 
   84d24:	20202020 20202020 20202020 20202020                     
   84d34:	10108820 10101010 10101010 10101010      ...............
   84d44:	04040410 04040404 10040404 10101010     ................
   84d54:	41411010 41414141 01010101 01010101     ..AAAAAA........
   84d64:	01010101 01010101 01010101 10101010     ................
   84d74:	42421010 42424242 02020202 02020202     ..BBBBBB........
   84d84:	02020202 02020202 02020202 10101010     ................
   84d94:	00000020 00000000 00000000 00000000      ...............
	...

00084e18 <_init>:
   84e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e1a:	bf00      	nop
   84e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84e1e:	bc08      	pop	{r3}
   84e20:	469e      	mov	lr, r3
   84e22:	4770      	bx	lr

00084e24 <__init_array_start>:
   84e24:	00083205 	.word	0x00083205

00084e28 <__frame_dummy_init_array_entry>:
   84e28:	00080119                                ....

00084e2c <_fini>:
   84e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e2e:	bf00      	nop
   84e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84e32:	bc08      	pop	{r3}
   84e34:	469e      	mov	lr, r3
   84e36:	4770      	bx	lr

00084e38 <__fini_array_start>:
   84e38:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <_impure_ptr>:
20070140:	20070148 00000000                       H.. ....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <__atexit_recursive_mutex>:
20070570:	20070bd0                                ... 

20070574 <__global_locale>:
20070574:	00000043 00000000 00000000 00000000     C...............
	...
20070594:	00000043 00000000 00000000 00000000     C...............
	...
200705b4:	00000043 00000000 00000000 00000000     C...............
	...
200705d4:	00000043 00000000 00000000 00000000     C...............
	...
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	000849d5 000841d9 00000000 00084d14     .I...A.......M..
20070664:	00084d10 00084cc4 00084cc4 00084cc4     .M...L...L...L..
20070674:	00084cc4 00084cc4 00084cc4 00084cc4     .L...L...L...L..
20070684:	00084cc4 00084cc4 ffffffff ffffffff     .L...L..........
20070694:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706e0 <__malloc_av_>:
	...
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 

20070ae8 <__malloc_sbrk_base>:
20070ae8:	ffffffff                                ....

20070aec <__malloc_trim_threshold>:
20070aec:	00020000                                ....
